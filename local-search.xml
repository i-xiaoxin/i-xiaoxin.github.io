<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于CentOS安装FastDFS</title>
    <link href="/2022/10/19/%E5%9F%BA%E4%BA%8ECentOS%E5%AE%89%E8%A3%85FastDFS/"/>
    <url>/2022/10/19/%E5%9F%BA%E4%BA%8ECentOS%E5%AE%89%E8%A3%85FastDFS/</url>
    
    <content type="html"><![CDATA[<h1 id="1-CentOS下使用FastDFS"><a href="#1-CentOS下使用FastDFS" class="headerlink" title="1.CentOS下使用FastDFS"></a>1.CentOS下使用FastDFS</h1><p>准备安装文件</p><ul><li>FastDFS_v5.08.tar.gz  <a href="https://gitee.com/fastdfs100/fastdfs/releases">Download</a></li><li>libfastcommon-master.zip <a href="https://github.com/happyfish100/libfastcommon">Download</a></li><li>fastdfs-nginx-module_v1.16.tar.gz <a href="https://github.com/happyfish100/fastdfs-nginx-module/tags">Download</a></li><li>nginx-1.10.0.tar.gz   <a href="http://nginx.org/download/">Download</a></li></ul><h2 id="1-1-单节点FastDFS"><a href="#1-1-单节点FastDFS" class="headerlink" title="1.1.单节点FastDFS"></a>1.1.单节点FastDFS</h2><h3 id="1-1-1-安装gcc"><a href="#1-1-1-安装gcc" class="headerlink" title="1.1.1.安装gcc"></a>1.1.1.安装gcc</h3><p>GCC用来对C语言代码进行编译运行，使用yum命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc<br></code></pre></td></tr></table></figure><h3 id="1-1-3-安装libfastcommon-master"><a href="#1-1-3-安装libfastcommon-master" class="headerlink" title="1.1.3.安装libfastcommon-master"></a>1.1.3.安装libfastcommon-master</h3><p>libfastcommon-master.zip（是从 FastDFS 和 FastDHT 中提取出来的公共 C 函数库）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">解压刚刚上传的libfastcommon-master.zip</span><br>unzip libfastcommon-master.zip<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入解压完成的目录</span><br>cd libfastcommon-master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">编译并且安装：</span><br>./make.sh <br>./make.sh install<br></code></pre></td></tr></table></figure><h3 id="1-1-4-安装fastdfs"><a href="#1-1-4-安装fastdfs" class="headerlink" title="1.1.4.安装fastdfs"></a>1.1.4.安装fastdfs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf FastDFS_v5.08.tar.gz<br><br>cd FastDFS<br><br>./make.sh <br><br>./make.sh install<br></code></pre></td></tr></table></figure><p>如果安装成功，会看到&#x2F;etc&#x2F;init.d&#x2F;下看到提供的脚本文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll /etc/init.d/ | grep fdfs <br></code></pre></td></tr></table></figure><ul><li><code>fdfs_trackerd</code> 是tracker启动脚本</li><li><code>fdfs_storaged</code> 是storage启动脚本</li></ul><p>能够在 &#x2F;etc&#x2F;fdfs&#x2F; 目录下看到默认的配置文件模板：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll /etc/fdfs/<br></code></pre></td></tr></table></figure><ul><li><code>tarcker.conf.sample</code> 是tracker的配置文件模板</li><li><code>storage.conf.sample</code> 是storage的配置文件模板</li><li><code>client.conf.sample</code> 是客户端的配置文件模板</li></ul><h3 id="1-1-5-配置并启动tracker服务"><a href="#1-1-5-配置并启动tracker服务" class="headerlink" title="1.1.5.配置并启动tracker服务"></a>1.1.5.配置并启动tracker服务</h3><p>FastDFS的tracker和storage在刚刚的安装过程中，都已经被安装了，因此我们安装这两种角色的方式是一样的。不同的是，两种需要不同的配置文件。</p><p>我们要启动tracker，就修改刚刚看到的<code>tarcker.conf</code>，并且启动<code>fdfs_trackerd</code>脚本即可。</p><p>1）首先将模板文件复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf<br></code></pre></td></tr></table></figure><p>2）修改复制后的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/fdfs/tracker.conf <br></code></pre></td></tr></table></figure><p># 修改的内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">base_path=/powershop/tracker                 # 存储日志和数据的根目录<br></code></pre></td></tr></table></figure><p>3）新建目录：     </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /powershop/tracker<br></code></pre></td></tr></table></figure><p> 注意：关闭防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chkconfig iptables off<br></code></pre></td></tr></table></figure><p>4）启动和停止</p><p>启动tracker服务器:     <code>/etc/init.d/fdfs_trackerd start</code></p><p>停止tracker服务器:     <code>/etc/init.d/fdfs_trackerd stop</code></p><p>不过安装过程中，fdfs已经被设置为系统服务，我们可以采用熟悉的服务启动方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service fdfs_trackerd start # 启动fdfs_trackerd服务，停止用stop<br></code></pre></td></tr></table></figure><p>检查FastDFS Tracker Server是否启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep fdfs_trackerd<br></code></pre></td></tr></table></figure><p>设置tracker服务开机启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chkconfig fdfs_trackerd on<br></code></pre></td></tr></table></figure><h3 id="1-1-6-配置并启动storage服务"><a href="#1-1-6-配置并启动storage服务" class="headerlink" title="1.1.6.配置并启动storage服务"></a>1.1.6.配置并启动storage服务</h3><p>1）首先将模板文件复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf<br></code></pre></td></tr></table></figure><p>2）修改复制后的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/fdfs/storage.conf<br></code></pre></td></tr></table></figure><p># 修改的内容如下: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">base_path=/powershop/storage                 # 日志文件存储根目录 <br><br>store_path0=/powershop/storage           # 文件存储目录 <br><br>tracker_server=192.168.204.131:22122       #  tracker服务器IP和端口 <br></code></pre></td></tr></table></figure><p>3）新建目录：     </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/powershop/</span>storage<br></code></pre></td></tr></table></figure><p> 注意关闭防火墙：   <code>chkconfig iptables off</code></p><p> 4）启动和停止</p><p>启动storage服务器：<code>/etc/init.d/fdfs_storaged start</code></p><p>停止storage服务器：<code>/etc/init.d/fdfs_storaged stop</code></p><p>推荐使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service fdfs_storaged start  # 启动fdfs_storaged服务，停止用stop<br></code></pre></td></tr></table></figure><p>检查FastDFS Tracker Server是否启动成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps -ef | grep fdfs<br></code></pre></td></tr></table></figure><p>设置storage服务开机启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">chkconfig fdfs_storaged on<br></code></pre></td></tr></table></figure><h1 id="2-使用nginx访问FastDFS"><a href="#2-使用nginx访问FastDFS" class="headerlink" title="2.使用nginx访问FastDFS"></a>2.使用nginx访问FastDFS</h1><h2 id="2-1-为什么需要用Nginx访问？"><a href="#2-1-为什么需要用Nginx访问？" class="headerlink" title="2.1.为什么需要用Nginx访问？"></a>2.1.为什么需要用Nginx访问？</h2><p>FastDFS通过Tracker服务器,将文件放在Storage服务器存储，但是同组存储服务器之间需要进入文件复制，有同步延迟的问题。</p><p>假设Tracker服务器将文件上传到了192.168.1.125，上传成功后文件ID已经返回给客户端。此时FastDFS存储集群机制会将这个文件同步到同组存储192.168.1.126，在文件还没有复制完成的情况下，客户端如果用这个文件ID在192.168.1.126上取文件,就会出现文件无法访问的错误。</p><p>而fastdfs-nginx-module可以重定向文件连接到文件上传时的源服务器取文件,避免客户端由于复制延迟导致的文件无法访问错误</p><h2 id="2-2-安装fastdfs-nginx-module插件"><a href="#2-2-安装fastdfs-nginx-module插件" class="headerlink" title="2.2.安装fastdfs-nginx-module插件"></a>2.2.安装fastdfs-nginx-module插件</h2><h3 id="2-2-1-解压"><a href="#2-2-1-解压" class="headerlink" title="2.2.1.解压"></a>2.2.1.解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf fastdfs-nginx-module_v1.16.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-2-2-修改config"><a href="#2-2-2-修改config" class="headerlink" title="2.2.2.修改config"></a>2.2.2.修改config</h3><p>1）进入src目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd fastdfs-nginx-module/src/<br></code></pre></td></tr></table></figure><p>2）编辑config</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim config<br></code></pre></td></tr></table></figure><p>使用以下底行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">:%s+/usr/local/+/usr/+g<br></code></pre></td></tr></table></figure><p>将所有的&#x2F;usr&#x2F;local替换为 &#x2F;usr，这个才是正确的目录</p><h3 id="2-2-3-配置fastdfs-nginx-module与FastDFS关联配置文件"><a href="#2-2-3-配置fastdfs-nginx-module与FastDFS关联配置文件" class="headerlink" title="2.2.3.配置fastdfs-nginx-module与FastDFS关联配置文件"></a>2.2.3.配置fastdfs-nginx-module与FastDFS关联配置文件</h3><p>复制 fastdfs-nginx-module 源码中的配置文件到&#x2F;etc&#x2F;fdfs 目录， 并修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /usr/upload/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/<br><br>vim /etc/fdfs/mod_fastdfs.conf<br></code></pre></td></tr></table></figure><p>修改以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">connect_timeout=10                       # 客户端访问文件连接超时时长（单位：秒）<br><br>tracker_server=192.168.204.131:22122    # tracker服务IP和端口<br><br>url_have_group_name=true                # 访问链接前缀加上组名<br><br>store_path0=/powershop/storage            # 文件存储路径<br></code></pre></td></tr></table></figure><p>复制 FastDFS 的部分配置文件到&#x2F;etc&#x2F;fdfs 目录，否则不支持nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/upload/FastDFS/conf/<br>cp http.conf mime.types /etc/fdfs/<br></code></pre></td></tr></table></figure><h2 id="2-3-安装Nginx"><a href="#2-3-安装Nginx" class="headerlink" title="2.3.安装Nginx"></a>2.3.安装Nginx</h2><h3 id="2-3-1-如果没安装过nginx"><a href="#2-3-1-如果没安装过nginx" class="headerlink" title="2.3.1.如果没安装过nginx"></a>2.3.1.如果没安装过nginx</h3><ul><li>安装nginx的依赖库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><ul><li>解压安装包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf nginx-1.10.0.tar.gz<br></code></pre></td></tr></table></figure><ul><li>配置nginx安装包，并指定fastdfs-nginx-model</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd nginx-1.10.0<br><br>./configure --prefix=/usr/local/nginx --add-module=/usr/upload/fastdfs-nginx-module/src<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：在执行.&#x2F;configure配置nginx参数的时候，需要将fastdfs-nginx-moudle源码作为模块编译进去。</p><ul><li>编译并安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="2-3-2-如果已经安装过nginx"><a href="#2-3-2-如果已经安装过nginx" class="headerlink" title="2.3.2.如果已经安装过nginx"></a>2.3.2.如果已经安装过nginx</h3><p>1） 进入nginx目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/upload/nginx-1.10.0/<br></code></pre></td></tr></table></figure><p>2） 配置FastDFS 模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx --add-module=/usr/upload/fastdfs-nginx-module/src<br></code></pre></td></tr></table></figure><p>注意：这次配置时，要添加fastdfs-nginx-moudle模块</p><p>3） 编译，注意，这次不要安装（install）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><p>4） 替换nginx二进制文件:</p><p>备份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /usr/bin/nginx /usr/bin/nginx-bak<br></code></pre></td></tr></table></figure><p>用新编译的nginx启动文件替代原来的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp objs/nginx /usr/bin/<br></code></pre></td></tr></table></figure><h3 id="2-3-3-启动nginx"><a href="#2-3-3-启动nginx" class="headerlink" title="2.3.3.启动nginx"></a>2.3.3.启动nginx</h3><p>配置nginx整合fastdfs-module模块</p><p>我们需要修改nginx配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim  /usr/java/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p>将文件中，原来的<code>server 80&#123; ...&#125;</code> 部分代码替换为如下代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  image.powershop.com;<br><br><span class="hljs-comment"># 监听域名中带有group的，交给FastDFS模块处理</span><br>    <span class="hljs-section">location</span> ~/group([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])/ &#123;<br>        ngx_fastdfs_module;<span class="hljs-comment">#获得fastdfs中图片的存在路径  /usr/storage/group/0/atm.jpg</span><br>    &#125;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br><br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动nginx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">./nginx# 启动nginx<br><br>./nginx -s stop# 停止nginx<br><br>./nginx -s reload# 重新载入配置文件<br></code></pre></td></tr></table></figure><p># 可通过<code>ps -ef | grep nginx</code>查看nginx是否已启动成功    </p><h2 id="2-4-Nginx开机启动"><a href="#2-4-Nginx开机启动" class="headerlink" title="2.4.Nginx开机启动"></a>2.4.Nginx开机启动</h2><h3 id="2-4-1-编写开机启动文件"><a href="#2-4-1-编写开机启动文件" class="headerlink" title="2.4.1.编写开机启动文件"></a>2.4.1.编写开机启动文件</h3><ul><li>添加nginx.service文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /lib/systemd/system/nginx.service<br></code></pre></td></tr></table></figure><ul><li>文件内容如下：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=nginx<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/nginx/sbin/nginx<br>ExecReload=/usr/local/nginx/sbin/nginx -s reload<br>ExecStop=/usr/local/nginx/sbin/nginx -s stop<br>PrivateTmp=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="2-4-2-设置开机启动"><a href="#2-4-2-设置开机启动" class="headerlink" title="2.4.2.设置开机启动"></a>2.4.2.设置开机启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload        <span class="hljs-comment">#重新加载服务配置</span><br>systemctl <span class="hljs-built_in">enable</span> nginx.service <span class="hljs-comment">#设置为开机启动</span><br>systemctl start nginx.service  <span class="hljs-comment">#启动服务</span><br>systemctl status nginx.service <span class="hljs-comment">#查看服务状态</span><br>systemctl stop nginx.service   <span class="hljs-comment">#停止服务</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>FastDFS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>CentOS</tag>
      
      <tag>Yum</tag>
      
      <tag>FastDFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Mac配置安装Nginx</title>
    <link href="/2022/10/18/%E5%9F%BA%E4%BA%8EMac%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/2022/10/18/%E5%9F%BA%E4%BA%8EMac%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>Mac需要安装Homebrew</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用brew安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install nginx<br></code></pre></td></tr></table></figure><p>查看nginx的配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew info nginx<br></code></pre></td></tr></table></figure><p>输出内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx: stable 1.23.1 (bottled), HEAD<br>HTTP(S) server and reverse proxy, and IMAP/POP3 proxy server<br>https://nginx.org/<br><span class="hljs-comment"># 以下是安装nginx路径</span><br>/opt/homebrew/Cellar/nginx/1.23.1 (26 files, 2.2MB) *<br>  Poured from bottle on 2022-10-18 at 18:00:26<br><span class="hljs-comment"># 安装源</span><br>From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/nginx.rb<br>License: BSD-2-Clause<br>==&gt; Dependencies<br>Required: openssl@1.1 ✔, pcre2 ✔<br>==&gt; Options<br>--HEAD<br>Install HEAD version<br>==&gt; Caveats<br><span class="hljs-comment"># 根目录</span><br>Docroot is: /opt/homebrew/var/www<br><span class="hljs-comment"># 配置路径</span><br>The default port has been <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> /opt/homebrew/etc/nginx/nginx.conf to 8080 so that<br>nginx can run without sudo.<br><span class="hljs-comment"># 启动路径</span><br>nginx will load all files <span class="hljs-keyword">in</span> /opt/homebrew/etc/nginx/servers/.<br><br>To restart nginx after an upgrade:<br>  brew services restart nginx<br>Or, <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t want/need a background service you can just run:</span><br><span class="hljs-string">  /opt/homebrew/opt/nginx/bin/nginx -g daemon off;</span><br><span class="hljs-string">==&gt; Analytics</span><br><span class="hljs-string">install: 29,315 (30 days), 115,535 (90 days), 454,216 (365 days)</span><br><span class="hljs-string">install-on-request: 29,264 (30 days), 115,323 (90 days), 453,381 (365 days)</span><br><span class="hljs-string">build-error: 3 (30 days)</span><br></code></pre></td></tr></table></figure><h3 id="brew相关命令"><a href="#brew相关命令" class="headerlink" title="brew相关命令"></a>brew相关命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动nginx服务</span><br>brew services start nginx <br><span class="hljs-comment"># 重启命令</span><br>brew services restart nginx<br><span class="hljs-comment"># 关闭命令</span><br>brew services stop nginx<br><br><span class="hljs-comment"># 关闭命令提示，不推荐使用</span><br>Stopping `nginx`... (might take a <span class="hljs-keyword">while</span>)<br>==&gt; Successfully stopped `nginx` (label: homebrew.mxcl.nginx)<br><br></code></pre></td></tr></table></figure><h3 id="检验nginx配置文件"><a href="#检验nginx配置文件" class="headerlink" title="检验nginx配置文件"></a>检验nginx配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 命令</span><br>sudo /opt/homebrew/Cellar/nginx/1.23.1/bin/nginx -t -c /opt/homebrew/etc/nginx/nginx.conf<br><br><span class="hljs-comment"># 输出信息</span><br>nginx: the configuration file /opt/homebrew/etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /opt/homebrew/etc/nginx/nginx.conf <span class="hljs-built_in">test</span> is successful<br><br></code></pre></td></tr></table></figure><h3 id="通过进程关闭Nginx"><a href="#通过进程关闭Nginx" class="headerlink" title="通过进程关闭Nginx"></a>通过进程关闭Nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取到nginx的进程</span><br>ps -ef|grep nginx<br><br><span class="hljs-comment"># 输出内容</span><br> 501 74155     1   0  6:05下午 ??         0:00.00 nginx: master process /opt/homebrew/Cellar/nginx/1.23.1/bin/nginx<br>  501 74156 74155   0  6:05下午 ??         0:00.06 nginx: worker process<br>  501 77226 72927   0  6:41下午 ttys002    0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox nginx<br>  <br><span class="hljs-comment"># 进程结束命令</span><br><span class="hljs-built_in">kill</span> -term 74155<br><br><span class="hljs-comment"># 拓展</span><br><span class="hljs-built_in">kill</span> -QUIT 72 (从容的停止，即不会立刻停止)<br><br>Kill -TERM 72 （立刻停止）<br><br>Kill -INT 72 （和上面一样，也是立刻停止）<br></code></pre></td></tr></table></figure><h2 id="解决异常错误"><a href="#解决异常错误" class="headerlink" title="解决异常错误"></a>解决异常错误</h2><h3 id="Error-Failure-while-executing"><a href="#Error-Failure-while-executing" class="headerlink" title="Error: Failure while executing;"></a>Error: Failure while executing;</h3><p>起因：</p><p>通过brew 启动nginx时报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 键入命令</span><br>brew services start nginx<br></code></pre></td></tr></table></figure><p>报错内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">Bootstrap failed: 5: Input/output error<br>Try re-running the <span class="hljs-built_in">command</span> as root <span class="hljs-keyword">for</span> richer errors.<br>Error: Failure <span class="hljs-keyword">while</span> executing; `/bin/launchctl bootstrap gui/501 /Users/heminxin/Library/LaunchAgents/homebrew.mxcl.nginx.plist` exited with 5.<br></code></pre></td></tr></table></figure><p>解决：</p><p>直接进入nginx启动脚本目录通过执行nginx脚本启动；也可以使用nginx命令启动</p><h3 id="Error：在访问被代理url部分js时提示【net-ERR-CONTENT-LENGTH-MISMATCH-200-OK-】"><a href="#Error：在访问被代理url部分js时提示【net-ERR-CONTENT-LENGTH-MISMATCH-200-OK-】" class="headerlink" title="Error：在访问被代理url部分js时提示【net::ERR_CONTENT_LENGTH_MISMATCH 200 (OK)】"></a>Error：在访问被代理url部分js时提示【net::ERR_CONTENT_LENGTH_MISMATCH 200 (OK)】</h3><p>错误：</p><p>当访问url链接时，发现内容不能够加载出来，空白页面，打开控制台开发者工具发现js访问200报错net::ERR_CONTENT_LENGTH_MISMATCH 200 (OK)；查看nginx日志会发现提示权限不够，给proxy_temp文件赋权即可</p><p>解决：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入nginx运行目录找proxy_temp</span><br><span class="hljs-built_in">cd</span> /opt/homebrew/var/run/nginx<br><span class="hljs-comment"># 赋权</span><br>sudo <span class="hljs-built_in">chmod</span> 777 proxy_temp<br></code></pre></td></tr></table></figure><p>再次访问即可打开完整页面</p><h2 id="Nginx相关命令"><a href="#Nginx相关命令" class="headerlink" title="Nginx相关命令"></a>Nginx相关命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx -s reopen <span class="hljs-comment">#重启Nginx</span><br><br>nginx -s reload <span class="hljs-comment">#重新加载Nginx配置文件，然后以优雅的方式重启Nginx</span><br><br>nginx -s stop <span class="hljs-comment">#强制停止Nginx服务</span><br><br>killall nginx <span class="hljs-comment">#杀死所有nginx进程  </span><br><br>nginx -s quit <span class="hljs-comment">#优雅地停止Nginx服务（即处理完所有请求后再停止服务）</span><br><br>nginx -t <span class="hljs-comment">#检测配置文件是否有语法错误，然后退出</span><br><br>nginx -v <span class="hljs-comment">#显示版本信息并退出</span><br><br>nginx -V <span class="hljs-comment">#显示版本和配置选项信息，然后退出</span><br><br>nginx -t <span class="hljs-comment">#检测配置文件是否有语法错误，然后退出</span><br><br>nginx -T <span class="hljs-comment">#检测配置文件是否有语法错误，转储并退出</span><br><br>nginx -q <span class="hljs-comment">#在检测配置文件期间屏蔽非错误信息</span><br><br>nginx -?,-h <span class="hljs-comment">#打开帮助信息  </span><br><br>nginx -p prefix <span class="hljs-comment">#设置前缀路径(默认是:/usr/share/nginx/)</span><br><br>nginx -c filename <span class="hljs-comment">#设置配置文件(默认是:/etc/nginx/nginx.conf)</span><br><br>nginx -g directives <span class="hljs-comment">#设置配置文件外的全局指令</span><br><br></code></pre></td></tr></table></figure><p>可以通过以上方式进行相关设置</p><p>推荐Nginx开源社区🔗<a href="https://www.nginx.org.cn/">链接</a></p><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>MacOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Nginx</tag>
      
      <tag>MacOS</tag>
      
      <tag>M1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于CentOS系统Redis两种安装方式</title>
    <link href="/2022/10/17/%E5%9F%BA%E4%BA%8ECentOS%E7%B3%BB%E7%BB%9FRedis%E4%B8%A4%E7%A7%8D%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/10/17/%E5%9F%BA%E4%BA%8ECentOS%E7%B3%BB%E7%BB%9FRedis%E4%B8%A4%E7%A7%8D%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="方式一（yum安装）"><a href="#方式一（yum安装）" class="headerlink" title="方式一（yum安装）"></a>方式一（yum安装）</h2><ul><li>检查是否有redis yum 源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install redis<br></code></pre></td></tr></table></figure><ul><li>下载fedora的epel仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br></code></pre></td></tr></table></figure><ul><li>安装redis数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install redis<br></code></pre></td></tr></table></figure><ul><li>安装完毕后，使用下面的命令启动redis服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动redis</span><br>service redis start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止redis</span><br>service redis stop<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看redis运行状态</span><br>service redis status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看redis进程</span><br>ps -ef | grep redis<br></code></pre></td></tr></table></figure><ul><li>设置redis为开机自动启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chkconfig redis on<br></code></pre></td></tr></table></figure><ul><li>进入redis服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入本机redis</span><br>redis-cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有key</span><br>keys *<br>``<br>- 防火墙开放相应端口<br>```bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启6379</span><br>/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启6380</span><br>/sbin/iptables -I INPUT -p tcp --dport 6380 -j ACCEPT<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存</span><br>/etc/rc.d/init.d/iptables save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">centos 7下执行</span><br>service iptables save<br>``<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改redis默认端口和密码</span></span><br>- 打开配置文件<br>```bash<br>vi /etc/redis.conf<br></code></pre></td></tr></table></figure><ul><li><p>修改默认端口，查找 port 6379 修改为相应端口即可</p></li><li><p>修改默认密码，查找 requirepass foobared 将 foobared 修改为你的密码 </p></li><li><p>使用配置文件启动 redis</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server /etc/redis.conf<br></code></pre></td></tr></table></figure><ul><li>使用端口登录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -h 127.0.0.1 -p 6179<br></code></pre></td></tr></table></figure><ul><li><p>此时再输入命令则会报错 </p></li><li><p>输入刚才输入的密码</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">auth 111<br></code></pre></td></tr></table></figure><ul><li>关闭redis</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -h 127.0.0.1 -p 6179<br>shutdown<br></code></pre></td></tr></table></figure><p>进程号杀掉redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep redis<br>kill -9 XXX<br></code></pre></td></tr></table></figure><p>以上参考链接：<a href="https://www.jianshu.com/p/b93c7f261637">centos7安装Redis教程</a></p><h2 id="方式二（源码编译安装）"><a href="#方式二（源码编译安装）" class="headerlink" title="方式二（源码编译安装）"></a>方式二（源码编译安装）</h2><ul><li>源码下载<a href="https://github.com/redis/redis/archive/refs/tags/7.0.5.tar.gz">GitHub Download</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/redis/redis/archive/refs/tags/7.0.5.tar.gz<br></code></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf redis-6.0.16.tar.gz<br></code></pre></td></tr></table></figure><ul><li>安装c编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">因为Redis底层是C语言写的，需要安装gcc进行编译</span><br>yum -y install gcc-c++<br></code></pre></td></tr></table></figure><ul><li>预编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd redis-6.0.16/<br>make<br></code></pre></td></tr></table></figure><ul><li>安装指定路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make prefix=/usr/local/redis/ install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>CentOS</tag>
      
      <tag>Yum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx基础知识</title>
    <link href="/2022/10/17/Nginx%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/10/17/Nginx%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h2><h3 id="1-什么是Nginx？"><a href="#1-什么是Nginx？" class="headerlink" title="1. 什么是Nginx？"></a>1. 什么是Nginx？</h3><p><a href="https://nginx.org/">Nginx</a> [engine x] 是<code>Web服务器</code>和<code>反向代理</code>服务器、邮件代理服务器和通用 TCP&#x2F;UDP 代理服务器，最初由<a href="http://sysoev.ru/en/">Igor Sysoev</a>编写。很长一段时间以来，它一直在许多负载重的俄罗斯网站上运行，包括 <a href="http://www.yandex.ru/">Yandex</a>、 <a href="http://mail.ru/">Mail.Ru</a>、 <a href="http://vk.com/">VK</a>和 <a href="http://www.rambler.ru/">Rambler</a>。基于C语言开发</p><h3 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2. 反向代理"></a>2. 反向代理</h3><p>正向代理（forward proxy）：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。用于代理内部网络对internet的连接请求(如VPN&#x2F;NAT),<code>客户端</code>指定代理服务器,并将本来要直接发送给目标Web服务器的HTTP请求先发送到代理服务器上, 然后由代理服务器去访问Web服务器, 并将Web服务器的Response回传给客户端。</p><p>所谓的正向代理就是代理服务器<strong>替代访问方【用户】</strong>去访问目标服务器【服务器】</p><p>反向代理（Reverse Proxy）方式是指以代理<code>服务器</code>来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p>所谓的反向代理就是<strong>代替服务器接受用户的请求</strong>，从目标服务器中取得用户的需求资源，然后发送给用户</p><h3 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h3><blockquote><p>数据流量分摊到多个服务器上执行，减轻每台服务器的压力，多台服务器共同完成工作任务，从而提高了数据的吞吐量。</p></blockquote><h3 id="4-动静分离"><a href="#4-动静分离" class="headerlink" title="4. 动静分离"></a>4. 动静分离</h3><blockquote><p>将静态的资源放到反向代理服务器,节省用户的访问时间</p></blockquote><h3 id="5-Web服务器"><a href="#5-Web服务器" class="headerlink" title="5. Web服务器"></a>5. Web服务器</h3><ul><li>web应用服务器，如：<ul><li>tomcat </li><li>resin</li><li>jetty</li></ul></li><li>web服务器，如：<ul><li>Apache 服务器 </li><li>Nginx</li><li>IIS</li></ul></li></ul><blockquote><p>区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。</p></blockquote><blockquote><p>并发：web服务器的并发能力远高于web应用服务器。</p></blockquote><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="1-安装nginx的依赖库"><a href="#1-安装nginx的依赖库" class="headerlink" title="1. 安装nginx的依赖库"></a>1. 安装nginx的依赖库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><h3 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="2. 解压安装包"></a>2. 解压安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf nginx-1.10.0.tar.gz<br></code></pre></td></tr></table></figure><h3 id="3-配置nginx安装包"><a href="#3-配置nginx安装包" class="headerlink" title="3. 配置nginx安装包"></a>3. 配置nginx安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd nginx-1.10.0<br><br>./configure --prefix=/usr/local/nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash"> ./configure配置nginx安装到/usr/java/nginx目录下</span><br></code></pre></td></tr></table></figure><h3 id="4-编译并安装"><a href="#4-编译并安装" class="headerlink" title="4. 编译并安装"></a>4. 编译并安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>编译报错1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">src/core/ngx_murmurhash.c: 在函数‘ngx_murmur_hash2’中:<br>src/core/ngx_murmurhash.c:37:11: 错误：``this` `statement may fall through [-Werror=implicit-fallthrough=]<br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入到nginx-1.10.0目录下(解压目录)</span><br>vim objs/Makefile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">找到数据，del去掉-Werror</span><br>CFLAGS = -pipe -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g　<br></code></pre></td></tr></table></figure><p>编译报错2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">src/os/unix/ngx_user.c: In function ‘ngx_libc_crypt’:<br>src/os/unix/ngx_user.c:36:7: error: ‘struct crypt_data’ has no member named ‘current_salt’<br>cd.current_salt[0] = ~salt[0];<br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim src/os/unix/ngx_user.c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">用/* */注释掉此行</span><br>cd.current_salt[0] = ~salt[0];<br></code></pre></td></tr></table></figure><h3 id="5-Nginx的启动及关闭"><a href="#5-Nginx的启动及关闭" class="headerlink" title="5. Nginx的启动及关闭"></a>5. Nginx的启动及关闭</h3><p>进入nginx目录下有一个sbin目录，sbin目录下有一个nginx可执行程序，启动即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>./nginx<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭</span><br>./nginx -s stop<br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以不关闭nginx的情况下更新配置文件</span><br>./nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="6-Nginx-conf-配置文件介绍"><a href="#6-Nginx-conf-配置文件介绍" class="headerlink" title="6. Nginx.conf 配置文件介绍"></a>6. Nginx.conf 配置文件介绍</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">user  nobody;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">工作进程</span><br>worker_processes  1;<br><br>events &#123;<br>    #连接池连接数<br>    worker_connections  1024;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">请求方式</span><br>http &#123;<br>    #媒体类型<br>    include       mime.types;<br>    #默认媒体类型 二进制<br>    default_type  application/octet-stream;<br>    #上传文件<br>    sendfile        on;<br>    #超时时间<br>    keepalive_timeout  65;<br><br>    #gzip  on;<br>    #服务器配置<br>server &#123;<br>        #监听端口<br>        listen       80;<br>        #监听域名<br>        server_name  localhost;<br>        #请求头信息<br>        proxy_set_header X-Forwarded-Host $host;<br>        proxy_set_header X-Forwarded-Server $host;<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        #请求映射规则，/代表所有请求路径<br>        location / &#123;<br>             #请求转发地址<br>             #root html;<br> proxy_pass http://manage.powershop.com:8080;<br>             #欢迎页<br>             #index  index.html index.htm;<br>             #转发连接超时时间<br>proxy_connect_timeout 600;<br>             #转发读取超时时间<br>proxy_read_timeout 600;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h2><h3 id="1-安装tomcat修改端口"><a href="#1-安装tomcat修改端口" class="headerlink" title="1. 安装tomcat修改端口"></a>1. 安装tomcat修改端口</h3><p>先到安装目录(或者解压目录)下找到conf文件夹，在里面找到server.xml的文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在一台计算机上配置2个tomcat，关键是tomcat里的server.xml文件中三个端口必须不同。需要修改conf/server.xml --&gt;</span><br><span class="hljs-comment">&lt;!-- 第1⃣️处 port--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8090&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 第2⃣️处 port--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8009&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;AJP/1.3&quot;</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 第3⃣️处 port--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Server</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8005&quot;</span> <span class="hljs-attr">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-修改nginx-x2F-conf-x2F-nginx-conf文件"><a href="#2-修改nginx-x2F-conf-x2F-nginx-conf文件" class="headerlink" title="2. 修改nginx&#x2F;conf&#x2F;nginx.conf文件"></a>2. 修改nginx&#x2F;conf&#x2F;nginx.conf文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">server&#123;<br>    listen 80;<br>    server_name localhost;<br>    #location代表映射规则，/代表任意url<br>    location / &#123;<br>        proxy_pass http://127.0.0.1:8080; <br>        # 代理通道只写ip和port，因为url会拼接到ip和port<br>        proxy_connect_timeout 600;<br>proxy_read_timeout 600;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>location映射配置<code>proxy_pass</code>变量</p><h2 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h2><h3 id="1-配置两台以上tomcat"><a href="#1-配置两台以上tomcat" class="headerlink" title="1. 配置两台以上tomcat"></a>1. 配置两台以上tomcat</h3><h3 id="2-修改nginx-x2F-conf-x2F-nginx-conf文件-1"><a href="#2-修改nginx-x2F-conf-x2F-nginx-conf文件-1" class="headerlink" title="2. 修改nginx&#x2F;conf&#x2F;nginx.conf文件"></a>2. 修改nginx&#x2F;conf&#x2F;nginx.conf文件</h3><ul><li><p>在http节点上添加一个upstream</p></li><li><p>修改location &#x2F;下的反向代理</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream myTomcats&#123;<br>       server 127.0.0.1:8080;<br>       server 127.0.0.1:8090;<br>   &#125;<br>   server&#123;<br>       listen 80;<br>       server_name localhost;<br><br>       location / &#123;<br>           proxy_pass http://myTomcats;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><table><thead><tr><th>负载均衡策略</th><th>说明</th></tr></thead><tbody><tr><td>轮询</td><td>默认</td></tr><tr><td>weight 加权轮询</td><td>权重方式</td></tr><tr><td>ip_hash</td><td>依据ip分配方式</td></tr><tr><td>least_conn</td><td>按连接数</td></tr><tr><td>fair （第三方）</td><td>按响应时间</td></tr><tr><td>url_hash</td><td>依据URL分配</td></tr></tbody></table><h5 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream bck_testing_01 &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">默认所有服务器权重为 1</span><br>  server 192.168.250.220:8080<br>  server 192.168.250.221:8080<br>  server 192.168.250.222:8080<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="weight-加权轮询"><a href="#weight-加权轮询" class="headerlink" title="weight 加权轮询"></a>weight 加权轮询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream bck_testing_01 &#123;<br>  server 192.168.250.220:8080   weight=3<br>  server 192.168.250.221:8080              # default weight=1<br>  server 192.168.250.222:8080              # default weight=1<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn"></a>least_conn</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream bck_testing_01 &#123;<br>  least_conn;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">with default weight <span class="hljs-keyword">for</span> all (weight=1)</span><br>  server 192.168.250.220:8080<br>  server 192.168.250.221:8080<br>  server 192.168.250.222:8080<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream bck_testing_01 &#123;<br><br>  ip_hash;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">with default weight <span class="hljs-keyword">for</span> all (weight=1)</span><br>  server 192.168.250.220:8080<br>  server 192.168.250.221:8080<br>  server 192.168.250.222:8080<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream bck_testing_01 &#123;<br><br>  hash $request_uri;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">with default weight <span class="hljs-keyword">for</span> all (weight=1)</span><br>  server 192.168.250.220:8080<br>  server 192.168.250.221:8080<br>  server 192.168.250.222:8080<br><br>&#125;<br></code></pre></td></tr></table></figure><p>具体请参考：<a href="https://www.cnblogs.com/jayjiang/p/12714000.html">Nginx知多少系列之(七)负载均衡策略</a></p><p><a href="https://github.com/dunwu/nginx-tutorial#%E8%BD%AE%E8%AF%A2">Nginx 极简教程</a></p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><h3 id="1-创建静态资源"><a href="#1-创建静态资源" class="headerlink" title="1. 创建静态资源"></a>1. 创建静态资源</h3><p>在服务器上创建静态资源路径放置img</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /usr/upload/images<br></code></pre></td></tr></table></figure><h3 id="2-配置nginx-conf"><a href="#2-配置nginx-conf" class="headerlink" title="2. 配置nginx.conf"></a>2. 配置nginx.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">server&#123;<br>        listen 80;<br>        server_name localhost;<br><br>        location ~* \.(gif|jpg|png|jpeg)$ &#123;<br>            root /usr/upload/images;<br>            #root：转发到目录里<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>访问测试地址<code>http://10.211.55.7/11.jpg</code>返回静态资源图片</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven依赖爆红Dependency not found 问题</title>
    <link href="/2022/10/15/Maven%E4%BE%9D%E8%B5%96%E7%88%86%E7%BA%A2%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/10/15/Maven%E4%BE%9D%E8%B5%96%E7%88%86%E7%BA%A2%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Maven依赖倒入后pom文件IDEA提示错误：dependency not found</p><h2 id="原因-amp-解决"><a href="#原因-amp-解决" class="headerlink" title="原因&amp;解决"></a>原因&amp;解决</h2><h3 id="1-IDEA中Maven配置"><a href="#1-IDEA中Maven配置" class="headerlink" title="1. IDEA中Maven配置"></a>1. IDEA中Maven配置</h3><p>原因：项目中Maven的路径&amp;xml文件&amp;仓库路径配置变更；由于copy其他项目，默认路径未修正；由于文件配置存在多个导致配置异常等</p><p>解决： 重新配置</p><h3 id="2-本地仓库依赖不错在持续爆红"><a href="#2-本地仓库依赖不错在持续爆红" class="headerlink" title="2. 本地仓库依赖不错在持续爆红"></a>2. 本地仓库依赖不错在持续爆红</h3><p>原因：</p><ul><li>pom坐标错误</li><li>网络环境异常</li></ul><p>解决</p><ul><li>搜索当前依赖pom坐标 <a href="https://mvnrepository.com/">查询链接</a></li><li>项目依赖提示多个坐标错误，通过以上配置刷新后某个依赖仍旧爆红；IDEA提示<code>dependency not found</code>刷新多次无效<ul><li>尝试直接从Maven远程仓库下载手工部署到本地仓库，注意路径，不推荐</li><li>新建空白Maven项目，导入坐标刷新下载，爆红问题解决</li></ul></li></ul><p>😷遇到问题沉着冷静，认真阅读，方可豁然！！</p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql异常错误处理-Establishing SSL connection without server&#39;s identity verification is not recommended.</title>
    <link href="/2022/10/15/Mysql%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF1/"/>
    <url>/2022/10/15/Mysql%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF1/</url>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL&#x3D;false, or set useSSL&#x3D;true and provide truststore for server certificate verification.</p><p>翻译：</p><p>不建议在没有服务器身份验证的情况下建立 SSL 连接。 根据 MySQL 5.5.45+、5.6.26+ 和 5.7.6+ 的要求，如果未设置显式选项，则默认情况下必须建立 SSL 连接。 为了符合不使用 SSL 的现有应用程序，verifyServerCertificate 属性设置为“false”。 您需要通过设置 useSSL&#x3D;false 来显式禁用 SSL，或者设置 useSSL&#x3D;true 并为服务器证书验证提供信任库。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>MySQL在高版本需要指明是否进行SSL连接</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在mysql连接字符串url中加入ssl&#x3D;true或者false即可</p><p>url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;framework?characterEncoding&#x3D;utf8<code>&amp;useSSL=false</code></p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>由于使用阿里云服务器，导致雪崩引发问题<code>MySql Host is blocked because of many connection errors; unblock with &#39;mysqladmin flush-hosts&#39;</code></p><p>原因：同一个ip在短时间内产生太多（超过mysql数据库max_connection_errors的最大值）中断的数据库连接而导致的阻塞；</p><p>解决：</p><p>1、提高允许的max_connection_errors数量（治标不治本）：</p><p>　　① 进入Mysql数据库查看max_connection_errors： <strong>show variables like ‘%max_connection_errors%’;</strong></p><p>　  ② 修改max_connection_errors的数量为1000： <strong>set global max_connect_errors &#x3D; 1000;</strong></p><p>　　③ 查看是否修改成功：<strong>show variables like ‘%max_connection_errors%’;</strong></p><p>2、使用<strong>mysqladmin flush-hosts</strong> 命令清理一下hosts文件（不知道mysqladmin在哪个目录下可以使用命令查找：<strong>whereis mysqladmin</strong>）；</p><p>　　① 在查找到的目录下使用命令修改：&#x2F;usr&#x2F;bin&#x2F;<strong>mysqladmin flush-hosts -h192.168.1.1</strong> -P3308 <strong>-uroot</strong> -prootpwd;</p><p>　　备注：</p><p>　　　　其中端口号，用户名，密码都可以根据需要来添加和修改；</p><p>　　　　配置有master&#x2F;slave主从数据库的要把主库和从库都修改一遍的（我就吃了这个亏明明很容易的几条命令结果折腾了大半天）；</p><p>　　　　第二步也可以在数据库中进行，命令如下：<strong>flush hosts;</strong></p><p><strong>参考黄聪博客园博客，原文链接：<a href="http://www.cnblogs.com/huangcong/p/5072915.html">http://www.cnblogs.com/huangcong/p/5072915.html</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS iTerm2 无法使用rz异常</title>
    <link href="/2022/10/15/MacOS%20iTerm2%20%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8rz%E5%BC%82%E5%B8%B8%20/"/>
    <url>/2022/10/15/MacOS%20iTerm2%20%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8rz%E5%BC%82%E5%B8%B8%20/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>运行rz会报类似错：rz会出现?z waiting to receive.**B0100000023be50</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>Mac OS未安装lrzsz</li><li>mac上的终端不支持rz和sz，需要在iterm2配置一下</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="1-Mac安装rz"><a href="#1-Mac安装rz" class="headerlink" title="1. Mac安装rz"></a>1. Mac安装rz</h3><p>注意：需要提前安装brew，此处不在赘述</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install lrzsz<br></code></pre></td></tr></table></figure><h3 id="2-配置iTerm2-sh脚本"><a href="#2-配置iTerm2-sh脚本" class="headerlink" title="2. 配置iTerm2 sh脚本"></a>2. 配置iTerm2 sh脚本</h3><h4 id="2-1-在Mac目录-x2F-usr-x2F-local-x2F-bin下安装两个脚本"><a href="#2-1-在Mac目录-x2F-usr-x2F-local-x2F-bin下安装两个脚本" class="headerlink" title="2.1 在Mac目录&#x2F;usr&#x2F;local&#x2F;bin下安装两个脚本"></a>2.1 在Mac目录&#x2F;usr&#x2F;local&#x2F;bin下安装两个脚本</h4><p>官方提供<a href="https://github.com/Keystion/iterm2-zmodem">脚本</a></p><ul><li>iterm2-send-zmodem.sh</li><li>iterm2-recv-zmodem.sh</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo wget https://raw.github.com/Keystion/iterm2-zmodem/master/iterm2-send-zmodem.sh<br>sudo wget https://raw.github.com/Keystion/iterm2-zmodem/master/iterm2-recv-zmodem.sh<br>sudo <span class="hljs-built_in">chmod</span> 777 /usr/local/bin/iterm2-*<br></code></pre></td></tr></table></figure><p>注意网络影响</p><h4 id="2-2-iTerm2配置"><a href="#2-2-iTerm2配置" class="headerlink" title="2.2 iTerm2配置"></a>2.2 iTerm2配置</h4><p>在iTerm2中配置选项</p><p>点击preferences → profiles，选择某个profile，如Default，之后继续选择advanced → triggers，添加编辑添加如下triggers</p><p>需要添加两个内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">triggers1：</span><br>Regular expression: /*/*B0100<br>Action: Run Silent Coprocess<br>Parameters:/usr/local/bin/iterm2-send-zmodem.sh<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">triggers2：</span><br>Regular expression: /*/*B00000000000000<br>Action: Run Silent Coprocess<br>Parameters:/usr/local/bin/iterm2-recv-zmodem.sh<br></code></pre></td></tr></table></figure><p>配置完成最好重启一下Mac💻</p><p>参考：<a href="https://webclown.net/2020/06/19/macOS-iTerm2%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8rz%E5%B9%B6%E6%8F%90%E7%A4%BAwaiting-to-receive%E3%80%90%E8%BD%AC%E3%80%91/">macOS iTerm2无法使用rz并提示waiting-to-receive. **B0100000023be50. _</a></p><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>iTerm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Feign声明式服务</title>
    <link href="/2022/10/13/Feign%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/10/13/Feign%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>当我们通过RestTemplate调用其它服务的API时，所需要的参数须在请求的URL中进行拼接，如果参数少的话或许我们还可以忍受，一旦有多个参数的话，这时拼接请求字符串就会效率低下</p><p>那么有没有更好的解决方案呢？答案是确定的有，Netflix已经为我们提供了一个框架：Feign。</p><h2 id="二、Fegin简介"><a href="#二、Fegin简介" class="headerlink" title="二、Fegin简介"></a>二、Fegin简介</h2><p><a href="https://github.com/Netflix/feign">Feign</a>是一个声明式 Web 服务客户端。它使编写 Web 服务客户端更容易。要使用 Feign，只需要创建一个接口并添加<code>@FeignClient</code>注解即可。它具有可插入的注释支持，包括 Feign 注释和 JAX-RS 注释。</p><p>Feign 还支持可插拔的编码器和解码器。</p><p>Spring Cloud 添加了对 Spring MVC 注释的支持，并支持使用<code>HttpMessageConverters</code>Spring Web 中默认使用的注释。</p><p>Spring Cloud 集成 Ribbon 和 Feign，在使用 Feign 时提供负载均衡的 http 客户端。</p><h2 id="三、Fegin入门案例"><a href="#三、Fegin入门案例" class="headerlink" title="三、Fegin入门案例"></a>三、Fegin入门案例</h2><h3 id="1-创建feign-provider"><a href="#1-创建feign-provider" class="headerlink" title="1. 创建feign_provider"></a>1. 创建feign_provider</h3><h4 id="1-1-controller"><a href="#1-1-controller" class="headerlink" title="1.1 controller"></a>1.1 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> com.example.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.getUserById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-service"><a href="#1-2-service" class="headerlink" title="1.2 service"></a>1.2 service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id,<span class="hljs-string">&quot;admin-1&quot;</span>,<span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-SpringBootApp"><a href="#1-3-SpringBootApp" class="headerlink" title="1.3 SpringBootApp"></a>1.3 SpringBootApp</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignProviderApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(FeignProviderApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-application-yml"><a href="#1-4-application-yml" class="headerlink" title="1.4 application.yml"></a>1.4 application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">47.98</span><span class="hljs-number">.105</span><span class="hljs-number">.36</span><span class="hljs-string">:8848</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">feign-provider</span><br></code></pre></td></tr></table></figure><h3 id="2-创建feign-interface"><a href="#2-创建feign-interface" class="headerlink" title="2. 创建feign_interface"></a>2. 创建feign_interface</h3><h4 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JDK动态代理</p><h4 id="2-2-UserFeign"><a href="#2-2-UserFeign" class="headerlink" title="2.2 UserFeign"></a>2.2 UserFeign</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@FeignClient(&quot;feign-provider&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeign</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;<span class="hljs-comment">//必须增加(&quot;id&quot;)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>在 @FeignClient 注解中，value 属性的取值为：服务提供者的服务名，即服务提供者配置文件application.yml中 spring.application.name 的取值</li><li>接口中定义的每个方法都与服务提供者中 Controller 定义的服务方法对应（类似mapper与xml）</li></ul><h3 id="3-创建feign-consumer"><a href="#3-创建feign-consumer" class="headerlink" title="3. 创建feign_consumer"></a>3. 创建feign_consumer</h3><h4 id="3-1-controller"><a href="#3-1-controller" class="headerlink" title="3.1 controller"></a>3.1 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> com.example.fegin.UserFeign;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.ServiceInstance;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserFeign userFeign;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(userFeign.getClass());<br>        <span class="hljs-keyword">return</span> userFeign.getUserById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-SpringBootApp"><a href="#3-2-SpringBootApp" class="headerlink" title="3.2 SpringBootApp"></a>3.2 SpringBootApp</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// 开启feign</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignConsumerApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(FeignConsumerApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@EnableFeignClients </code>注解开启Feign扫描，先调用FeignClientsRegistrar.registerFeignClients()方法扫描@FeignClient注解的接口，再将这些接口注入到Spring IOC容器中，方便后续被调用。</p><h4 id="3-3-application-yml"><a href="#3-3-application-yml" class="headerlink" title="3.3 application.yml"></a>3.3 application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">47.98</span><span class="hljs-number">.105</span><span class="hljs-number">.36</span><span class="hljs-string">:8848</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ribbon-consumer</span><br></code></pre></td></tr></table></figure><h2 id="四、OpenFeign"><a href="#四、OpenFeign" class="headerlink" title="四、OpenFeign"></a>四、OpenFeign</h2><p>OpenFeign 全称 Spring Cloud OpenFeign，它是 Spring 官方推出的一种声明式服务调用与负载均衡组件，它的出现就是为了替代进入停更维护状态的 Feign。</p><p>OpenFeign 是 Spring Cloud 对 Feign 的二次封装，它具有 Feign 的所有功能，并在 Feign 的基础上增加了对 Spring MVC 注解的支持，例如 @RequestMapping、@GetMapping 和 @PostMapping 等。</p><p>OpenFeign 常用注解：</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@FeignClient</td><td>该注解用于通知 OpenFeign 组件对 @RequestMapping 注解下的接口进行解析，并通过动态代理的方式产生实现类，实现负载均衡和服务调用。</td></tr><tr><td>@EnableFeignClients</td><td>该注解用于开启 OpenFeign 功能，当 Spring Cloud 应用启动时，OpenFeign 会扫描标有 @FeignClient 注解的接口，生成代理并注册到 Spring 容器中。</td></tr></tbody></table><h2 id="五、Feign原理"><a href="#五、Feign原理" class="headerlink" title="五、Feign原理"></a>五、Feign原理</h2><h3 id="1-扫描Feign接口并注入到Spring容器"><a href="#1-扫描Feign接口并注入到Spring容器" class="headerlink" title="1. 扫描Feign接口并注入到Spring容器"></a>1. 扫描Feign接口并注入到Spring容器</h3><p><code>@EnableFeignClients</code>开启Feign接口扫描，调用FeignClientsRegistrar.registerFeignClients()方法扫描含有<code>@FeignClient</code>注解的接口，在这些接口调用时生成<code>代理类</code>注入到Spring IOC容器中，方便后续被调用。</p><h3 id="2-RequestTemplate封装请求信息"><a href="#2-RequestTemplate封装请求信息" class="headerlink" title="2. RequestTemplate封装请求信息"></a>2. RequestTemplate封装请求信息</h3><p>当Controller调用Feign代理类时，通过JDK的代理方式为Feign接口生成的一个动态代理类，代理类调用<code>SynchronousMethodHandler.invoke()</code>创建一个RequestTemplate对象，该对象封装了HTTP请求需要的全部信息，如请url、参数，请求方式等信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object[] argv)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">//创建一个RequestTemplate</span><br>    <span class="hljs-type">RequestTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.buildTemplateFromArgs.create(argv);<br>    <span class="hljs-type">Retryer</span> <span class="hljs-variable">retryer</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.retryer.clone();<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//发出请求</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.executeAndDecode(template);<br>        &#125; <span class="hljs-keyword">catch</span> (RetryableException var8) &#123;<br>            ... ... ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-发起请求"><a href="#3-发起请求" class="headerlink" title="3. 发起请求"></a>3. 发起请求</h3><p><code>SynchronousMethodHandler.executeAndDecode()</code>通过RequestTemplate生成Request，然后把Request交给Client去处理，Client可以是JDK原生的URLConnection，Apache的HttpClient，也可以时OKhttp，最后Client结合Ribbon负载均衡发起服务调用请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Object <span class="hljs-title function_">executeAndDecode</span><span class="hljs-params">(RequestTemplate template)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>       <span class="hljs-comment">//生成请求对象</span><br>       <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.targetRequest(template);<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logLevel != Level.NONE) &#123;<br>           <span class="hljs-built_in">this</span>.logger.logRequest(<span class="hljs-built_in">this</span>.metadata.configKey(), <span class="hljs-built_in">this</span>.logLevel, request);<br>       &#125;<br><br>       <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.nanoTime();<br><br>       Response response;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//发起请求</span><br>           response = <span class="hljs-built_in">this</span>.client.execute(request, <span class="hljs-built_in">this</span>.options);<br>       &#125; <span class="hljs-keyword">catch</span> (IOException var15) &#123;<br>           ... ... ...<br><br>           <span class="hljs-keyword">throw</span> FeignException.errorExecuting(request, var15);<br>       &#125;<br>&#125;       <br></code></pre></td></tr></table></figure><h2 id="六、Fegin接口三种传参方式"><a href="#六、Fegin接口三种传参方式" class="headerlink" title="六、Fegin接口三种传参方式"></a>六、Fegin接口三种传参方式</h2><ul><li>当参数比较复杂时，Feign即使声明为get请求也会强行使用post请求</li><li>不支持@GetMapping类似注解声明请求，需使用@RequestMapping(value &#x3D; “url”,method &#x3D; RequestMethod.GET)</li></ul><h3 id="1-？拼接方式传参"><a href="#1-？拼接方式传参" class="headerlink" title="1. ？拼接方式传参"></a>1. ？拼接方式传参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* feign_provider</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/delUserById&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">delUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.delUserById(id);<br>    &#125;  <br>    <span class="hljs-comment">// 数组形式</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/delUserByIdS&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer[] deletedIds(Integer[] ids)&#123;<br>        <span class="hljs-keyword">return</span> userService.delUserByIds(ids);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* feign_consumer</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserFeign userFeign;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/delUserById&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">delUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userFeign.delUserById(id);<br>    &#125;<br>    <br>   <span class="hljs-comment">// 数组</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/delUserByIdS&quot;)</span><br>    <span class="hljs-keyword">public</span> Integer[] delUserByIdS(Integer[] ids)&#123;<br>        <span class="hljs-keyword">return</span> userFeign.delUserByIds(ids);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* UserFeign 接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@FeignClient(&quot;feign-provider&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeign</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 参数处 <span class="hljs-doctag">@RequestParam</span>(&quot;id&quot;)</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/delUserById&quot;)</span><br>    User <span class="hljs-title function_">delUserById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>;<br>    <span class="hljs-comment">// RequestParam(&quot;id&quot;) 作用 拼接参数-&gt;  http://127.0.0.1/consumer/delUserById?id=18</span><br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/delUserByIdS&quot;)</span><br>    Integer[] delUserByIds(<span class="hljs-meta">@RequestParam(&quot;ids&quot;)</span>  Integer[] ids);<br>    <span class="hljs-comment">//@RequestParam(&quot;ids&quot;) 作用 拼接参数-&gt; http://127.0.0.1/consumer/delUserByIdS?ids=1&amp;ids=2</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>接口注意使用<code>@RequestParam(&quot;value&quot;)</code>接收拼接参数</p><h3 id="2-RESTful方式传参"><a href="#2-RESTful方式传参" class="headerlink" title="2. RESTful方式传参"></a>2. RESTful方式传参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* feign_provider</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>   <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.getUserById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* feign_consumer</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserFeign userFeign;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(userFeign.getClass());<br>        <span class="hljs-keyword">return</span> userFeign.getUserById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* UserFeign 接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@FeignClient(&quot;feign-provider&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeign</span> &#123;<br>    <span class="hljs-comment">// 参数拼接@PathVariable(&quot;id&quot;) </span><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;<br>    <span class="hljs-comment">// @PathVariable(&quot;id&quot;) 作用 拼接参数-&gt; http://127.0.0.1/consumer/getUserById/1</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>接口注意使用<code> @PathVariable(&quot;value&quot;)</code>接收拼接参数</p><h3 id="3-POJO传参方式"><a href="#3-POJO传参方式" class="headerlink" title="3. POJO传参方式"></a>3. POJO传参方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* feign_provider</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <br>   <span class="hljs-meta">@RequestMapping(&quot;/addUser&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.addUser(user);<br>    &#125;<br>    <span class="hljs-comment">// 集合POJO</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/addUsers&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">addUsers</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; userList)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.addUsers(userList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* feign_consumer</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserFeign userFeign;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/addUser&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userFeign.addUser(user);<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/addUsers&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-number">18</span>));<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;user2&quot;</span>,<span class="hljs-number">18</span>));<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;user3&quot;</span>,<span class="hljs-number">18</span>));<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;user4&quot;</span>,<span class="hljs-number">18</span>));<br>        <span class="hljs-keyword">return</span> userFeign.addUsers(userList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* UserFeign 接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@FeignClient(&quot;feign-provider&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeign</span> &#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/addUser&quot;)</span><br>    User <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>;<br>    <span class="hljs-comment">// @RequestBody  作用 拼接参数-&gt; http://127.0.0.1/consumer/addUser</span><br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/addUsers&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">addUsers</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; userList)</span>;<br>    <span class="hljs-comment">// @RequestBody 作用 拼接参数-&gt;  http://127.0.0.1/consumer/addUsers</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接口注意使用<code> @RequestBody</code>接收拼接参数</p><h2 id="七、Feign优化"><a href="#七、Feign优化" class="headerlink" title="七、Feign优化"></a>七、Feign优化</h2><h3 id="1-Feign日志开启"><a href="#1-Feign日志开启" class="headerlink" title="1. Feign日志开启"></a>1. Feign日志开启</h3><p>一个顶呱呱的框架怎么能没有日志？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging.level.project.user.UserClient:</span> <span class="hljs-string">DEBUG</span><br><br></code></pre></td></tr></table></figure><h4 id="1-1-Feign-日志级别"><a href="#1-1-Feign-日志级别" class="headerlink" title="1.1 Feign 日志级别"></a>1.1 Feign 日志级别</h4><ul><li><p><code>NONE</code>  不记录日志，Feign默认配置</p></li><li><p><code>BASIC</code> 只记录请求方法和 URL 以及响应状态码和执行时间。</p></li><li><p><code>HEADERS</code> 记录基本信息以及请求和响应标头。</p></li><li><p><code>FULL</code> 记录请求和响应的标头、正文和元数据；级别最高</p></li></ul><h3 id="1-2-Feign开启配置"><a href="#1-2-Feign开启配置" class="headerlink" title="1.2 Feign开启配置"></a>1.2 Feign开启配置</h3><ol><li><p>Java配置Bean方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FooConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    Logger.Level <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>yaml方式配置（推荐）</p><p>feign_consumer中的application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment">#设置default(推荐)或者是服务注册名</span><br>        <span class="hljs-attr">logger-level:</span> <span class="hljs-string">full</span> <span class="hljs-comment">#同时需要设置日志输出级别</span><br><span class="hljs-comment"># 同时需要开启log4j日志级别</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.bjpowernode.fegin:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="1-3-控制台日志输出"><a href="#1-3-控制台日志输出" class="headerlink" title="1.3 控制台日志输出"></a>1.3 控制台日志输出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">2022-10-13 16:23:09.873 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] ---&gt; GET http://feign-provider/provider/getUserById/2 HTTP/1.1<br>2022-10-13 16:23:09.873 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] Accept-Encoding: gzip<br>2022-10-13 16:23:09.873 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] Accept-Encoding: deflate<br>2022-10-13 16:23:09.873 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] ---&gt; END HTTP (0-byte body)<br>2022-10-13 16:23:09.963  INFO 19580 --- [p-nio-80-exec-1] c.netflix.config.ChainedDynamicProperty  : Flipping property: feign-provider.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647<br>2022-10-13 16:23:09.984  INFO 19580 --- [p-nio-80-exec-1] c.netflix.loadbalancer.BaseLoadBalancer  : Client: feign-provider instantiated a LoadBalancer: DynamicServerListLoadBalancer:&#123;NFLoadBalancer:name=feign-provider,current list of Servers=[],Load balancer stats=Zone stats: &#123;&#125;,Server stats: []&#125;ServerList:null<br>2022-10-13 16:23:09.988  INFO 19580 --- [p-nio-80-exec-1] c.n.l.DynamicServerListLoadBalancer      : Using serverListUpdater PollingServerListUpdater<br>2022-10-13 16:23:10.043  INFO 19580 --- [p-nio-80-exec-1] c.netflix.config.ChainedDynamicProperty  : Flipping property: feign-provider.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647<br>2022-10-13 16:23:10.044  INFO 19580 --- [p-nio-80-exec-1] c.n.l.DynamicServerListLoadBalancer      : DynamicServerListLoadBalancer for client feign-provider initialized: DynamicServerListLoadBalancer:&#123;NFLoadBalancer:name=feign-provider,current list of Servers=[192.168.168.1:8090],Load balancer stats=Zone stats: &#123;unknown=[Zone:unknown;Instance count:1;Active connections count: 0;Circuit breaker tripped count: 0;Active connections per server: 0.0;]<br>&#125;,Server stats: [[Server:192.168.168.1:8090;Zone:UNKNOWN;Total Requests:0;Successive connection failure:0;Total blackout seconds:0;Last connection made:Thu Jan 01 08:00:00 CST 1970;First connection made: Thu Jan 01 08:00:00 CST 1970;Active Connections:0;total failure count in last (1000) msecs:0;average resp time:0.0;90 percentile resp time:0.0;95 percentile resp time:0.0;min resp time:0.0;max resp time:0.0;stddev resp time:0.0]<br>]&#125;ServerList:com.alibaba.cloud.nacos.ribbon.NacosServerList@3352a852<br>2022-10-13 16:23:10.991  INFO 19580 --- [erListUpdater-0] c.netflix.config.ChainedDynamicProperty  : Flipping property: feign-provider.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647<br>2022-10-13 16:23:12.148 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] &lt;--- HTTP/1.1 200  (2273ms)<br>2022-10-13 16:23:12.148 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] connection: keep-alive<br>2022-10-13 16:23:12.148 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] content-type: application/json<br>2022-10-13 16:23:12.148 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] date: Thu, 13 Oct 2022 08:23:12 GMT<br>2022-10-13 16:23:12.148 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] keep-alive: timeout=60<br>2022-10-13 16:23:12.148 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] transfer-encoding: chunked<br>2022-10-13 16:23:12.148 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] <br>2022-10-13 16:23:12.149 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] &#123;&quot;id&quot;:2,&quot;name&quot;:&quot;admin-1&quot;,&quot;age&quot;:18&#125;<br>2022-10-13 16:23:12.149 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign          : [UserFeign#getUserById] &lt;--- END HTTP (34-byte body)<br></code></pre></td></tr></table></figure><h3 id="2-GZIP压缩"><a href="#2-GZIP压缩" class="headerlink" title="2. GZIP压缩"></a>2. GZIP压缩</h3><p class="note note-primary">HTTP 协议中的数据压缩</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Compression">数据压缩</a>是提高 Web 站点性能的一种重要手段。对于有些文件来说，高达 70% 的压缩比率可以大大减低对于带宽的需求。随着时间的推移，压缩算法的效率也越来越高，同时也有新的压缩算法被发明出来，应用在客户端与服务器端。</p><p>在实际应用时，web 开发者不需要亲手实现压缩机制，浏览器及服务器都已经将其实现了，不过他们需要确保在服务器端进行了合理的配置。数据压缩会在三个不同的层面发挥作用：</p><ul><li>首先某些格式的文件会采用特定的优化算法进行压缩，（GZIP压缩算法<a href="https://blog.csdn.net/qq_42139383/article/details/115064562?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166565721916781432959945%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166565721916781432959945&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-115064562-null-null.142%5Ev56%5Epc_rank_34_queryrelevant25,201%5Ev3%5Econtrol&utm_term=deflate&spm=1018.2226.3001.4187">deflate</a>）</li><li>其次在 HTTP 协议层面会进行通用数据加密，即数据资源会以压缩的形式进行端到端传输，</li><li>最后数据压缩还会发生在网络连接层面，即发生在 HTTP 连接的两个节点之间。</li></ul><p class="note note-primary">Feign GZIP压缩配置</p><p>feign_consumer中的application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">compression:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启浏览器到consumer层的gzip压缩</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">compression:</span><br>    <span class="hljs-attr">request:</span><span class="hljs-comment"># 请求开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign到provide层gzip压缩</span><br>    <span class="hljs-attr">response:</span><span class="hljs-comment"># 响应开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p class="note note-primary">Feign GZIP压缩验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">2022-10-13 16:23:09.873 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign: [UserFeign#getUserById] Accept-Encoding: gzip<br>2022-10-13 16:23:09.873 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign: [UserFeign#getUserById] Accept-Encoding: deflate<br>2022-10-13 16:23:09.873 DEBUG 19580 --- [p-nio-80-exec-1] com.bjpowernode.fegin.UserFeign: [UserFeign#getUserById] ---&gt; END HTTP (0-byte body)<br></code></pre></td></tr></table></figure><h3 id="3-HTTP池连接开启"><a href="#3-HTTP池连接开启" class="headerlink" title="3. HTTP池连接开启"></a>3. HTTP池连接开启</h3><p>HTTP连接需要的 3 次握手 4 次分手开销大，Feign 在默认情况下使用的是 JDK 原生的 URLConnection 发送HTTP请求，并不支持连接池；因为优化方案选择<a href="https://hc.apache.org/httpcomponents-client-5.2.x/index.html">Apache HttpClient</a> </p><ul><li>灵活的连接管理和池化。</li><li>支持 HTTP 响应缓存。</li></ul><p>feign_consumer pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>HTTPClient在Feign中默认开启并且配置默认参数，故只需引入依赖即可</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221013185707720.png"></p><h3 id="4-Feign超时处理"><a href="#4-Feign超时处理" class="headerlink" title="4. Feign超时处理"></a>4. Feign超时处理</h3><h4 id="1-模拟超时"><a href="#1-模拟超时" class="headerlink" title="1. 模拟超时"></a>1. 模拟超时</h4><p>修改feign_provider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br>            <span class="hljs-comment">//模拟网络延迟</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id,<span class="hljs-string">&quot;admin-1&quot;</span>,<span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ERROR 20032 --- [p-nio-80-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is feign.RetryableException: Read timed out executing GET http://feign-provider/provider/getUserById/11111] with root cause<br><br>java.net.SocketTimeoutException: Read timed out<br></code></pre></td></tr></table></figure><h4 id="3-设置Feign超时处理"><a href="#3-设置Feign超时处理" class="headerlink" title="3.设置Feign超时处理"></a>3.设置Feign超时处理</h4><h5 id="方式一：Feign超时处理（推荐）"><a href="#方式一：Feign超时处理（推荐）" class="headerlink" title="方式一：Feign超时处理（推荐）"></a>方式一：Feign超时处理（推荐）</h5><p>在feign_consumer的application.yml中加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment">#设置default 或者是服务注册名</span><br>        <span class="hljs-attr">connect-timeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 请求链接超时时间；防止由于服务器处理时间长而阻塞调用者。</span><br>        <span class="hljs-attr">read-timeout:</span> <span class="hljs-number">5000</span>   <span class="hljs-comment">#请求处理超时时间；从连接建立时开始应用，在返回响应时间过长时触发。</span><br></code></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/#timeout-handling">Feign Timeout Handling参考</a></p><h5 id="方式二：Ribbon中超时处理"><a href="#方式二：Ribbon中超时处理" class="headerlink" title="方式二：Ribbon中超时处理"></a>方式二：Ribbon中超时处理</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment">#请求连接的超时时间</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment">#请求处理的超时时间</span><br></code></pre></td></tr></table></figure><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/1.4.0.RELEASE/single/spring-cloud-netflix.html">Ribbon Timeout Handling参考</a></p><p>两者同时配置，方式一生效；<a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/696">参考</a></p><blockquote><p>注意：</p><p>IDEA无提词并警告</p><p>Cannot resolve configuration property ‘ribbon.ReadTimeout’</p><p>Cannot resolve configuration property ‘ribbon.ConnectTimeout’</p><p>运行程序测试发现Read timed out异常问题解决，配置生效</p><p>IDEA报错原因分析：</p><p>由于 OpenFeign 集成了 Ribbon ，其服务调用以及负载均衡在底层都是依靠 Ribbon 实现的，因此 OpenFeign 超时控制也是通过 Ribbon 来实现的。</p><p>这是IDEA的智能提示，但是它的智能是一定的逻辑支持的，因为ribbon的配置比较复杂，IDEA怀疑这个配置可能是多余的。<a href="https://github.com/dyc87112/blog-comments/issues/118">issues参考</a></p><p>解决方案：</p><p><a href="https://stackoverflow.com/questions/48954087/intellij-idea-complains-cannot-resolve-spring-boot-properties-but-they-work-fine">解决IDEA警告可进入此链接</a></p></blockquote><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>Spring Cloud Alibaba</category>
      
      <category>Feign</category>
      
      <category>HTTPClient</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>Spring Cloud Alibaba</tag>
      
      <tag>Feign</tag>
      
      <tag>HTTPClient</tag>
      
      <tag>OpenFeign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog日志</title>
    <link href="/2022/10/13/READEME/"/>
    <url>/2022/10/13/READEME/</url>
    
    <content type="html"><![CDATA[<h2 id="i-xiaoxin-GitHub-io"><a href="#i-xiaoxin-GitHub-io" class="headerlink" title="i-xiaoxin.GitHub.io"></a>i-xiaoxin.GitHub.io</h2><p>几经辗转终于还是敲定了这个blog；版本迭代了N-1次，开篇记录变化吧！</p><h3 id="2022年10月10日18点30分"><a href="#2022年10月10日18点30分" class="headerlink" title="2022年10月10日18点30分"></a>2022年10月10日18点30分</h3><p>comment: waline</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.jsdelivr.net/npm/@waline/client&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.jsdelivr.net/npm/@waline/client&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;waline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Waline</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#waline&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">serverURL</span>: <span class="hljs-string">&#x27;https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app&#x27;</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上为<a href="https://waline.js.org/">waline</a>标准使用</p><h3 id="2022年10月10日20点45分"><a href="#2022年10月10日20点45分" class="headerlink" title="2022年10月10日20点45分"></a>2022年10月10日20点45分</h3><p> 友链页 Links Page</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;🌐网站/Blog/ID&quot;</span><span class="hljs-string">,</span><br><span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;📶信息简介&quot;</span><span class="hljs-string">,</span><br><span class="hljs-attr">link:</span> <span class="hljs-string">&quot;🔗https://host&quot;</span><span class="hljs-string">,</span><br><span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;🧩网站/Blog提供的原创链接&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2022年10月10日20点33分"><a href="#2022年10月10日20点33分" class="headerlink" title="2022年10月10日20点33分"></a>2022年10月10日20点33分</h3><p>抛开GitHub异域世界不谈，在挂上工具的环境下多次访问<a href="https://i-xiaoxin.github.io/">站点</a>；即使配上<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid</a>懒加载还是图片加载缓慢，因为使用的是墙纸jpg；于是尝试使用经济方案wbep；情况好转80%</p><h3 id="2022年10月10日20点39分"><a href="#2022年10月10日20点39分" class="headerlink" title="2022年10月10日20点39分"></a>2022年10月10日20点39分</h3><blockquote><p>约束：</p><ul><li>tags&amp;&amp;categories 配置项首字母大写🔠</li><li>index_img: &#x2F;img&#x2F;article1-10.webp 随机🎲</li><li>banner_img: &#x2F;img&#x2F;post_banner.webp ❓</li><li>To Do add 📈</li></ul></blockquote><h3 id="2022年10月16日20点22分"><a href="#2022年10月16日20点22分" class="headerlink" title="2022年10月16日20点22分"></a>2022年10月16日20点22分</h3><p>首页💻端加速基本🉑️以了，📱端速度不太理想，图片也是重复的，最终还是先考虑低成本解决方案，取消index_img</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java线程</title>
    <link href="/2022/10/11/Java%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/10/11/Java%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、进程与线程的概念"><a href="#一、进程与线程的概念" class="headerlink" title="一、进程与线程的概念"></a>一、进程与线程的概念</h2><h3 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h3><p>进程的概念实在操作系统上体现的(电脑系统,手机),进程就是应用程序,例如:音乐,QQ,微信,王者荣耀,只要是应用程序并且打开了就是一个进程；执行中的程序就是<code>进程</code>,此<code>进程</code>是一个动态的概念–&gt;进程中会有执行内容(运行状态,会有交互),并且赋予一定的独立功能；多进程就是在电脑的运行状态下可以打开多个应用程序开启多个进程,并且进程之间不会有相互干扰,并且可以同时运行,进程的运行要看的是CPU的核心数–&gt;一个核心代表你可以开启一个进程(核心处理时什么样是最佳状态)–&gt;CPU切换功能(当前在显示时主要显示的是当前打开的窗口)–&gt;所以所有的进程都会抢占CPU的执行权–&gt;所以软件程序开的越多越消耗CPU的资源</p><h3 id="2-线程"><a href="#2-线程" class="headerlink" title="2.线程"></a>2.线程</h3><p>线程的概念实在应用程序中提现的,并且应用程序(进程)想要执行就必须有一个线程(一般这个线程叫做主线程),线程的体现在应用程序运行</p><h2 id="二、并发和并行的概念"><a href="#二、并发和并行的概念" class="headerlink" title="二、并发和并行的概念"></a>二、并发和并行的概念</h2><h3 id="1-并发"><a href="#1-并发" class="headerlink" title="1.并发"></a>1.并发</h3><p>并发基本含义 在操作系统中，并发是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行</p><h3 id="2-并行"><a href="#2-并行" class="headerlink" title="2.并行"></a>2.并行</h3><p>并行是指“并排行走”或“同时实行或实施”。 在操作系统中是指，一组程序按独立异步的速度执行，无论从微观还是宏观，程序都是一起执行的。 对比地，并发是指:在同一个时间段内，两个或多个程序执行，有时间上的重叠(宏观上是同时,微观上仍是顺序执行)。</p><h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3.区别"></a>3.区别</h3><ul><li>并发:同时刻只能执行一条指令</li><li>并行:同时刻可以执行多条指令</li></ul><h2 id="三、Java中线程创建的几种方式"><a href="#三、Java中线程创建的几种方式" class="headerlink" title="三、Java中线程创建的几种方式"></a>三、Java中线程创建的几种方式</h2><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承<code>Thread</code>类</h3><blockquote><p>步骤:</p><ul><li>创建一个类,继承Thread类</li><li>实现Thread类中run方法–&gt;run方法是多线程的执行体(线程执行的逻辑代码)</li><li>创建测试类,并创继承了Thread类的类对象</li><li>调用start方法启动线程</li></ul></blockquote><p>创建自定义类继承Thread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果想要实现多线程则必须重写run方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 注释父类的调用,自己实现</span><br>        <span class="hljs-comment">// super.run();</span><br>        <span class="hljs-comment">// 写一个循环代表多线程的执行逻辑</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建测试方法并创建线程启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建多线程对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程1&quot;</span>);<br>        <span class="hljs-comment">// 启动线程</span><br>        <span class="hljs-comment">// 错误示范</span><br>        <span class="hljs-comment">// myThread1.run();</span><br>        <span class="hljs-comment">// 正确启动方式</span><br>        myThread1.start();<br>        <span class="hljs-comment">// 创建多线程对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程2&quot;</span>);<br>        <span class="hljs-comment">// 启动线程</span><br>        <span class="hljs-comment">// 错误示范</span><br>        <span class="hljs-comment">// myThread2.run();</span><br>        <span class="hljs-comment">// 正确启动方式</span><br>        myThread2.start();<br>        System.out.println(<span class="hljs-string">&quot;程序结束...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-实现Runnable接口重写run方法"><a href="#2-实现Runnable接口重写run方法" class="headerlink" title="2.实现Runnable接口重写run方法"></a>2.实现Runnable接口重写run方法</h3><blockquote><p>步骤：</p><ul><li>创建线程类,并实现Runnable</li><li>重写run方法并编写逻辑代码</li><li>创建测试类并创建实现Runnable接口的类</li><li>创建Thread,并将线程类做参数传入</li><li>启动线程测试</li></ul></blockquote><p>线程类实现Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多线程执行的逻辑的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;多线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建线程类</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">// 创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread);<br>        <span class="hljs-comment">// 创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread);<br>        <span class="hljs-comment">// 启动线程</span><br>        thread1.start();<br>        thread2.start();<br><br><br>        <span class="hljs-comment">// 使用内部类创建多线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;匿名内部类多线程执行:&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 启动线程</span><br>        thread3.start();<br>        System.out.println(<span class="hljs-string">&quot;程序结束...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-实现Callable接口创建线程"><a href="#3-实现Callable接口创建线程" class="headerlink" title="3.实现Callable接口创建线程"></a>3.实现Callable接口创建线程</h3><blockquote><p>步骤：</p><ul><li>创建线程类实现Callable接口,并实现call方法</li><li>通过FutureTask类创建线程–&gt;传入Callable的实现类</li><li>创建Thread线程对象,并将FutureTask对象传入当做参数</li><li>启动线程</li><li>接收线程返回值</li></ul></blockquote><p>与前两不同,这里没有run方法,而是使用call方法去实现线程的逻辑代码,并且可以拥有<code>返回值</code>,但是接收返回值时会造成线程的阻塞(暂停等待接收数据),同样不能通过同一个FutureTask对象创建两个线程创建方式</p><p>创建线程类实现Callable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现Callable接口并指定泛型类型--&gt;泛型类型是Value,并且是多线程的返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * call方法与之前的两种方式中的run方法相同,都是线程的执行体</span><br><span class="hljs-comment">     * 不同点在于call方法有返回值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 线程的异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;线程执行:&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程执行完毕&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建测试类启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建线程</span><br>        <span class="hljs-comment">// 1. 创建实现Callable接口的类</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">// 2. 使用FutureTask创建此线程,泛型类型与Callable实现时的相同</span><br>        <span class="hljs-comment">// 参数为Callable实现类</span><br>        FutureTask&lt;String&gt; futureTask1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(myThread);<br>        FutureTask&lt;String&gt; futureTask2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(myThread);<br>        <span class="hljs-comment">// 3. 创建线程类</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask1);<br>        <span class="hljs-comment">// 4. 启动线程</span><br>        thread1.start();<br>        <span class="hljs-comment">// 3. 创建线程类</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask2);<br>        <span class="hljs-comment">// 4. 启动线程</span><br>        thread2.start();<br>        <span class="hljs-comment">// 5. 接收线程返回的参数使用public V get() throws InterruptedException, ExecutionException方法</span><br>        <span class="hljs-comment">// get方法会造成程序阻塞(会停止),等待接收线程返回的数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> futureTask1.get();<br>        System.out.println(result1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> futureTask2.get();<br>        System.out.println(result2);<br>        <span class="hljs-comment">// 最后输出程序结束</span><br>        System.out.println(<span class="hljs-string">&quot;程序结束...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-三种方式优缺"><a href="#4-三种方式优缺" class="headerlink" title="4.三种方式优缺"></a>4.三种方式优缺</h3><blockquote><p>继承Thread类</p></blockquote><p>优点:继承后直接可以启动线程</p><p>缺点:Java是单继承的语言,一旦继承了则无法继承其他的类的,造成我们的可扩展性非常低,并且没有返回值</p><blockquote><p>实现Runnable接口</p></blockquote><p>优点:解决了单继承的扩展性低缺点</p><p>缺点:没有返回值,需要单独创建Thread线程类启动</p><blockquote><p>实现Callable接口创建FutureTask对象</p></blockquote><p>优点:带有返回值并且也是通过接口实现方式创建</p><p>缺点:使用麻烦,并且接收返回值会造成程序阻塞(暂停),并且一个FutureTask对象只能启动一个线程</p><h2 id="四、Java中线程的生命周期以及状态控制"><a href="#四、Java中线程的生命周期以及状态控制" class="headerlink" title="四、Java中线程的生命周期以及状态控制"></a>四、Java中线程的生命周期以及状态控制</h2><h3 id="1-线程的生命周期概述"><a href="#1-线程的生命周期概述" class="headerlink" title="1.线程的生命周期概述"></a>1.线程的生命周期概述</h3><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221010212008318.png" style="zoom: 67%;" /><ul><li><p>新建状态(New)</p><p>  使用new关键字创建了Thread线程类之后并且在调用start()方法之前就是新建状态,一旦调用start()方法则进入就绪状态</p></li><li><p>就绪状态(Runnable)</p><p>  调用start()方法后并且具备所有的可执行状态(没有错误的情况下)就是就绪状态–&gt;一旦进入就绪状态后则能够去争夺CPU的执行权,仅仅只是争夺并没有执行权,所有的线程都需要去争夺线程执行权之后才能进入到运行状态</p></li><li><p>运行状态(Running)</p><p>  当处于就绪状态的线程争夺到CPU的执行权后即可进入并且执行run方法的逻辑(执行run方法就是执行状态)这时才是运行状态<br>  如果在运行状态时丢失CPU的执行权则进入就绪状态,如果调用sleep&#x2F;join&#x2F;等待同步锁&#x2F;执行IO操作&#x2F;wait方法时是进入阻塞状态<br>  如果调用yield方法则也会重新进入就绪状态</p></li><li><p>阻塞状态(Blocked)</p><p>  当运行状态的run方法中执行sleep&#x2F;join&#x2F;等待同步锁&#x2F;执行IO操作&#x2F;wait方法时则会出现阻塞状态(相当于执行途中暂停),这种状态时同样也是丢失CPU的执行权</p><ul><li>等待阻塞:运行中调用wait方法则是代表进入等待阻塞状态,只有等其他线程调用<code>notify</code>或<code>notifyAll</code>方法时才会被唤醒重新进入就绪状态</li><li>同步等待:当获取执行等待锁时会进入同步等待–&gt;当前某个对象有其他线程正在执行,只能等待其他线程执行完毕后才允许获取,获取同步锁后才会重新进入到就绪状态</li><li>其他状态:当线程代用join&#x2F;IO操作时,join线程让步代表当前这次进入阻塞状态让其他先行,方法调用完毕后则重新进入就绪状态;IO操作由于是针对文件的操作,会循环读取或者读写时会造成程序阻塞(在读写数据时有一个过程,这个过程就是造成程序阻塞原因)</li></ul></li><li><p>消亡状态(Dead)</p><p>  线程run方法执行完毕后就是线程的消亡</p></li></ul><h3 id="2-线程的休眠"><a href="#2-线程的休眠" class="headerlink" title="2.线程的休眠"></a>2.线程的休眠</h3><ul><li><code>public static native void sleep(long millis) throws InterruptedException</code>:线程休眠millis是代表毫秒值</li><li><code>public static void sleep(long millis, int nanos) throws InterruptedException</code>:线程休眠millis是毫秒值,nanos纳秒值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 线程体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">// 线程run方法不允许声明抛出异常必须捕获</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 让线程休眠一小会儿</span><br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">// 输出线程执行的流程</span><br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;-线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程休眠测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>线程休眠 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 创建自定义线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程休眠1&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程休眠2&quot;</span>);<br>        <span class="hljs-comment">// 启动线程</span><br>        myThread1.start();<br>        myThread2.start();<br><br><br>        System.out.println(<span class="hljs-string">&quot;主线程休眠开始...&quot;</span>);<br>        <span class="hljs-comment">// 线程休眠</span><br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>        System.out.println(<span class="hljs-string">&quot;主线程休眠结束...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-线程的优先级"><a href="#3-线程的优先级" class="headerlink" title="3.线程的优先级"></a>3.线程的优先级</h3><p>每个线程执行时都有一个优先级,设置优先级可以让CPU优先选择,但是CPU选不选择不光是看优先级的–&gt;虽然可以设置但是最终的执行结果不一定是优先级最高的</p><ul><li><p><code>public final void setPriority(int newPriority)</code>:设置线程优先级别优先级数值为1-10,默认是5</p></li><li><p>Thread类静态常量;以下三个静态常量是Thread类提供设置线程优先级时使用</p><ul><li>最低优先级   public final static int MIN_PRIORITY &#x3D; 1;</li><li>中等优先级(默认)  public final static int NORM_PRIORITY &#x3D; 5;</li><li>最高优先级           public final static int MAX_PRIORITY &#x3D; 10;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 获取当前执行的线程对象--&gt;静态方法</span><br>    <span class="hljs-comment">// private Thread thread;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> priority;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(<span class="hljs-type">int</span> priority)</span> &#123;<br>        <span class="hljs-comment">// 获取当前线程对象</span><br>        <span class="hljs-comment">// thread = Thread.currentThread();</span><br>        <span class="hljs-comment">// 设置优先级</span><br>        <span class="hljs-comment">// thread.setPriority(priority);</span><br>        <span class="hljs-comment">// 设置线程优先级</span><br>        <span class="hljs-built_in">this</span>.priority = priority;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 线程执行方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 获取当前线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-comment">// 设置线程优先级--&gt;不切实际,原因是run方法不止直接调用,而是JVM虚拟机调用,抢占到CPU执行权时才执行run方法</span><br>        thread.setPriority(<span class="hljs-built_in">this</span>.priority);<br>        <span class="hljs-comment">// 线程执行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(thread.getName() + <span class="hljs-string">&quot;-线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">// 创建线程对象用于执行线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread, <span class="hljs-string">&quot;线程1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread, <span class="hljs-string">&quot;线程2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread, <span class="hljs-string">&quot;线程3&quot;</span>);<br>        <span class="hljs-comment">// 设置线程优先级</span><br>        <span class="hljs-comment">// 以下三个常量是Thread类提供的设置线程优先级时使用的</span><br>        <span class="hljs-comment">// Thread.MIN_PRIORITY</span><br>        <span class="hljs-comment">// Thread.NORM_PRIORITY</span><br>        <span class="hljs-comment">// Thread.MAX_PRIORITY</span><br>        <span class="hljs-comment">// 设置最低优先级</span><br>        thread1.setPriority(Thread.MIN_PRIORITY);<br>        <span class="hljs-comment">// 设置中等优先级</span><br>        thread2.setPriority(Thread.NORM_PRIORITY);<br>        <span class="hljs-comment">// 设置最高优先级</span><br>        thread3.setPriority(Thread.MAX_PRIORITY);<br>        <span class="hljs-comment">// 启动线程测试</span><br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-线程让步"><a href="#4-线程让步" class="headerlink" title="4.线程让步"></a>4.线程让步</h3><p>线程让步是当前正在执行的线程处于孔融让梨精神放弃此次执行的机会,让给其他线程执行,但是让归让不代表我不进行争夺,有可能会出现我让步了我有不小心争夺到了执行权;线程让步会让当前线程重新进入就绪状态</p><ul><li><p><code>public static native void yield()</code>:线程让步方法是静态方法,调用的是底层</p></li><li><p>让步线程类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 获取当前执行的线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">// 调用线程让步方法--&gt;静态方法直接调用</span><br>            Thread.yield();<br>            System.out.println(thread.getName() + <span class="hljs-string">&quot;-线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>不让步线程类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 获取当前执行的线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(thread.getName() + <span class="hljs-string">&quot;-线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  测试代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建线程对象</span><br>        <span class="hljs-comment">// 创建线程1,是存在线程让步的</span><br>        <span class="hljs-type">MyThread01</span> <span class="hljs-variable">myThread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread01</span>();<br>        <span class="hljs-comment">// 创建线程2,是没有线程让步的</span><br>        <span class="hljs-type">MyThread02</span> <span class="hljs-variable">myThread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread02</span>();<br>        <span class="hljs-comment">// 创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread1, <span class="hljs-string">&quot;让步线程&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread2, <span class="hljs-string">&quot;不让步线程&quot;</span>);<br>        <span class="hljs-comment">// 启动线程</span><br>        thread1.start();<br>        thread2.start();<br>        <span class="hljs-comment">// main方法中调用线程让步main方法会让</span><br>        Thread.yield();<br>        System.out.println(<span class="hljs-string">&quot;main方法中线程让步&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-线程合并-线程加入插入"><a href="#5-线程合并-线程加入插入" class="headerlink" title="5.线程合并(线程加入插入)"></a>5.线程合并(线程加入插入)</h3><p>当前有两个线程,线程A和线程B,比如执行线程时先让B执行,并且线程B调用join插入其中,这时线程A就必须等待线程B的执行结束;相当于线程A和线程B执行时,线程A充了钱,线程会在线程B直线执行,并且线程B会等待线程A的执行完毕</p><ul><li><code>public final void join() throws InterruptedException</code>:线程合并(或者叫插入)</li><li><code>public final synchronized void join(long millis) throws InterruptedException</code>:线程合并(或者叫插入),插入多少毫秒然后离开</li><li><code>public final synchronized void join(long millis, int nanos) throws InterruptedException</code>:线程合并(或者叫插入),插入多少毫秒&#x2F;纳秒然后离开</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;-线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建线程对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程1&quot;</span>);<br>        <span class="hljs-comment">// 启动线程</span><br>        myThread01.start();<br>        <span class="hljs-comment">// 插入线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 调用插入合并线程方法</span><br>            myThread01.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 主线程执行for循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-守护线程"><a href="#6-守护线程" class="headerlink" title="6.守护线程"></a>6.守护线程</h3><p>守护线程存在意义是为了守护程序中的线程,并且守护线程不会主动死亡(只要执行了并且给了一个死循环则不会主动结束),只有当所有线程(非守护线程外的)全部消亡后才会跟随死亡<br>守护线程可以理解是后台线程–&gt;在后台默默的工作的线程,无私奉献的<br>如果想让普通线程切换为守护线程只需要调用方法<code>setDaemon</code>并且必须是在调用<code>start</code>方法前调用</p><ul><li><code>public final void setDaemon(boolean on)</code>:将当前线程设置为守护线程</li></ul><p>守护线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;守护线程执行:&quot;</span> + (index++));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>普通线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;线程执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 创建守护线程对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">// 将当前线程设置为守护线程,setDaemon此方法值为true时是守护线程,为false时是非守护线程(普通线程)</span><br>        myThread.setDaemon(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 启动线程</span><br>        myThread.start();<br><br>        <span class="hljs-comment">// 创建普通线程</span><br>        <span class="hljs-type">MyThread01</span> <span class="hljs-variable">myThread01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread01</span>();<br>        <span class="hljs-comment">// 启动普通线程</span><br>        myThread01.start();<br><br>        <span class="hljs-comment">// 手动睡一下</span><br>        Thread.sleep(<span class="hljs-number">2000</span>);<br><br><br>        <span class="hljs-comment">// main方法执行循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main方法执行:&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、线程同步synchronized"><a href="#五、线程同步synchronized" class="headerlink" title="五、线程同步synchronized"></a>五、线程同步synchronized</h2><h3 id="1-synchronized关键字注意事项"><a href="#1-synchronized关键字注意事项" class="headerlink" title="1.synchronized关键字注意事项"></a>1.synchronized关键字注意事项</h3><ul><li>synchronized只能修饰方法和代码块,不能修饰变量和类</li><li>synchronized只有在多线程读取同一个共享数据时才需要使用,如果多线程不操作共享资源(同一个资源)则不需要使用synchronized关键字修饰</li><li>经过synchronized关键字修饰后不管是方法还是代码执行效率都会降低,并且还会出现死锁问题</li><li>同步方法的同步监视器是<code>this</code>对象,静态同步方法的同步监视器是<code>类名.class</code>类,同步代码块的同步监视器是自定义的(一般锁住的是共享资源)</li><li>同步方法和静态同步方法是将整个方法体锁住,甭管里面是否是所有的代码都需要锁住;同步代码块是只需要锁住共享资源即可能稍微的提高效率</li></ul><h3 id="2-synchronized关键字时是什么时候获取锁什么时候释放锁"><a href="#2-synchronized关键字时是什么时候获取锁什么时候释放锁" class="headerlink" title="2.synchronized关键字时是什么时候获取锁什么时候释放锁"></a>2.synchronized关键字时是什么时候获取锁什么时候释放锁</h3><ul><li>同步方法和静态同步方法是在调用方法时大括号的起始位开始锁,大括号的结束位置是释放锁–&gt;方法执行完毕才会释放同步锁</li><li>同步代码块是在同步代码块执行时开始锁,执行结束时释放同步锁</li><li>如果发生异常或者使用return&#x2F;break关键字时也会提前结束</li><li>如果同步方法或同步代码块调用了wait()方法也会释放锁对象</li></ul><h3 id="3-synchronized关键字的可重入性"><a href="#3-synchronized关键字的可重入性" class="headerlink" title="3.synchronized关键字的可重入性"></a>3.synchronized关键字的可重入性</h3><p>在使用一个同步方法时,是否可以调用另一个同步方法,就是俄罗斯套娃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadSynchronizedDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 调用静态同步方法</span><br>        func01();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func01</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态同步方法1&quot;</span>);<br>        <span class="hljs-comment">// 调用静态同步方法2</span><br>        func02();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func02</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态同步方法2&quot;</span>);<br>        <span class="hljs-comment">// 调用普通静态方法</span><br>        func03();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func03</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;普通静态方法3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、线程同步的死锁"><a href="#六、线程同步的死锁" class="headerlink" title="六、线程同步的死锁"></a>六、线程同步的死锁</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>线程死锁可能会出现的场景:假设有一个共享类,共享类中有两个属性,属性1和属性2,并且有两个线程,线程A和线程B,线程A操作共享类中的属性1和属性2,同样线程B也须要操作属性1和属性2,但是我们要求属性1和属性2他们两个都必须是安全的(数据不能出现问题),将他俩全部锁住线程1中锁住属性1并且在锁住属性1的同步代码块中锁属性2,相同的线程B再锁住属性2,在属性2的同步代码块中锁属性1,这样就可以实现死锁现象,原因是,当线程A拿到属性1的锁后会进入,在线程A拿到属性1的锁时线程B有可能已经拿到属性2的锁,拿到属性2的锁的时候同样会去拿属性1的锁,而这时属性1的锁在线程A手中,会等待,同样线程A想要拿属性2的锁时,属性2同样在线程B的手中,这样就造成了死锁问题</p><h3 id="2-代码演示死锁问题"><a href="#2-代码演示死锁问题" class="headerlink" title="2. 代码演示死锁问题"></a>2. 代码演示死锁问题</h3><p>共享资源类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jav">/**<br> * 共享资源类<br> */<br>public class Source &#123;<br>    // 两个共享属性<br>    public static Object object01 = new Object();<br>    public static Object object02 = new Object();<br>&#125;<br></code></pre></td></tr></table></figure><p>线程A</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jav">/**<br> * 实现死锁的线程A<br> */<br>public class ThreadA extends Thread &#123;<br><br>    /**<br>     * 实现死锁<br>     */<br>    @Override<br>    public void run() &#123;<br>        // 锁住属性1--&gt;Object01<br>        synchronized (Source.object01) &#123;<br>            System.out.println(&quot;ThreadA拿到object01的锁...&quot;);<br>            // 休眠10毫秒,目的是给线程B留下拿属性2锁的机会<br>            try &#123;<br>                Thread.sleep(10);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            // 取得属性2的锁<br>            synchronized (Source.object02) &#123;<br>                System.out.println(&quot;ThreadA拿到object02的锁...&quot;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程B</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现死锁的线程B</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现死锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 锁住属性2--&gt;Object02</span><br>        <span class="hljs-keyword">synchronized</span> (Source.object02) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ThreadB拿到object02的锁...&quot;</span>);<br>            <span class="hljs-comment">// 休眠10毫秒,目的是给线程A留下拿属性1锁的机会</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">// 取得属性2的锁</span><br>            <span class="hljs-keyword">synchronized</span> (Source.object01) &#123;<br>                System.out.println(<span class="hljs-string">&quot;ThreadB拿到object01的锁...&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 测试线程死锁</span><br>        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>();<br>        <span class="hljs-type">ThreadB</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadB</span>();<br>        <span class="hljs-comment">// 启动线程</span><br>        threadA.start();<br>        threadB.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、线程通讯（wait-x2F-notify-x2F-notifyAll）"><a href="#七、线程通讯（wait-x2F-notify-x2F-notifyAll）" class="headerlink" title="七、线程通讯（wait&#x2F;notify&#x2F;notifyAll）"></a>七、线程通讯（wait&#x2F;notify&#x2F;notifyAll）</h2><h3 id="1-生产者与消费者模式"><a href="#1-生产者与消费者模式" class="headerlink" title="1.生产者与消费者模式"></a>1.生产者与消费者模式</h3><p>生产者–&gt;代表是商户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者类,代表商户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">private</span> String mealName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMealName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mealName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMealName</span><span class="hljs-params">(String mealName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mealName = mealName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Producer&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;mealName=&#x27;&quot;</span> + mealName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓冲区–&gt;外卖桌子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 缓冲区,放外卖的桌子--&gt;给商户使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Buffer</span> &#123;<br><br>    <span class="hljs-comment">// 商户对象--&gt;放外卖</span><br>    <span class="hljs-keyword">private</span> Producer producer;<br><br>    <span class="hljs-comment">// 标记,用于商户做好外卖后证明自己是不是做了外卖</span><br>    <span class="hljs-comment">// 也用于仓库中没有外卖的提示</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过构造方法创建生产者商户对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> producer 生产者商户对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Buffer</span><span class="hljs-params">(Producer producer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.producer = producer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生产外卖的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mealName 做好的外卖是什么</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">producer</span><span class="hljs-params">(String mealName)</span> &#123;<br>        <span class="hljs-comment">// 1. 验证当前外卖桌是否有外卖商品</span><br>        <span class="hljs-keyword">if</span> (flag) &#123;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>            <span class="hljs-comment">// 如果有外卖则不能生产外卖</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// wait方法代表等待,会让线程进入阻塞状态</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 2. 如果没有外卖则生产外卖</span><br>        <span class="hljs-built_in">this</span>.producer.setMealName(mealName);<br>        <span class="hljs-comment">// 输出一句话,为了执行时知道做好了</span><br>        System.out.println(<span class="hljs-string">&quot;---------生产者,商户做好了:&quot;</span> + producer.getMealName());<br>        <span class="hljs-comment">// 3. 将flag状态改为true,代表外卖做好了</span><br>        flag = <span class="hljs-literal">true</span>;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>        <span class="hljs-comment">// 4. 唤醒外卖小哥可以取外卖了--&gt;唤醒消费者</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br>    <span class="hljs-comment">// 消费外卖方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 验证桌子上是否有外卖</span><br>        <span class="hljs-keyword">if</span> (!flag) &#123;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 如果没有外卖则需要等待</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 2. 如果有外卖则取走</span><br>        <span class="hljs-comment">// 输出一句话代表取走了外卖</span><br>        System.out.println(<span class="hljs-string">&quot;消费者,外卖小哥取走了:&quot;</span> + <span class="hljs-built_in">this</span>.producer.getMealName());<br>        <span class="hljs-comment">// 3. 更改桌子状态</span><br>        flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>        <span class="hljs-comment">// 4. 唤醒生产者让他继续做外卖</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者线程类–&gt;生产商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者线程(商户)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 缓冲区对象(做好外卖后放到桌子上)</span><br>    <span class="hljs-keyword">private</span> Buffer buffer;<br><br>    <span class="hljs-comment">// 通过构造方法创建缓冲区对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerThread</span><span class="hljs-params">(Buffer buffer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = buffer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * run方法代表生产外卖的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 死循环生产外卖</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;酱焖肘子&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;铁锅炖大ne&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;猪肉炖粉条&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者线程类–&gt;外卖小哥取外卖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费者线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 缓冲区对象(取走外卖)</span><br>    <span class="hljs-keyword">private</span> Buffer buffer;<br><br>    <span class="hljs-comment">// 通过构造方法创建缓冲区对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConsumerThread</span><span class="hljs-params">(Buffer buffer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = buffer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取走外卖的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 死循环</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 在缓冲区取走外卖</span><br>            buffer.consumer();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 创建商家--&gt;生产者</span><br>        <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br>        <span class="hljs-comment">// 2. 创建缓冲区(外卖桌子)</span><br>        <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(producer);<br>        <span class="hljs-comment">// 3. 创建线程</span><br>        <span class="hljs-type">ProducerThread</span> <span class="hljs-variable">producerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerThread</span>(buffer);<br>        <span class="hljs-type">ConsumerThread</span> <span class="hljs-variable">consumerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerThread</span>(buffer);<br>        <span class="hljs-comment">// 4. 启动线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(producerThread).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(consumerThread).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-生产者与消费者存在问题"><a href="#2-生产者与消费者存在问题" class="headerlink" title="2.生产者与消费者存在问题"></a>2.生产者与消费者存在问题</h3><blockquote><p>上面在使用生产者与消费者时是单线程,正常交替,如果说出现两条线程同时生产并且同时消费,那这时会不会出现问题????<br>一旦出现了多生产者和多消费者后就会造成会有一方取走|制作多次<br>以上问题解决方案,将原本if改为while循环判断是否存在商品或外卖</p></blockquote><h3 id="解决多取-多做问题"><a href="#解决多取-多做问题" class="headerlink" title="解决多取|多做问题"></a>解决多取|多做问题</h3><p>生产者–&gt;代表是商户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者类,代表商户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">private</span> String mealName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMealName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mealName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMealName</span><span class="hljs-params">(String mealName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mealName = mealName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Producer&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;mealName=&#x27;&quot;</span> + mealName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓冲区–&gt;外卖桌子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 缓冲区,放外卖的桌子--&gt;给商户使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Buffer</span> &#123;<br><br>    <span class="hljs-comment">// 商户对象--&gt;放外卖</span><br>    <span class="hljs-keyword">private</span> Producer producer;<br><br>    <span class="hljs-comment">// 标记,用于商户做好外卖后证明自己是不是做了外卖</span><br>    <span class="hljs-comment">// 也用于仓库中没有外卖的提示</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过构造方法创建生产者商户对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> producer 生产者商户对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Buffer</span><span class="hljs-params">(Producer producer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.producer = producer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生产外卖的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mealName 做好的外卖是什么</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">producer</span><span class="hljs-params">(String mealName)</span> &#123;<br>        <span class="hljs-comment">// 1. 验证当前外卖桌是否有外卖商品</span><br>        <span class="hljs-comment">// 将原本的if判断一次改为while循环的多次判断验证</span><br>        <span class="hljs-keyword">while</span> (flag) &#123;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>            <span class="hljs-comment">// 如果有外卖则不能生产外卖</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// wait方法代表等待,会让线程进入阻塞状态</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 2. 如果没有外卖则生产外卖</span><br>        <span class="hljs-built_in">this</span>.producer.setMealName(mealName);<br>        <span class="hljs-comment">// 输出一句话,为了执行时知道做好了</span><br>        System.out.println(<span class="hljs-string">&quot;---------生产者,商户做好了:&quot;</span> + producer.getMealName());<br>        <span class="hljs-comment">// 3. 将flag状态改为true,代表外卖做好了</span><br>        flag = <span class="hljs-literal">true</span>;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>        <span class="hljs-comment">// 4. 唤醒外卖小哥可以取外卖了--&gt;唤醒消费者</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br>    <span class="hljs-comment">// 消费外卖方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 验证桌子上是否有外卖</span><br>        <span class="hljs-comment">// 将原本的if判断一次改为while循环的多次判断验证</span><br>        <span class="hljs-keyword">while</span> (!flag) &#123;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 如果没有外卖则需要等待</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 2. 如果有外卖则取走</span><br>        <span class="hljs-comment">// 输出一句话代表取走了外卖</span><br>        System.out.println(<span class="hljs-string">&quot;消费者,外卖小哥取走了:&quot;</span> + <span class="hljs-built_in">this</span>.producer.getMealName());<br>        <span class="hljs-comment">// 3. 更改桌子状态</span><br>        flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>        <span class="hljs-comment">// 4. 唤醒生产者让他继续做外卖</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者线程类–&gt;生产商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者线程(商户)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 缓冲区对象(做好外卖后放到桌子上)</span><br>    <span class="hljs-keyword">private</span> Buffer buffer;<br><br>    <span class="hljs-comment">// 通过构造方法创建缓冲区对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerThread</span><span class="hljs-params">(Buffer buffer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = buffer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * run方法代表生产外卖的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 死循环生产外卖</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;酱焖肘子&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;铁锅炖大ne&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;猪肉炖粉条&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者线程类–&gt;外卖小哥取外卖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费者线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 缓冲区对象(取走外卖)</span><br>    <span class="hljs-keyword">private</span> Buffer buffer;<br><br>    <span class="hljs-comment">// 通过构造方法创建缓冲区对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConsumerThread</span><span class="hljs-params">(Buffer buffer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = buffer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取走外卖的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 死循环</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 在缓冲区取走外卖</span><br>            buffer.consumer();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 创建商家--&gt;生产者</span><br>        <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br>        <span class="hljs-comment">// 2. 创建缓冲区(外卖桌子)</span><br>        <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(producer);<br>        <span class="hljs-comment">// 3. 创建线程</span><br>        <span class="hljs-type">ProducerThread</span> <span class="hljs-variable">producerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerThread</span>(buffer);<br>        <span class="hljs-type">ConsumerThread</span> <span class="hljs-variable">consumerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerThread</span>(buffer);<br>        <span class="hljs-comment">// 4. 启动线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(producerThread).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(consumerThread).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码解决了多做|多取的问题了,但是使用的是notify方法,在唤醒时有可能唤醒不是对方而是己方,一旦唤醒是己方则会出现死锁(都在wait等待唤醒)</p><h3 id="解决多做-多取的问题并且解决死等-死锁-问题"><a href="#解决多做-多取的问题并且解决死等-死锁-问题" class="headerlink" title="解决多做|多取的问题并且解决死等(死锁)问题"></a>解决多做|多取的问题并且解决死等(死锁)问题</h3><p>生产者–&gt;代表是商户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者类,代表商户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">private</span> String mealName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMealName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mealName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMealName</span><span class="hljs-params">(String mealName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mealName = mealName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Producer&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;mealName=&#x27;&quot;</span> + mealName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓冲区–&gt;外卖桌子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 缓冲区,放外卖的桌子--&gt;给商户使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Buffer</span> &#123;<br><br>    <span class="hljs-comment">// 商户对象--&gt;放外卖</span><br>    <span class="hljs-keyword">private</span> Producer producer;<br><br>    <span class="hljs-comment">// 标记,用于商户做好外卖后证明自己是不是做了外卖</span><br>    <span class="hljs-comment">// 也用于仓库中没有外卖的提示</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过构造方法创建生产者商户对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> producer 生产者商户对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Buffer</span><span class="hljs-params">(Producer producer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.producer = producer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生产外卖的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mealName 做好的外卖是什么</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">producer</span><span class="hljs-params">(String mealName)</span> &#123;<br>        <span class="hljs-comment">// 1. 验证当前外卖桌是否有外卖商品</span><br>        <span class="hljs-comment">// 将原本的if判断一次改为while循环的多次判断验证</span><br>        <span class="hljs-keyword">while</span> (flag) &#123;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>            <span class="hljs-comment">// 如果有外卖则不能生产外卖</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// wait方法代表等待,会让线程进入阻塞状态</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 2. 如果没有外卖则生产外卖</span><br>        <span class="hljs-built_in">this</span>.producer.setMealName(mealName);<br>        <span class="hljs-comment">// 输出一句话,为了执行时知道做好了</span><br>        System.out.println(<span class="hljs-string">&quot;---------生产者,商户做好了:&quot;</span> + producer.getMealName());<br>        <span class="hljs-comment">// 3. 将flag状态改为true,代表外卖做好了</span><br>        flag = <span class="hljs-literal">true</span>;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>        <span class="hljs-comment">// 4. 唤醒外卖小哥可以取外卖了--&gt;唤醒消费者</span><br>        <span class="hljs-comment">// 由于每次唤醒一个会出现将同伴唤醒情况,所以直接将所有在等待线程全都唤醒即可,所以将notify改为notifyAll</span><br>        <span class="hljs-comment">// this.notify();</span><br>        <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br><br>    <span class="hljs-comment">// 消费外卖方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 验证桌子上是否有外卖</span><br>        <span class="hljs-comment">// 将原本的if判断一次改为while循环的多次判断验证</span><br>        <span class="hljs-keyword">while</span> (!flag) &#123;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 如果没有外卖则需要等待</span><br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 2. 如果有外卖则取走</span><br>        <span class="hljs-comment">// 输出一句话代表取走了外卖</span><br>        System.out.println(<span class="hljs-string">&quot;消费者,外卖小哥取走了:&quot;</span> + <span class="hljs-built_in">this</span>.producer.getMealName());<br>        <span class="hljs-comment">// 3. 更改桌子状态</span><br>        flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">// true:有外卖;false:没有外卖;</span><br>        <span class="hljs-comment">// 4. 唤醒生产者让他继续做外卖</span><br>        <span class="hljs-comment">// 由于每次唤醒一个会出现将同伴唤醒情况,所以直接将所有在等待线程全都唤醒即可,所以将notify改为notifyAll</span><br>        <span class="hljs-comment">// this.notify();</span><br>        <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者线程类–&gt;生产商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者线程(商户)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 缓冲区对象(做好外卖后放到桌子上)</span><br>    <span class="hljs-keyword">private</span> Buffer buffer;<br><br>    <span class="hljs-comment">// 通过构造方法创建缓冲区对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProducerThread</span><span class="hljs-params">(Buffer buffer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = buffer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * run方法代表生产外卖的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 死循环生产外卖</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;酱焖肘子&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;铁锅炖大ne&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 调用缓冲区制作外卖</span><br>                buffer.producer(<span class="hljs-string">&quot;猪肉炖粉条&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者线程类–&gt;外卖小哥取外卖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费者线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 缓冲区对象(取走外卖)</span><br>    <span class="hljs-keyword">private</span> Buffer buffer;<br><br>    <span class="hljs-comment">// 通过构造方法创建缓冲区对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConsumerThread</span><span class="hljs-params">(Buffer buffer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.buffer = buffer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取走外卖的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 死循环</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 在缓冲区取走外卖</span><br>            buffer.consumer();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 创建商家--&gt;生产者</span><br>        <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br>        <span class="hljs-comment">// 2. 创建缓冲区(外卖桌子)</span><br>        <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(producer);<br>        <span class="hljs-comment">// 3. 创建线程</span><br>        <span class="hljs-type">ProducerThread</span> <span class="hljs-variable">producerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerThread</span>(buffer);<br>        <span class="hljs-type">ConsumerThread</span> <span class="hljs-variable">consumerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerThread</span>(buffer);<br>        <span class="hljs-comment">// 4. 启动线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(producerThread).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(consumerThread).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然以上方法可以解决线程死锁问题,但是会出现资源浪费的情况,原因是唤醒时没必要将所有的线程全都唤醒,唤醒时只需要唤醒对方即可</p><h2 id="八、拓展阅读"><a href="#八、拓展阅读" class="headerlink" title="八、拓展阅读"></a>八、拓展阅读</h2><p><a href="http://concurrent.redspider.group/RedSpider.html">深入浅出Java多线程</a></p><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ribbon负载均衡</title>
    <link href="/2022/10/11/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2022/10/11/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、负载均衡简介"><a href="#一、负载均衡简介" class="headerlink" title="一、负载均衡简介"></a>一、负载均衡简介</h2><p>通俗的讲，负载均衡就是将负载（工作任务，访问请求）进行分摊到多个操作单元（服务器,组件）上进行执行。</p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221011165614222.png" alt="image-20221011165614222" style="zoom: 67%;" /><h2 id="二、Ribbon简介"><a href="#二、Ribbon简介" class="headerlink" title="二、Ribbon简介"></a>二、Ribbon简介</h2><p>Ribbon 是一个客户端负载均衡器，可让您对 HTTP 和 TCP 客户端的行为进行大量控制。</p><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。</p><p>注意：我们不需要去引入ribbon的依赖，因为在nacos里面已经集成了ribbon的依赖：</p><p>Ribbon提供很多种负载均衡算法，例如轮询、随机 等等，默认轮询。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221011170651845.png"></p><h2 id="三、Ribbon负载均衡策略"><a href="#三、Ribbon负载均衡策略" class="headerlink" title="三、Ribbon负载均衡策略"></a>三、Ribbon负载均衡策略</h2><p>负载均衡接口：<code>com.netflix.loadbalancer.IRule</code></p><p>7中负载均衡策略：</p><table><thead><tr><th>策略类</th><th>命名</th><th>描述</th></tr></thead><tbody><tr><td>RandomRule</td><td>随机策略</td><td>该策略实现了从服务清单中随机选择一个服务实例的功能。</td></tr><tr><td>RoundRobinRule</td><td>轮询策略</td><td>该策略实现按照线性轮询的方式依次选择实例的功能。具体实现如下，在循环中增加了一个count计数变量，该变量会在每次轮询之后累加并求余服务总数</td></tr><tr><td>RetryRule</td><td>重试策略</td><td>在一个配置时间段内当选择Server不成功，则一直尝试选择一个可用的Server</td></tr><tr><td>BestAvailableRule</td><td>最低并发策略</td><td>遍历服务提供者列表，如果Server断路器打开，则忽略，再选择其中并发连接最低的Server</td></tr><tr><td>AvailabilityFilteringRule</td><td>可用过滤策略</td><td>先过滤掉非健康的服务实例，然后再选择连接数较小的服务实例。</td></tr><tr><td><del>ResponseTimeWeightedRule</del></td><td>响应时间加权策略</td><td>已经被弃用，作用同WeightedResponseTimeRule</td></tr><tr><td>WeightedResponseTimeRule</td><td>响应时间加权策略</td><td>根据Server的响应时间分配权重，响应时间越长，权重越低，被选中的概率就越低。</td></tr></tbody></table><h2 id="四、Ribbon入门Demo"><a href="#四、Ribbon入门Demo" class="headerlink" title="四、Ribbon入门Demo"></a>四、Ribbon入门Demo</h2><blockquote><ol><li>RestTemplate上配置@LoadBalanced注解开启ribbon负载均衡，默认轮询策略</li><li>指定策略注入Bean即可</li></ol></blockquote><h3 id="1-创建两个Ribbon-provider"><a href="#1-创建两个Ribbon-provider" class="headerlink" title="1. 创建两个Ribbon_provider"></a>1. 创建两个Ribbon_provider</h3><ul><li><p>构建两个Provider，分别在application.yml中设置两个不同端口(避免端口冲突)；</p></li><li><p>分别在两个UserServiceImpl中设置差异化User对象以测试负载均衡结果</p></li></ul><p>此处只放一个Provider供参考</p><h4 id="1-1-controller"><a href="#1-1-controller" class="headerlink" title="1.1 controller"></a>1.1 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> com.example.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.getUserById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-service"><a href="#1-2-service" class="headerlink" title="1.2 service"></a>1.2 service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id,<span class="hljs-string">&quot;admin-1&quot;</span>,<span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-SpringBoot-App"><a href="#1-3-SpringBoot-App" class="headerlink" title="1.3 SpringBoot App"></a>1.3 SpringBoot App</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonProviderApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(RibbonProviderApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-application-yml"><a href="#1-4-application-yml" class="headerlink" title="1.4 application.yml"></a>1.4 application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span> <span class="hljs-comment">#此处在两个service设置不同端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">47.98</span><span class="hljs-number">.105</span><span class="hljs-number">.36</span><span class="hljs-string">:8848</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ribbon-provider</span><br></code></pre></td></tr></table></figure><h3 id="2-创建ribbon-consumer"><a href="#2-创建ribbon-consumer" class="headerlink" title="2. 创建ribbon_consumer"></a>2. 创建ribbon_consumer</h3><h3 id="2-1-config"><a href="#2-1-config" class="headerlink" title="2.1 config"></a>2.1 config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.netflix.loadbalancer.IRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.RandomRule;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><span class="hljs-comment">// 开启ribbon负载均衡，默认轮询策略</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启随即策略</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">iRule</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-controller"><a href="#2-2-controller" class="headerlink" title="2.2 controller"></a>2.2 controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.ServiceInstance;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * springcloud 提供的工具类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> currentIndex;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br><br>        List&lt;ServiceInstance&gt; instanceList = discoveryClient.getInstances(<span class="hljs-string">&quot;ribbon-provider&quot;</span>);<br>        <span class="hljs-comment">// 随机策略</span><br>        <span class="hljs-comment">// int currentIndex = new Random().nextInt(instanceList.size());</span><br><br>        <span class="hljs-comment">// 轮询策略</span><br>        <span class="hljs-comment">// currentIndex = (currentIndex + 1) % instanceList.size();</span><br>        <span class="hljs-comment">// ServiceInstance instance = instanceList.get(currentIndex);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://ribbon-provider/provider/getUserById/&quot;</span>+id;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(url,User.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-SpringBoot-App"><a href="#2-3-SpringBoot-App" class="headerlink" title="2.3 SpringBoot App"></a>2.3 SpringBoot App</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonConsumerApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        SpringApplication.run(RibbonConsumerApp.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-4-application-yml"><a href="#2-4-application-yml" class="headerlink" title="2.4 application.yml"></a>2.4 application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">47.98</span><span class="hljs-number">.105</span><span class="hljs-number">.36</span><span class="hljs-string">:8848</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ribbon-consumer</span><br></code></pre></td></tr></table></figure><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 调用服务提供者多次访问结果展示：</span><br><span class="hljs-comment">// 访问：http://127.0.0.1/consumer/getUserById/20</span><br><span class="hljs-comment">// 结果：</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin-2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 访问：http://127.0.0.1/consumer/getUserById/20</span><br><span class="hljs-comment">// 结果：</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin-1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 访问：http://127.0.0.1/consumer/getUserById/20</span><br><span class="hljs-comment">// 结果：</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin-2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 访问：http://127.0.0.1/consumer/getUserById/20</span><br><span class="hljs-comment">// 结果：</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin-1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>Spring Cloud Alibaba</category>
      
      <category>Ribbon</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>Spring Cloud Alibaba</tag>
      
      <tag>Ribbon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos注册中心与配置中心</title>
    <link href="/2022/10/08/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <url>/2022/10/08/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是-Nacos"><a href="#一、什么是-Nacos" class="headerlink" title="一、什么是 Nacos"></a>一、什么是 Nacos</h3><p class="note note-success">Nacos /nɑ:kəʊs/ 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。（配置中心和注册中心）</p><h3 id="二、配置中心基础概述"><a href="#二、配置中心基础概述" class="headerlink" title="二、配置中心基础概述"></a>二、配置中心基础概述</h3><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h4><p>在系统开发过程中，开发者通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成。配置变更是调整系统运行时的行为的有效手段。</p><h4 id="2-为什么要用配置中心？"><a href="#2-为什么要用配置中心？" class="headerlink" title="2.为什么要用配置中心？"></a>2.为什么要用配置中心？</h4><ul><li><strong>配置实时生效</strong>：传统的静态配置方式要想修改某个配置只能修改之后重新发布应用，要实现动态性，可以选择使用数据库，通过定时轮询访问数据库来感知配置的变化。轮询频率低感知配置变化的延时就长，轮询频率高，感知配置变化的延时就短，但比较损耗性能，需要在实时性和性能之间做折中。<strong>配置中心专门针对这个业务场景，兼顾实时性和一致性来管理动态配置</strong>；</li><li><strong>配置管理流程</strong>：配置的权限管控、灰度发布、版本管理、格式检验和安全配置等一系列的配置管理相关的特性，也是配置中心不可获取的一部分；</li><li><strong>分布式场景</strong>：随着采用分布式的开发模式，项目之间的相互引用随着服务的不断增多，相互之间的调用复杂度成指数升高，每次投产或者上线新的项目时苦不堪言，需要引用配置中心治理</li></ul><h4 id="3-配置中心支持功能"><a href="#3-配置中心支持功能" class="headerlink" title="3.配置中心支持功能"></a>3.配置中心支持功能</h4><ul><li><strong>灰度发布</strong>：配置的灰度发布是配置中心比较重要的功能，当配置的变更影响比较大的时候，需要先在部分应用实例中验证配置的变更是否符合预期，然后再推送到所有应用实例。</li><li><strong>权限管理</strong>：配置的变更和代码变更都是对应用运行逻辑的改变，重要的配置变更常常会带来核弹的效果，对于配置变更的权限管控和审计能力同样是配置中心重要的功能。</li><li><strong>版本管理&amp;回滚</strong>：当配置变更不符合预期的时候，需要根据配置的发布版本进行回滚。</li><li><strong>配置格式校验</strong>：应用的配置数据存储在配置中心一般都会以一种配置格式存储，比如Properties、Json、Yaml等，如果配置格式错误，会导致客户端解析配置失败引起生产故障，配置中心对配置的格式校验能够有效防止人为错误操作的发生，是配置中心核心功能中的刚需。</li><li><strong>监听查询</strong>：当排查问题或者进行统计的时候，需要知道一个配置被哪些应用实例使用到，以及一个实例使用到了哪些配置。</li><li><strong>多环境</strong>：在实际生产中，配置中心常常需要涉及多环境或者多集群，业务在开发的时候可以将开发环境和生产环境分开，或者根据不同的业务线存在多个生产环境。如果各个环境之间的相互影响比较小（开发环境影响到生产环境稳定性），配置中心可以通过逻辑隔离的方式支持多环境。</li><li><strong>多集群</strong>：当对稳定性要求比较高，不允许各个环境相互影响的时候，需要将多个环境通过多集群的方式进行物理隔离。</li></ul><h3 id="三、Nacos安装和启动"><a href="#三、Nacos安装和启动" class="headerlink" title="三、Nacos安装和启动"></a>三、Nacos安装和启动</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><blockquote><p>从github上选择需要的版本进行<a href="https://github.com/alibaba/nacos/releases">下载</a></p></blockquote><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009162640058.png" alt="image-20221009162640058"></p><h4 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/upload<br>tar -zxvf nacos-server-1.4.1.tar.gz -C /usr/local<br></code></pre></td></tr></table></figure><h4 id="3-启动和关闭"><a href="#3-启动和关闭" class="headerlink" title="3.启动和关闭"></a>3.启动和关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nacos/bin<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>./startup.sh -m standalone #非集群模式启动<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭</span><br>./shutdown.sh<br></code></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><p>浏览器访问：<a href="http://host:8848/nacos%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E5%8D%B3%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%EF%BC%9B%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%E5%90%8D/%E5%AF%86%E7%A0%81%E4%B8%BA%EF%BC%9A">http://host:8848/nacos，出现登录界面即启动成功；默认用户名/密码为：</a> nacos&#x2F;nacos</p><h3 id="四、Nacos注册中心"><a href="#四、Nacos注册中心" class="headerlink" title="四、Nacos注册中心"></a>四、Nacos注册中心</h3><h3 id="1-什么是注册中心"><a href="#1-什么是注册中心" class="headerlink" title="1.什么是注册中心"></a>1.什么是注册中心</h3><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009163625094.png" alt="image-20221009163625094"></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009163709444.png" alt="image-20221009163709444"></p><p>注册中心主要有三部分组成：</p><ul><li><strong>Nacos-Server</strong>：注册中心</li></ul><p>​    提供服务的注册和发现。</p><ul><li><strong>Nacos-Provider</strong>：服务提供方</li></ul><p>​    把自身的服务实例注册到 Nacos Server 中</p><ul><li><strong>Nacos-Consumer</strong>：服务调用方</li></ul><p>​    通过 Nacos Server 获取服务列表，消费服务。</p><h3 id="2-Nacos注册中心使用"><a href="#2-Nacos注册中心使用" class="headerlink" title="2.Nacos注册中心使用"></a>2.Nacos注册中心使用</h3><h4 id="2-1创建服务提供者nacos-provider"><a href="#2-1创建服务提供者nacos-provider" class="headerlink" title="2.1创建服务提供者nacos_provider"></a>2.1创建服务提供者nacos_provider</h4><h5 id="lt-1-gt-pom-xml"><a href="#lt-1-gt-pom-xml" class="headerlink" title="&lt;1&gt;pom.xml"></a>&lt;1&gt;pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nacos_provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--nacos客户端--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="lt-2-gt-application-yml"><a href="#lt-2-gt-application-yml" class="headerlink" title="&lt;2&gt;application.yml"></a>&lt;2&gt;application.yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.211</span><span class="hljs-number">.131</span><span class="hljs-string">:8848</span> <span class="hljs-comment">#注册中心的地址</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-provider</span> <span class="hljs-comment">#注册到nacos的服务名</span><br></code></pre></td></tr></table></figure><h5 id="lt-3-gt-java"><a href="#lt-3-gt-java" class="headerlink" title="&lt;3&gt;java"></a>&lt;3&gt;java</h5><p>conrtoller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.pojo.User;<br><span class="hljs-keyword">import</span> com.example.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.getUserById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>SpringBootApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">//注册自己并发现其他服务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosProviderApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(NacosProviderApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3创建服务消费者nacos-consumer"><a href="#2-3创建服务消费者nacos-consumer" class="headerlink" title="2.3创建服务消费者nacos_consumer"></a>2.3创建服务消费者nacos_consumer</h4><h5 id="lt-1-gt-pom-xml-1"><a href="#lt-1-gt-pom-xml-1" class="headerlink" title="&lt;1&gt;pom.xml"></a>&lt;1&gt;pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nacos_consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="lt-2-gt-application-yml-1"><a href="#lt-2-gt-application-yml-1" class="headerlink" title="&lt;2&gt;application.yml"></a>&lt;2&gt;application.yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.211</span><span class="hljs-number">.131</span><span class="hljs-string">:8848</span> <span class="hljs-comment">#注册中心的地址</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-consumer</span> <span class="hljs-comment">#注册到nacos的服务名</span><br></code></pre></td></tr></table></figure><h5 id="lt-3-gt-java-1"><a href="#lt-3-gt-java-1" class="headerlink" title="&lt;3&gt;java"></a>&lt;3&gt;java</h5><p>config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfig</span> &#123;<br><br>    <span class="hljs-comment">//RestTemplate：是spring提供的一个工具类，作用是发送restful请求</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.ServiceInstance;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-comment">//springcloud提供的工具类，作用：发现服务</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-comment">//获得所有的服务名</span><br>        List&lt;String&gt; serviceList = discoveryClient.getServices();<br>        <span class="hljs-keyword">for</span> (String serviceName : serviceList) &#123;<br>            System.out.println(serviceName);<br>        &#125;<br><br>        <span class="hljs-comment">//调用nacos_provider服务</span><br>        <span class="hljs-comment">//缺点：1、ip和port硬编码    2、不能实现负载均衡</span><br>        <span class="hljs-comment">//String url = &quot;http://127.0.0.1:8090/provider/getUserById/&quot;+id;</span><br><br>        <span class="hljs-comment">//缺点：2、不能实现负载均衡</span><br>        <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> discoveryClient.getInstances(<span class="hljs-string">&quot;nacos-provider&quot;</span>).get(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://&quot;</span>+ service.getHost() +<span class="hljs-string">&quot;:&quot;</span>+ service.getPort() +<span class="hljs-string">&quot;/provider/getUserById/&quot;</span>+id;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(url, User.class);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-Nacos配置中心使用"><a href="#3-Nacos配置中心使用" class="headerlink" title="3.Nacos配置中心使用"></a>3.Nacos配置中心使用</h3><h4 id="3-1创建配置中心nacos-config"><a href="#3-1创建配置中心nacos-config" class="headerlink" title="3.1创建配置中心nacos_config"></a>3.1创建配置中心nacos_config</h4><h5 id="lt-1-gt-pom-xml-2"><a href="#lt-1-gt-pom-xml-2" class="headerlink" title="&lt;1&gt;pom.xml"></a>&lt;1&gt;pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nacos_config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="lt-2-gt-bootstrap-yml"><a href="#lt-2-gt-bootstrap-yml" class="headerlink" title="&lt;2&gt;bootstrap.yml"></a>&lt;2&gt;bootstrap.yml</h5><blockquote><p>客户端配置文件的名称必须为<code>bootstrap.yml</code></p><ul><li><code>bootstrap.yml</code>比 <code>applicaton.yml</code> 优先加载，应用于系统级别参数配置，一般不会变动；</li><li><code>application.yml</code>应用于SpringBoot项目的自动化配置；</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.211</span><span class="hljs-number">.131</span><span class="hljs-string">:8848</span> <span class="hljs-comment">#注册中心的地址#配置文件的前缀</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">nacos-config</span> <span class="hljs-comment">#配置文件的前缀，默认是spring.application.name</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment">#配置文件的后缀，默认是properties</span><br><span class="hljs-comment">#Data ID的语法：$&#123;spring.cloud.nacos.config.prefix&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></code></pre></td></tr></table></figure><h5 id="lt-3-gt-java-2"><a href="#lt-3-gt-java-2" class="headerlink" title="&lt;3&gt;java"></a>&lt;3&gt;java</h5><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">//重新从BeanFactory获取一个新的实例（该实例使用新的配置）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.datasource.type&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String type;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/config/info&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">configInfo</span> <span class="hljs-operator">=</span> driverClassName+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>+url+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>+username+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span><br>                +password+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>+type;<br>        <span class="hljs-keyword">return</span> configInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBootApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosConfigApp</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(NacosConfigApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2在nacos中新建配置文件"><a href="#3-2在nacos中新建配置文件" class="headerlink" title="3.2在nacos中新建配置文件"></a>3.2在nacos中新建配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.211</span><span class="hljs-number">.131</span><span class="hljs-string">:8848</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.211.131:3306/health?characterEncoding=UTF-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1111</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009212733188.png"></p><h4 id="3-3测试"><a href="#3-3测试" class="headerlink" title="3.3测试"></a>3.3测试</h4><p>1.启动时加载配置文件</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009213211549.png"></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009213226665.png"></p><p>2.修改配置文件后nacos监听到MD5有变化则推送消息给客户端，客户端收到消息后会拉取最新配置（参考<br><code>配置管理-&gt;监听查询</code>菜单）</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009213243110.png"></p><p>3.浏览器访问：<a href="http://127.0.0.1/config/info">http://127.0.0.1/config/info</a></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221009213256584.png"></p><h4 id="3-4Nacos配置管理模型"><a href="#3-4Nacos配置管理模型" class="headerlink" title="3.4Nacos配置管理模型"></a>3.4Nacos配置管理模型</h4><p>Nacos配置管理，通过Namespace、group、Data ID能够定位到一个配置集。</p><p>Namespace Group DataId介绍：</p><ul><li>Namespace: 代表不同的环境的配置隔离, 如: 开发、测试， 生产等</li><li>Group: 可以代表某个项目, 如XX医疗项目, XX电商项目</li><li>DataId: 每个项目下往往有若干个工程, 每个配置集(DataId)是一个工程的主配置文件</li></ul><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221010165507276.png"></p><p>获取配置集需要指定：</p><ol><li>nacos服务地址，必须指定</li><li>namespace，如不指定默认public</li><li>group，如不指定默认 DEFAULT_GROUP</li><li>dataId，必须指定</li></ol><blockquote><p>Nacos配置隔离先在配置中对以上参数进行设置，通过对配置集指定参数进行配置隔离</p></blockquote><h4 id="3-5服务隔离"><a href="#3-5服务隔离" class="headerlink" title="3.5服务隔离"></a>3.5服务隔离</h4><p>nacos_provider：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">47.98</span><span class="hljs-number">.105</span><span class="hljs-number">.36</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">test</span> <span class="hljs-comment">#开发环境</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">nacos_group</span> <span class="hljs-comment">#项目组  provide与consumer同项目保持一致</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-provider</span><br></code></pre></td></tr></table></figure><p>nacos_consumer：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">47.98</span><span class="hljs-number">.105</span><span class="hljs-number">.36</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">test</span> <span class="hljs-comment">#开发环境</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">nacos_group</span> <span class="hljs-comment">#项目组  provide与consumer同项目保持一致</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-consumer</span><br></code></pre></td></tr></table></figure><h3 id="五、Nacos持久化"><a href="#五、Nacos持久化" class="headerlink" title="五、Nacos持久化"></a>五、Nacos持久化</h3><h4 id="1-为什么要持久化？"><a href="#1-为什么要持久化？" class="headerlink" title="1.为什么要持久化？"></a>1.为什么要持久化？</h4><p>​Nacos默认有自带嵌入式数据库derby，但是如果做集群模式的话，就不能使用自己的数据库不然每个节点一个数据库，那么数据就不统一了，需要使用外部的mysql</p><h4 id="2-持久化配置步骤"><a href="#2-持久化配置步骤" class="headerlink" title="2.持久化配置步骤"></a>2.持久化配置步骤</h4><h5 id="2-1Nacos-application-properties"><a href="#2-1Nacos-application-properties" class="headerlink" title="2.1Nacos application.properties"></a>2.1Nacos application.properties</h5><p>进入application.properties文件vim</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#*************** Config Module Related Configurations ***************#</span><br><span class="hljs-comment">### If use MySQL as datasource:</span><br><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Count of DB:</span><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Connect URL of DB:</span><br> <span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=10000&amp;socketTimeout=30000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br> <span class="hljs-attr">db.user.0</span>=<span class="hljs-string">root</span><br> <span class="hljs-attr">db.password.0</span>=<span class="hljs-string">12345678</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### Connection pool configuration: hikariCP</span><br><span class="hljs-attr">db.pool.config.connectionTimeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">db.pool.config.validationTimeout</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">db.pool.config.maximumPoolSize</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">db.pool.config.minimumIdle</span>=<span class="hljs-string">2</span><br><br></code></pre></td></tr></table></figure><h5 id="2-2Mysql数据库中配置"><a href="#2-2Mysql数据库中配置" class="headerlink" title="2.2Mysql数据库中配置"></a>2.2Mysql数据库中配置</h5><p>Mysql中创建nacos数据库并将自带的<code>nacos-mysql.sql</code>导入即可</p><h5 id="2-3测试"><a href="#2-3测试" class="headerlink" title="2.3测试"></a>2.3测试</h5><p>启动Nacos创建配置，Mysql表config_info中数据同步增加即配置成功</p><h3 id="六、Nacos集群搭建"><a href="#六、Nacos集群搭建" class="headerlink" title="六、Nacos集群搭建"></a>六、Nacos集群搭建</h3><h4 id="1-集群部署架构图"><a href="#1-集群部署架构图" class="headerlink" title="1.集群部署架构图"></a>1.集群部署架构图</h4><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/20221010193110.png" style="zoom:25%;" /><h4 id="2-节点规划"><a href="#2-节点规划" class="headerlink" title="2.节点规划"></a>2.节点规划</h4><table><thead><tr><th align="center">节点</th><th align="center">端口</th></tr></thead><tbody><tr><td align="center">47.98.105.36</td><td align="center">8848</td></tr><tr><td align="center">47.98.105.36</td><td align="center">8849</td></tr><tr><td align="center">47.98.105.36</td><td align="center">8847</td></tr></tbody></table><h4 id="3-集群搭建"><a href="#3-集群搭建" class="headerlink" title="3.集群搭建"></a>3.集群搭建</h4><h5 id="3-1配置cluster-conf文件"><a href="#3-1配置cluster-conf文件" class="headerlink" title="3.1配置cluster.conf文件"></a>3.1配置cluster.conf文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nacos/conf/<br>cp cluster.conf.example cluster.conf<br>vim cluster.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">it is ip</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">example</span><br>47.98.105.36:8847<br>47.98.105.36:8848<br>47.98.105.36:8849<br>                <br></code></pre></td></tr></table></figure><h5 id="3-2复制3个Nacos"><a href="#3-2复制3个Nacos" class="headerlink" title="3.2复制3个Nacos"></a>3.2复制3个Nacos</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local<br>mkdir nacos_cluster<br>cp -r nacos nacos_cluster/nacos_8847<br>cp -r nacos nacos_cluster/nacos_8848<br>cp -r nacos nacos_cluster/nacos_8849<br></code></pre></td></tr></table></figure><h5 id="3-3分别配置port"><a href="#3-3分别配置port" class="headerlink" title="3.3分别配置port"></a>3.3分别配置port</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd nacos_8847/conf/<br>vim application.properties<br>server.port=8847<br><br><br>cd nacos_8849/conf/<br>vim application.properties<br>server.port=8849<br><br></code></pre></td></tr></table></figure><h5 id="3-4启动"><a href="#3-4启动" class="headerlink" title="3.4启动"></a>3.4启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nacos_cluster/nacos_8849/bin<br>./startup.sh<br></code></pre></td></tr></table></figure><h4 id="4-搭建nginx"><a href="#4-搭建nginx" class="headerlink" title="4.搭建nginx"></a>4.搭建nginx</h4><h5 id="4-1安装C语言环境"><a href="#4-1安装C语言环境" class="headerlink" title="4.1安装C语言环境"></a>4.1安装C语言环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><h5 id="4-2下载nginx"><a href="#4-2下载nginx" class="headerlink" title="4.2下载nginx"></a>4.2下载nginx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -c https://nginx.org/download/nginx-1.12.0.tar.gz<br></code></pre></td></tr></table></figure><h5 id="4-3解压"><a href="#4-3解压" class="headerlink" title="4.3解压"></a>4.3解压</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sheell">tar -zxvf nginx-1.12.0.tar.gz<br></code></pre></td></tr></table></figure><h5 id="4-4配置安装路径"><a href="#4-4配置安装路径" class="headerlink" title="4.4配置安装路径"></a>4.4配置安装路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx<br></code></pre></td></tr></table></figure><h5 id="4-5编译并安装"><a href="#4-5编译并安装" class="headerlink" title="4.5编译并安装"></a>4.5编译并安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h5 id="4-6启动和关闭"><a href="#4-6启动和关闭" class="headerlink" title="4.6启动和关闭"></a>4.6启动和关闭</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">启动：./nginx<br>关闭：./nginx -s stop<br></code></pre></td></tr></table></figure><h4 id="5-配置nginx代理nacos集群"><a href="#5-配置nginx代理nacos集群" class="headerlink" title="5.配置nginx代理nacos集群"></a>5.配置nginx代理nacos集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"> vim /usr/local/nginx/conf/nginx.conf<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">gzip  on;</span><br>    upstream nacosList &#123;<br>                server 47.98.105.36:8847;<br>                server 47.98.105.36:8848;<br>                server 47.98.105.36:8849;<br>                &#125;<br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        #charset koi8-r;<br><br>        #access_log  logs/host.access.log  main;<br><br>        location / &#123;<br>            proxy_pass http://nacosList;<br>        &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意nacosList变量命名规范</span><br></code></pre></td></tr></table></figure><p>启动nginx服务，访问<a href="http://47.98.105.36/nacos/%EF%BC%9Bnginx%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8">http://47.98.105.36/nacos/；nginx会自动分配其中一个进行调用</a></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20221010192857504.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yanml">server:<br>  port: 8090<br>spring:<br>  cloud:<br>    nacos:<br>      discovery:<br>        server-addr: 47.98.105.36 <br>        #47.98.105.36:8848 配置Nginx后即可省略端口号由Nginx进行代理分配<br>        namespace: test #开发环境<br>        group: nacos_group #项目组<br>  application:<br>    name: nacos-provider<br></code></pre></td></tr></table></figure><p>Nacos部署集群后服务地址省略端口号由Nginx进行代理分配</p><h3 id="七、Nacos开机自启动配置"><a href="#七、Nacos开机自启动配置" class="headerlink" title="七、Nacos开机自启动配置*"></a>七、Nacos开机自启动配置*</h3><h4 id="1-编写开机启动文件"><a href="#1-编写开机启动文件" class="headerlink" title="1.编写开机启动文件"></a>1.编写开机启动文件</h4><ul><li>添加nacos.service文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /lib/systemd/system/nacos.service<br></code></pre></td></tr></table></figure><ul><li>文件内容如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=nacos<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/nacos/bin/startup.sh -m standalone<br>ExecReload=/usr/local/nacos/bin/shutdown.sh<br>ExecStop=/usr/local/nacos/bin/shutdown.sh<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h4 id="2-修改nacos的startup-sh"><a href="#2-修改nacos的startup-sh" class="headerlink" title="2.修改nacos的startup.sh"></a>2.修改nacos的startup.sh</h4><ul><li>修改JAVA_HOME路径并注销之后的3行配置，如下：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /usr/local/nacos/bin/start.sh<br><br><span class="hljs-comment">#找到 JAVA_HOME 设置绝对路径</span><br>[ ! -e <span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>/bin/java&quot;</span> ] &amp;&amp; JAVA_HOME=/usr/local/jdk1.8.0_191 <br><span class="hljs-comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/usr/java</span><br><span class="hljs-comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/opt/taobao/java</span><br><span class="hljs-comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; unset JAVA_HOME</span><br></code></pre></td></tr></table></figure><h4 id="3-设置开机启动"><a href="#3-设置开机启动" class="headerlink" title="3.设置开机启动"></a>3.设置开机启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload        <span class="hljs-comment">#重新加载服务配置</span><br>systemctl <span class="hljs-built_in">enable</span> nacos.service   <span class="hljs-comment">#设置为开机启动</span><br>systemctl start nacos.service    <span class="hljs-comment">#启动nacos服务</span><br>systemctl stop nacos.service    <span class="hljs-comment">#停止nacos服务</span><br>systemctl status nacos.service   <span class="hljs-comment">#查询nacos服务状态</span><br></code></pre></td></tr></table></figure><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>Spring Cloud Alibaba</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>Spring Cloud Alibaba</tag>
      
      <tag>Nacos</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud Alibaba</title>
    <link href="/2022/10/07/Spring%20Cloud%20Alibaba/"/>
    <url>/2022/10/07/Spring%20Cloud%20Alibaba/</url>
    
    <content type="html"><![CDATA[<h3 id="一、系统架构演变-微服务"><a href="#一、系统架构演变-微服务" class="headerlink" title="一、系统架构演变-微服务"></a>一、系统架构演变-微服务</h3><p>在<a href="https://i-xiaoxin.github.io/2022/09/21/dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">dubbo微服务基础知识</a> 中阐述了web系统架构从单体架构-&gt;分布式架构-&gt;SOA架构，SOA也是面向服务，但是微服务是进一步演化抽取拆分</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/20220329175414733.png"></p><blockquote><p>微服务架构是一种应用架构类型，其中应用会开发为一系列服务。它提供了独立开发、部署和维护微服务架构图和服务的框架。</p></blockquote><p>微服务架构特征：</p><ul><li><p>面向服务：微服务对外暴露Restful等轻量协议的接口</p></li><li><p>单一职责：微服务拆分粒度更小，做到单一职责</p></li></ul><h3 id="二、Spring-Cloud概述"><a href="#二、Spring-Cloud概述" class="headerlink" title="二、Spring Cloud概述"></a>二、Spring Cloud概述</h3><h4 id="2-1-Spring-Cloud是什么？"><a href="#2-1-Spring-Cloud是什么？" class="headerlink" title="2.1 Spring Cloud是什么？"></a>2.1 Spring Cloud是什么？</h4><p>​Spring Cloud是一系列框架的有序集合如服务发现注册、配置中心、消息总线、负载均衡、熔断器、数据监控等。</p><h4 id="2-2-Spring-Cloud-和-Spring-Boot的关系"><a href="#2-2-Spring-Cloud-和-Spring-Boot的关系" class="headerlink" title="2.2 Spring Cloud 和 Spring Boot的关系"></a>2.2 Spring Cloud 和 Spring Boot的关系</h4><p>Spring boot 是 Spring 的一套<strong>快速配置脚手架</strong>，可以基于spring boot 快速开发单个微服务；</p><p>Spring Cloud是一个基于SpringBoot实现的微服务开发方案；</p><p>Spring boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Springboot，属于依赖的关系。</p><h4 id="2-3-Spring-Cloud-Alibaba是什么？"><a href="#2-3-Spring-Cloud-Alibaba是什么？" class="headerlink" title="2.3 Spring Cloud Alibaba是什么？"></a>2.3 Spring Cloud Alibaba是什么？</h4><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，开发者只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里分布式应用解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><h4 id="2-4-Spring-Boot和Spring-Cloud的版本关系说明"><a href="#2-4-Spring-Boot和Spring-Cloud的版本关系说明" class="headerlink" title="2.4 Spring Boot和Spring Cloud的版本关系说明"></a>2.4 Spring Boot和Spring Cloud的版本关系说明</h4><blockquote><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">Spring Cloud Alibaba 版本适配依赖关系</a></p></blockquote><p>适配 Spring Boot 为 2.4, Spring Cloud Hoxton 版本及以下的 Spring Cloud Alibaba 版本如下表（最新版本用*标记）：</p><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Spring Cloud Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>2.2.9.RELEASE*</td><td>Spring Cloud Hoxton.SR12</td><td>2.3.12.RELEASE</td></tr><tr><td>2.2.8.RELEASE</td><td>Spring Cloud Hoxton.SR12</td><td>2.3.12.RELEASE</td></tr><tr><td>2.2.7.RELEASE</td><td>Spring Cloud Hoxton.SR12</td><td>2.3.12.RELEASE</td></tr><tr><td>2.2.6.RELEASE</td><td>Spring Cloud Hoxton.SR9</td><td>2.3.2.RELEASE</td></tr><tr><td>2.1.4.RELEASE</td><td>Spring Cloud Greenwich.SR6</td><td>2.1.13.RELEASE</td></tr><tr><td>2.2.1.RELEASE</td><td>Spring Cloud Hoxton.SR3</td><td>2.2.5.RELEASE</td></tr><tr><td>2.2.0.RELEASE</td><td>Spring Cloud Hoxton.RELEASE</td><td>2.2.X.RELEASE</td></tr><tr><td>2.1.2.RELEASE</td><td>Spring Cloud Greenwich</td><td>2.1.X.RELEASE</td></tr><tr><td>2.0.4.RELEASE(停止维护，建议升级)</td><td>Spring Cloud Finchley</td><td>2.0.X.RELEASE</td></tr><tr><td>1.5.1.RELEASE(停止维护，建议升级)</td><td>Spring Cloud Edgware</td><td>1.5.X.RELEASE</td></tr></tbody></table><p>Spring Cloud Alibaba 版本及其自身所适配的各组件对应版本如下表所示：</p><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Sentinel Version</th><th>Nacos Version</th><th>RocketMQ Version</th><th>Dubbo Version</th><th>Seata Version</th></tr></thead><tbody><tr><td>2.2.9.RELEASE</td><td>1.8.5</td><td>2.1.0</td><td>4.9.4</td><td>~</td><td>1.5.2</td></tr><tr><td>2021.0.4.0</td><td>1.8.5</td><td>2.0.4</td><td>4.9.4</td><td>~</td><td>1.5.2</td></tr><tr><td>2.2.8.RELEASE</td><td>1.8.4</td><td>2.1.0</td><td>4.9.3</td><td>~</td><td>1.5.1</td></tr><tr><td>2021.0.1.0</td><td>1.8.3</td><td>1.4.2</td><td>4.9.2</td><td>~</td><td>1.4.2</td></tr><tr><td>2.2.7.RELEASE</td><td>1.8.1</td><td>2.0.3</td><td>4.6.1</td><td>2.7.13</td><td>1.3.0</td></tr><tr><td>2.2.6.RELEASE</td><td>1.8.1</td><td>1.4.2</td><td>4.4.0</td><td>2.7.8</td><td>1.3.0</td></tr><tr><td>2021.1 or 2.2.5.RELEASE or 2.1.4.RELEASE or 2.0.4.RELEASE</td><td>1.8.0</td><td>1.4.1</td><td>4.4.0</td><td>2.7.8</td><td>1.3.0</td></tr><tr><td>2.2.3.RELEASE or 2.1.3.RELEASE or 2.0.3.RELEASE</td><td>1.8.0</td><td>1.3.3</td><td>4.4.0</td><td>2.7.8</td><td>1.3.0</td></tr><tr><td>2.2.1.RELEASE or 2.1.2.RELEASE or 2.0.2.RELEASE</td><td>1.7.1</td><td>1.2.1</td><td>4.4.0</td><td>2.7.6</td><td>1.2.0</td></tr><tr><td>2.2.0.RELEASE</td><td>1.7.1</td><td>1.1.4</td><td>4.4.0</td><td>2.7.4.1</td><td>1.0.0</td></tr><tr><td>2.1.1.RELEASE or 2.0.1.RELEASE or 1.5.1.RELEASE</td><td>1.7.0</td><td>1.1.4</td><td>4.4.0</td><td>2.7.3</td><td>0.9.0</td></tr><tr><td>2.1.0.RELEASE or 2.0.0.RELEASE or 1.5.0.RELEASE</td><td>1.6.3</td><td>1.1.1</td><td>4.4.0</td><td>2.7.3</td><td>0.7.1</td></tr></tbody></table><h3 id="三、Spring-Cloud-Alibaba-组件"><a href="#三、Spring-Cloud-Alibaba-组件" class="headerlink" title="三、Spring Cloud Alibaba 组件"></a>三、Spring Cloud Alibaba 组件</h3><p><a href="https://github.com/alibaba/Sentinel">Sentinel</a>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p><a href="https://github.com/alibaba/Nacos">Nacos</a>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p><a href="https://rocketmq.apache.org/">RocketMQ</a>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p><a href="https://github.com/seata/seata">Seata</a>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><p><a href="https://www.aliyun.com/product/oss">Alibaba Cloud OSS</a>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p><a href="https://cn.aliyun.com/aliware/schedulerx">Alibaba Cloud SchedulerX</a>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><p><a href="https://www.aliyun.com/product/sms">Alibaba Cloud SMS</a>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md">[1]Spring Cloud Alibaba-GitHub</a></p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html#_%E4%BB%8B%E7%BB%8D">[2]Spring Cloud Alibaba 参考文档</a></p><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>Spring Cloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>Spring Cloud Alibaba</tag>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Echarts初体验</title>
    <link href="/2022/10/06/Echarts%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2022/10/06/Echarts%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="一、Echarts前言"><a href="#一、Echarts前言" class="headerlink" title="一、Echarts前言"></a>一、Echarts前言</h3><blockquote><p>ECharts 是一个使用 JavaScript 实现的开源可视化库，涵盖各行业图表，满足各种需求。</p><p>ECharts 遵循 Apache-2.0 开源协议，免费商用。</p><p>ECharts，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE9&#x2F;10&#x2F;11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p></blockquote><h3 id="二、获取Apache-ECharts"><a href="#二、获取Apache-ECharts" class="headerlink" title="二、获取Apache ECharts"></a>二、获取Apache ECharts</h3><blockquote><p>Apache ECharts 支持多种下载方式，我们以从 <a href="https://www.jsdelivr.com/package/npm/echarts">jsDelivr</a> CDN 上获取为例，介绍如何快速安装。</p><p>在 <a href="https://www.jsdelivr.com/package/npm/echarts">https://www.jsdelivr.com/package/npm/echarts</a> 选择 <code>dist/echarts.js</code>，点击并保存为 <code>echarts.js</code> 文件。</p></blockquote><h3 id="三、引入-Apache-ECharts"><a href="#三、引入-Apache-ECharts" class="headerlink" title="三、引入 Apache ECharts"></a>三、引入 Apache ECharts</h3><blockquote><p>在<code>static</code>目录下保存 <code>echarts.js</code> 文件并新建一个 <code>index.html</code> 文件，内容如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入刚刚下载的 ECharts 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="四、绘制一个图表"><a href="#四、绘制一个图表" class="headerlink" title="四、绘制一个图表"></a>四、绘制一个图表</h3><blockquote><p>在绘图前我们需要为 ECharts 准备一个定义了高宽的 DOM 容器。在<code>index.html</code> 文件的 <code>&lt;/head&gt;</code> 之后，添加：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>然后就可以通过 <a href="https://echarts.apache.org//api.html#echarts.init">echarts.init</a> 方法初始化一个 echarts 实例并通过 <a href="https://echarts.apache.org//api.html#echartsInstance.setOption">setOption</a> 方法生成一个简单的柱状图，下面是完整代码。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ECharts<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入刚刚下载的 ECharts 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 指定图表的配置项和数据</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> option = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">tooltip</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">legend</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;销量&#x27;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;衬衫&#x27;</span>, <span class="hljs-string">&#x27;羊毛衫&#x27;</span>, <span class="hljs-string">&#x27;雪纺衫&#x27;</span>, <span class="hljs-string">&#x27;裤子&#x27;</span>, <span class="hljs-string">&#x27;高跟鞋&#x27;</span>, <span class="hljs-string">&#x27;袜子&#x27;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">yAxis</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">series</span>: [</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;销量&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="language-javascript">      myChart.<span class="hljs-title function_">setOption</span>(option);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>vue项目中使用示例完整代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;chart&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:600px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getEchartData</span>();</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">getEchartData</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> myChart = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$echarts</span>.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">chart</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$ajax</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/report/getMemberReport&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="language-javascript">          myChart.<span class="hljs-title function_">setOption</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;会员数量&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">tooltip</span>: &#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">legend</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;会员数量&#x27;</span>]</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">data</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">monthList</span> <span class="hljs-comment">//动态数据</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">yAxis</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">series</span>: [&#123;</span><br><span class="language-javascript">              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;会员数量&#x27;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">data</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">memberCount</span></span><br><span class="language-javascript">            &#125;]</span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><script src="//cdn.jsdelivr.net/npm/@waline/client"></script><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Echarts示例<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Echarts-Github<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Echarts</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>logback.xml</title>
    <link href="/2022/09/28/logback%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2022/09/28/logback%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base:-.&#125;/logs/&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Stdout&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志输出编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 按照每天生成日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFile&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/server.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件最大的大小--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MaxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">MaxFileSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--myibatis log configure--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志输出级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Stdout&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFile&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br><br><br>    <span class="hljs-comment">&lt;!--日志异步到数据库 --&gt;</span><br>    <span class="hljs-comment">&lt;!--     &lt;appender name=&quot;DB&quot; class=&quot;ch.qos.logback.classic.db.DBAppender&quot;&gt;</span><br><span class="hljs-comment">            日志异步到数据库</span><br><span class="hljs-comment">            &lt;connectionSource class=&quot;ch.qos.logback.core.db.DriverManagerConnectionSource&quot;&gt;</span><br><span class="hljs-comment">               连接池</span><br><span class="hljs-comment">               &lt;dataSource class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="hljs-comment">                  &lt;driverClass&gt;com.mysql.jdbc.Driver&lt;/driverClass&gt;</span><br><span class="hljs-comment">                  &lt;url&gt;jdbc:mysql://127.0.0.1:3306/databaseName&lt;/url&gt;</span><br><span class="hljs-comment">                  &lt;user&gt;root&lt;/user&gt;</span><br><span class="hljs-comment">                  &lt;password&gt;root&lt;/password&gt;</span><br><span class="hljs-comment">                &lt;/dataSource&gt;</span><br><span class="hljs-comment">            &lt;/connectionSource&gt;</span><br><span class="hljs-comment">      &lt;/appender&gt; --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Logback日志色彩编码"><a href="#Logback日志色彩编码" class="headerlink" title="Logback日志色彩编码"></a>Logback日志色彩编码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">Demo<br><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%red(%d&#123;yyyy-MM-dd HH:mm:ss&#125;) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)<br><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="支持的彩色编码"><a href="#支持的彩色编码" class="headerlink" title="支持的彩色编码"></a>支持的彩色编码</h4><ul><li><div color=black>%black 黑色</div></li><li><div color=red>%red 红色</div></li><li><div color=green>%green 绿色</div></li><li><p>%yellow 黄色</p></li><li><div color=blue>%blue 蓝色</div></li><li><div color=magenta>%magenta 洋红色</div></li><li><div color=cyan>%cyan 青色</div></li><li><p>%white 白色</p></li><li><div color=gray>%gray 灰色</div></li></ul><h4 id="以下为对应加粗的颜色代码"><a href="#以下为对应加粗的颜色代码" class="headerlink" title="以下为对应加粗的颜色代码"></a>以下为对应加粗的颜色代码</h4><ul><li>%boldRed</li><li>%boldGreen</li><li>%boldYellow</li><li>%boldBlue</li><li>%boldMagenta</li><li>%boldCyan</li><li>%boldWhite</li><li>%highlight 高亮色</li></ul><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>Utils</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>马云：未来已来</title>
    <link href="/2022/09/27/%E9%A9%AC%E4%BA%91%EF%BC%9A%E6%9C%AA%E6%9D%A5%E5%B7%B2%E6%9D%A5-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/27/%E9%A9%AC%E4%BA%91%EF%BC%9A%E6%9C%AA%E6%9D%A5%E5%B7%B2%E6%9D%A5-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="马云：未来已来"><a href="#马云：未来已来" class="headerlink" title="马云：未来已来"></a>马云：未来已来</h1><p>这本书是马云 20 年创业经验的总结和思考，很受益。一起来看看成功的企业家是怎么看问题的吧。</p><h2 id="文段摘录"><a href="#文段摘录" class="headerlink" title="文段摘录"></a>文段摘录</h2><h3 id="未来的三十年"><a href="#未来的三十年" class="headerlink" title="未来的三十年"></a>未来的三十年</h3><p>真正冲击传统行业、冲击就业的是<strong>我们昨天的思想，是我们对未来的无知，对未来的恐惧</strong>。所以，我并不觉得今天我们每个人要担心什么，我真正担心的是我们对昨天的依赖。世界的变化远远超过大家的想象，未来 30 年是人类社会天翻地覆的 30 年。</p><p>不是现代的技术冲击了你，而是传统思想、保守思想、昨天的观念冲击了你；不是电子商务冲击了传统商业，而是你不把握未来的思想冲击了你的商业。</p><p>今天，基于大数据、云计算的新的电子商务发展起来了，纯电商时代很快就会结束。未来 10 年、20 年，将没有电子商务这一说法，只有“<strong>新零售</strong>”这一说法，也就是说<strong>线上线下和物流必须结合在一起</strong>，诞生一种新的零售模式。线下的企业必须走到线上去，线上的企业必须走到线下来，线上线下与现代物流结合在一起。物流公司的本质不再是谁比谁做得更快，而是让物流管理得更好，让企业库存降到零。这才是物流的本质。</p><p><strong>新零售、新制造、新金融、新技术、新能源</strong>，这“五个新”，将会冲击很多行业，甚至产生巨大的摧毁性的影响。</p><p>目前我们的大学只传授知识，我认为“教、育、学、习”是不一样的概念，教是传授知识，育是传授文化，学的是知识，习的是智慧。</p><h3 id="长城、贸易和战争"><a href="#长城、贸易和战争" class="headerlink" title="长城、贸易和战争"></a>长城、贸易和战争</h3><p>在阿里巴巴，有一句话：</p><blockquote><p>If not me, then who? If not now, then when？</p></blockquote><p>意思是：如果不是我，那是谁？如果不是现在，那是什么时候？</p><h3 id="DT-时代要让别人更加强大"><a href="#DT-时代要让别人更加强大" class="headerlink" title="DT 时代要让别人更加强大"></a>DT 时代要让别人更加强大</h3><blockquote><p>DT（Data technology）时代，它是<code>以服务大众、激发生产力为主的技术。</code> DT是数据处理技术（Data Technology）的英文缩写。</p></blockquote><p>我觉得，任何事情都要<strong>试着站在未来的角度</strong>来看，而不是仅仅以你今天具备的能力去看。这个世界正在发生很大的变化，我相信，未来 30 年是人类社会最精彩的 30 年，是令人期待的 30 年，也是令人恐惧的 30 年！</p><p>不管你自己有多强大，都要时刻思考怎样让你的员工更强大，让你的客户更强大，让你的合作伙伴更强大，这样整合起来的系统才能拥有更强的竞争力。</p><h3 id="DT-时代是真正的智慧时代"><a href="#DT-时代是真正的智慧时代" class="headerlink" title="DT 时代是真正的智慧时代"></a>DT 时代是真正的智慧时代</h3><p>很多东西我们可能都不懂，但我们尊重“不懂”。很多事情，正因为我们不懂，才让我们好奇，才让我们探索。</p><p>我在网上看到大家说得最多的话就是，BAT 把中国所有的创新、创意、创业的机会拿走了。这让我想起 20 年以前，我怪比尔·盖茨，我怪 IBM，我认为这些公司把我们的机会拿走了。但事实上，这 20 年来，还是有无数的创业者把握住了机会。</p><p>只有我们每个人相信自己所说的，相信自己所认为的，相信自己所做的，我们才会有未来。机会无处不在。从现在往前推 20 年，实际上是互联网技术突飞猛进发展的 20 年，未来的 30 年将是互联网技术融入全社会方方面面的 30 年，这 30 年才真正蕴含着创业的巨大机会。</p><h3 id="当我们谈论-EWTP，我们在谈论全球化"><a href="#当我们谈论-EWTP，我们在谈论全球化" class="headerlink" title="当我们谈论 EWTP，我们在谈论全球化"></a>当我们谈论 EWTP，我们在谈论全球化</h3><blockquote><p>EWTP: Electronic World Trade Platform，世界电子贸易平台。</p></blockquote><p>我认为，对中小企业的制裁无异于对平民的轰炸。我们应该让贸易回到贸易中，贸易本身不应该承担更多的政治因素，应该更多地由企业、由 NGO（非政府组织）去平衡各方的利益，以此来建立一个新的互惠互利的贸易规则。</p><h3 id="一家伟大的公司，必须解决社会问题"><a href="#一家伟大的公司，必须解决社会问题" class="headerlink" title="一家伟大的公司，必须解决社会问题"></a>一家伟大的公司，必须解决社会问题</h3><p><strong>机会在哪里？机会就在有人抱怨的地方</strong>，我这样告诉自己，也告诉年轻人。在中国，当人们抱怨的时候，机会就出现了。处理人们的不满，解决存在的问题，这就是我们的机会。如果你像其他人一样去抱怨，你也就没什么希望了。所以，当我听到别人抱怨时，我就会觉得很兴奋，因为我看到了机会，我会思考自己可以为他们做些什么。</p><p>未来在中国，有很多人想致富。帮助他人致富，然后你可以从中分到一杯羹，这也是一种致富的办法。为什么淘宝、阿里巴巴增长得那么快？我们的理念之一是：<strong>永远不要尝试改变或说服一个成功的人</strong>，要改变或说服那些希望以更容易的方式成功的人。</p><h3 id="70-后带领阿里进入未来十年"><a href="#70-后带领阿里进入未来十年" class="headerlink" title="70 后带领阿里进入未来十年"></a>70 后带领阿里进入未来十年</h3><p>我们坚信：未来 30 年才是互联网技术真正深刻改变社会各方面的时代，云计算、大数据、人工智能、智慧城市、生物工程等将会让无数的梦想成真。这是我们的时代，更是年轻人的时代。</p><h3 id="帮美国的中小企业实现“中国梦”"><a href="#帮美国的中小企业实现“中国梦”" class="headerlink" title="帮美国的中小企业实现“中国梦”"></a>帮美国的中小企业实现“中国梦”</h3><p><strong>改变世界的不仅是技术，更是你相信自己可以改变世界的梦想</strong>。我们知道这条路漫长且不易。我以前说过，过去 20 年在中国做互联网生意很不容易。今天很困难，明天更困难，后天很美好。但是，如果不努力的话，绝大多数人会死在明天晚上。</p><h3 id="1-亿个就业机会，1000-万家企业，20-亿消费者"><a href="#1-亿个就业机会，1000-万家企业，20-亿消费者" class="headerlink" title="1 亿个就业机会，1000 万家企业，20 亿消费者"></a>1 亿个就业机会，1000 万家企业，20 亿消费者</h3><p>阿里坚持做<strong>平台</strong>，我们的电子商务服务是一个平台，我们自己不买，也不卖，我们自己更不送。但是，我们希望所有的客户因为我们的努力，买东西的价格更便宜，卖东西的效率更高，送东西的速度更快。这才是我们希望做的电子商务平台。</p><p>我们知道，在整个互联网金融中，最重要的是数据，是信用体系。我们希望 10 年以后的中小企业，再也不会因为贷不到款而陷于困顿。我们这几年的努力，就是为了<strong>建立一个基于信用和大数据的互联网金融体系</strong>，为未来中国乃至全世界的中小企业服务。</p><p>绝大部分创业公司初期的员工都是很差的。因为没有人相信这些公司，顶尖高手不可能加入初创公司。一般来说，初创公司会有一两个人是优秀的，绝大部分都是资质平平。所以，不要相信那些神话，优秀的人才不是招来的，是自己培养、训练出来的。任何一家公司的优秀人才，都是要起早贪黑，都是要早上天不亮就去上班，深更半夜才回来，都是要挤公共汽车，都是要挤地铁的。年轻人都是这么炼出来的。</p><p>无论是在昨天的阿里、今天的阿里，还是在未来的阿里，我们都是要走这条路的。每个人都必须这么辛苦，因为我们的未来是辛苦打拼出来的，因为我们不是含着金钥匙出生的。我们的员工，没有人有资格含着金钥匙而来。即使是生在富豪家里，你也得辛苦打拼，更何况我们并不是。</p><p>我们希望负责集团运营的一线总裁们都是 70 年代出生的，主力部队是 80 年代和 90 年代出生的人。我们严格训练他们，让他们起早，让他们贪黑，让他们快乐，让他们成长，让他们有钱买得起房子、买得起车，让他们永远能够找到最好的女朋友和男朋友，这是我们希望的。</p><h3 id="没有-KPI-考核，理想就变成空想"><a href="#没有-KPI-考核，理想就变成空想" class="headerlink" title="没有 KPI 考核，理想就变成空想"></a>没有 KPI 考核，理想就变成空想</h3><p>想要走得快，那就一个人走；想要走得远，那就一群人一起走。要一群人一起走，就一定要有组织。</p><h3 id="机会就在被抱怨的地方"><a href="#机会就在被抱怨的地方" class="headerlink" title="机会就在被抱怨的地方"></a>机会就在被抱怨的地方</h3><p>如今的世界，无处不充满着抱怨。微软、IBM、思科分据市场时，20 多岁的我也抱怨过它们巨大的市场占有率。现在，我不再埋怨，因为我们也长成了巨人。我要说的是：大部分人都在抱怨的地方，也是机会所在的地方。这是我笃信的一点。</p><h3 id="企业家要思考十年之后的事"><a href="#企业家要思考十年之后的事" class="headerlink" title="企业家要思考十年之后的事"></a>企业家要思考十年之后的事</h3><p>做企业，更关键的一点是：一定要思考 10 年以后的事情。今天开始做，明天就会赢的事情已经不多了。只有<strong>从实际出发，对未来进行预测</strong>，我们才有机会。</p><p><strong>要有战略，战略是基于对未来的判断，战略从愿景来，愿景从使命来</strong>。所以，使命、愿景、战略、组织、文化、人才这一整套体系的建设都要完善和强大，你才有可能做好。</p><p>要走得久，还需要有组织。要建立强大的组织，建立一种组织文化，因为只有强大的组织和文化才能吸引优秀的人才。文化强，则企业强。</p><h3 id="创新应当成为企业家的事业"><a href="#创新应当成为企业家的事业" class="headerlink" title="创新应当成为企业家的事业"></a>创新应当成为企业家的事业</h3><p>现在这个时代，也是一个真正的商业变革的时代。商业变革，有的人把它看作机会，有的人把它当作灾难。其实，机会在没有形成的时候，才是真正的机会，一旦机会形成，往往就是灾难的开始。</p><h3 id="大数据要赋予技术以灵魂"><a href="#大数据要赋予技术以灵魂" class="headerlink" title="大数据要赋予技术以灵魂"></a>大数据要赋予技术以灵魂</h3><p>让技术富有生命力，让数据带有灵魂，让数据为社会的发展注入正能量——这就是我们朴素、简单的初衷。所以，我们想也没想，一路投资，最后我们成功突围。<strong>正因为我不懂技术，所以才特别尊重技术、敬畏技术</strong>。</p><p>阿里巴巴为什么能活着？其实，阿里巴巴这家公司有一个很重要的出发点，就是我们一直在<strong>思考</strong>，<strong>是为了今天活着，还是为了未来活着</strong>？</p><p>今天做明天就会成功的事情一定轮不到我们，今年做明年就会发财的事情也肯定轮不到我们。<strong>我们只能做今年做十年以后可能成功的事情</strong>。<strong>从这一点出发，今天开始准备，然后努力十年</strong>。十年以后，如果这件事情真的发生了，那么你的机会就来了。所以，分析、预判未来是阿里巴巴这家公司和我们这些人要做的事情。</p><p>习惯于被安排好人生的人，不可能会成功。</p><p>美国的商业环境非常好，沃尔玛的超市几乎遍布三、四线城市，所以电子商务很难插进去，只是零售业的补充。中国的超市、商场不太好，所以给电子商务带来了发展空间。<strong>有时候，昨天的长就是今天的短</strong>。今天，大家终于站在同一起跑线上，所以我们希望在大数据时代能够超越美国。</p><h3 id="明天开始，生活将是我的工作"><a href="#明天开始，生活将是我的工作" class="headerlink" title="明天开始，生活将是我的工作"></a>明天开始，生活将是我的工作</h3><p>当所有人不相信这个世界、所有人不相信未来、所有人不相信别人的时候，我们选择了相信，我们选择了相信 10 年以后的中国会更好，我们选择了相信我们的同事会比我们做得更好，中国的年轻人会比我们做得更好。</p><p>今天，还有不少年轻人觉得，像谷歌、百度、腾讯、阿里这样的公司占据了所有的机会。10 年以前，当我们看到许多伟大的公司时，我们也曾经为此迷惘，问自己是否还有机会。10 年的坚持、执着，让我们走到了今天。假如这不是一个变化的时代，年轻人就没有机会。</p><p>很多人讨厌变化，但是正因为我们把握住了变化，我们才看到了未来。未来 30 年，这个世界、这个中国，将会有更多的变化，这种变化对每个人来说都是一个机会。我们没有办法改变昨天，但是 30 年后的今天，是我们今天这帮人决定的。改变自己，从点滴做起，坚持 10 年！</p><p>谁也没把握让你红五年，谁也不能断言你不会败、你不会老、你不会糊涂。想要不败、不老、不糊涂的唯一办法就是相信年轻人，相信他们，就是相信未来。</p><h3 id="少一些抱怨，多一些坚持"><a href="#少一些抱怨，多一些坚持" class="headerlink" title="少一些抱怨，多一些坚持"></a>少一些抱怨，多一些坚持</h3><p>我想跟大家分享的是，如果你去创业，就要<strong>多花点时间去思考别人为什么失败</strong>，不要去琢磨别人为什么成功。<strong>成功有很多原因，但往往不可复制，而失败恰恰是你可以不去重复的</strong>。</p><p>全世界的创业者都有一本苦难的经，大有大的难处，小有小的痛苦，但是要保持良好的心态。有人讲马云很有智慧。哪来的智慧？智慧的人肯定都是倒过霉的人。所有被人们认识的智慧者，都是经受过巨大的生理、心理痛苦的人！</p><p>我有些心得想分享给所有年轻人：</p><ul><li>第一，要乐观地看待未来；</li><li>第二，少一些抱怨，认真检查自己的问题；</li><li>第三，要有超越常人的坚持。</li></ul><p>没有这些素质，你是走不远的。</p><h3 id="多学一点别人怎么失败"><a href="#多学一点别人怎么失败" class="headerlink" title="多学一点别人怎么失败"></a>多学一点别人怎么失败</h3><p>我们不要“晚上想想千条路，早上起来走原路”。很多年轻人，晚上想要做这做那，早上起来就骑车上班去了。我觉得，改变要从现在开始，行动是一切改变的源泉。</p><p>你今天创业，要思考 10 年后会发生什么事，要问自己为 10 年后的社会解决什么问题。如果你想今天创业明天就成功，那这个机会一定不会属于你。凭什么你今天做明天就成功？如果你想今天做，10 年后成功，那你就要多把握、多思考这样的机会。</p><h3 id="做企业就像打仗"><a href="#做企业就像打仗" class="headerlink" title="做企业就像打仗"></a>做企业就像打仗</h3><p>少听别人说，自己去思考，找一些志同道合的人，给自己一个决心，坚持五年、十年，一定要把它做出来。</p><p>10 多年来，我晚上经常想，不干了，没意思，但早上起来还是继续坚持。成功其实就是再坚持一会儿。有时候，大家都反对的事情，说不定是机会；大家都说对的事情，反而要很小心。大家都认为很容易的事情，拷贝得也快；只有大家都觉得不太靠谱的事情，我才觉得有戏。怕竞争，就别做企业；畏难，怕被人骂，就别创业。</p><h3 id="没有人看过我流泪，因为我没有时间流泪"><a href="#没有人看过我流泪，因为我没有时间流泪" class="headerlink" title="没有人看过我流泪，因为我没有时间流泪"></a>没有人看过我流泪，因为我没有时间流泪</h3><p>我不太相信这个世界上有特别了不起的人，我们都是很平凡的人。我只是看到了一个机会，想到了一些东西，然后坚持做而已。我能想得比较远，是因为近的机会都不是我们的，我们只能想得远；如果跑得慢，就更没有机会了，所以只能跑得快。</p><p>以后，如果大家有了孩子，你的孩子真不会读书，那就锻炼他的情商，让他的情商高一点，情商高的人也有机会；让他有团队意识，懂得感恩、懂得敬畏。</p><h3 id="解决好这-7000-万人的问题，中国将诞生更多企业家"><a href="#解决好这-7000-万人的问题，中国将诞生更多企业家" class="headerlink" title="解决好这 7000 万人的问题，中国将诞生更多企业家"></a>解决好这 7000 万人的问题，中国将诞生更多企业家</h3><p>在我看来，孩子不一定只有读书这一条路，不善于读书的孩子不一定就没有未来。我就是一个不会读书的人。不会读书没关系，但一定要会玩，你可以体育很好、音乐很好，或者美术很好，这些都是使人自信的能力。</p><p>什么是机会？机会就是解决麻烦。哪里有抱怨，哪里就有机会。只要去解决这些困难，解决这些抱怨，就有机会。</p><h3 id="消灭阿里容易，消灭假货难"><a href="#消灭阿里容易，消灭假货难" class="headerlink" title="消灭阿里容易，消灭假货难"></a>消灭阿里容易，消灭假货难</h3><p>消灭阿里巴巴容易，消灭假货难。如果把天猫、淘宝关了，中国从此无假货，那我们马上就关。问题是关了没用。麻婆照镜子，把镜子摔了，麻子一样还在脸上。<strong>互联网就是中国社会的一面镜子，淘宝就是“中国制造”的一面镜子</strong>。</p><h3 id="浙商应当坚守“四个不”"><a href="#浙商应当坚守“四个不”" class="headerlink" title="浙商应当坚守“四个不”"></a>浙商应当坚守“四个不”</h3><p>中国很多好的企业都不是说等出了某一个文件才去做的。事实上，一旦中央下发文件说要发展某个产业，你进去后死的概率反而是 90%。因为千军万马过独木桥，你一定会死，所以企业家的眼光判断是极其关键的。</p><p>办法是要想出来的。因为你把门堵住了，员工就会想尽一切办法在技术上完善，在产品上完善，在制度上创新，否则他们做起来就很简单，加人、加原材料就是了，可那就乱套了。</p><p>今天，大家思考一下，如果你在十年以前，什么事情今天做会不一样？同样的道理，你站在十年以后思考现在，我这家企业必须做什么事情，十年以后才有机会？你越不知道明年怎么过的时候，越要思考五年以后、十年以后。</p><h3 id="公益的本质是唤醒善良"><a href="#公益的本质是唤醒善良" class="headerlink" title="公益的本质是唤醒善良"></a>公益的本质是唤醒善良</h3><p>公益需要钱，但光有钱是远远不够的。因为公益和慈善还是有点差异的，慈善在于给予，而公益在于参与，在于点点滴滴的行动。慈善可能以给钱为主，而公益需要你花出的是时间、激情、智慧以及所有你可能拿不出来的东西。你未必有能力去做慈善，但我们每个人都应该可以去做公益，参与公益。</p><p>人们经常在问，人之初性本善，还是人之初性本恶？我一直觉得，从太极哲学来讲，人刚出生的时候，是 50% 的善和 50% 的恶合在一起，是教育、是文化、是信仰把我们的善累积了起来，使善超过了恶。但是，由于世界上各种各样的原因，恶的东西、坏的东西往往会淹没我们的善良。所以，我们需要擦洗我们自己的良心，擦洗我们自己的善心，而唤醒我们擦洗自己善心的最好方法，就是参与点点滴滴的公益行动。</p><h3 id="做乡村教师的代言人"><a href="#做乡村教师的代言人" class="headerlink" title="做乡村教师的代言人"></a>做乡村教师的代言人</h3><p>我一直觉得做慈善是隐私，是自己的事；而做公益最主要的目的是唤醒人们的良知，让人们都来参与。所以，我觉得要低调慈善，高调公益。</p><p>相信，人只要有学习能力，获取知识只是个时间问题。所以，我希望我们的乡村教师能够在“育”方面多下功夫。</p><h3 id="中国的“教”和“育”"><a href="#中国的“教”和“育”" class="headerlink" title="中国的“教”和“育”"></a>中国的“教”和“育”</h3><p>人之初性本善，还是人之初性本恶？我想人生下来，可能一半是好的，一半是坏的。但是，因为有了教育，人身上好的这一面不断地被唤醒，不断地被扩大，而坏的东西被遏制。把人的善意、智慧唤醒，这是老师的工作。在我们的人生中，对我们影响最大的人，除了父母之外，可能就是老师了。</p><p>数学很重要，语文也很重要，但仅仅学习这些是不够的。要让一个孩子真正成为一个人，而不是学习的机器，一定要让他学好音乐、体育、美术这些可以丰富、表达我们情感的东西。</p><h3 id="北京对话扎克伯格"><a href="#北京对话扎克伯格" class="headerlink" title="北京对话扎克伯格"></a>北京对话扎克伯格</h3><p>很多人都感到非常担忧，说机器已经打败了人类，那人类到底该怎么办？我认为，从电脑被发明出来的第一天起，人类就应该意识到：如果人类想跟电脑竞争谁更聪明，那么人类就该放弃。我认为机器会变得越来越强大，机器会比人类更精于计算，但是机器永远不会像人类那样有智慧。</p><p>知识让人聪明，聪明的人知道自己需要什么；经历挫折让人更具智慧，智慧的人才知道什么时候去放弃。从 IT 时代到 DT 时代，IT 让人更像机器，DT 让机器更像人。我们已然进入一个新世界，必须在未来 30 年里充满智慧地放弃一些东西，不然我们会有麻烦。</p><p>创业者应该关注自己能解决什么问题，而不是想着怎么去开办一家公司。</p><h3 id="旧金山对话硅谷精英"><a href="#旧金山对话硅谷精英" class="headerlink" title="旧金山对话硅谷精英"></a>旧金山对话硅谷精英</h3><p>这个世界在变化，如果你毫无行动，那么这个变化将跟你毫无关系；反之，你就能成为这个变化的受益者。</p><p>阿里巴巴这家公司最悲剧的一点是 CEO 完全不懂技术，最幸运的地方也是 CEO 不懂技术。因为不懂技术，所以我信任员工，信任工程师。<strong>外行是可以领导内行的，关键在于要学会尊重内行</strong>。</p><p>巴菲特是靠钱成功，我们是靠人、靠组织、靠互联网成功，在完全不同的领域，有不同的玩法。你跟乔丹打篮球，一点意思都没有，要跟他下围棋。</p><h3 id="亚布力对话商界精英"><a href="#亚布力对话商界精英" class="headerlink" title="亚布力对话商界精英"></a>亚布力对话商界精英</h3><p>有时候，我们以为自己知道很多东西，以为自己懂，如果对未来没有敬畏之心，对昨天没有感恩之情，那么我们可能会永远跌跌撞撞、磕磕绊绊。</p><p>我们要<strong>忘掉短期</strong>，如果你做企业是为了明年，为了下个季度，那你只是个职业经理人，职业经理人考虑的是下个季度的事情。做企业要考虑的是 5 年、10 年、20 年的事情。如果从 20 年的角度来讲，经济有几个轮回。</p><p>我对未来是充满信心的，但对今天、明天，我胆小谨慎，如履薄冰。今天很残酷，明天更残酷，后天很美好，但是绝大部分人死在明天晚上，见不到后天的太阳。相信这一点，你就会走出去。</p><p>一个董事会必须有 30 年、50 年的思考，一个 CEO 必须有 5 ～ 10 年的思考，一个副总裁必须有 3 年的思考，一个经理必须对未来一周有思考，一个员工必须对明天有思考，这是一个体系。</p><h3 id="达沃斯对话查理·罗斯"><a href="#达沃斯对话查理·罗斯" class="headerlink" title="达沃斯对话查理·罗斯"></a>达沃斯对话查理·罗斯</h3><p>我不认为世界上有很多人被拒绝过 30 次。我所有的只是坚持，像阿甘一样，我不抱怨，无论成功还是失败。如果一个人失败后老是抱怨别人，那么这个人永远不会成功；如果他一直反省自己，那么他就有希望。</p><div>    <a target="_blank" href="https://github.com/yanglbme/reading/blob/main/docs/other/2019-07-28.md">       转载from<img src="https://img.shields.io/badge/yanglbme-%E9%A9%AC%E4%BA%91%EF%BC%9A%E6%9C%AA%E6%9D%A5%E5%B7%B2%E6%9D%A5-brightgreen?logo=github" />    </a></div>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Read</tag>
      
      <tag>Book</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql日期类时间格式化详解</title>
    <link href="/2022/09/27/Mysql%E6%97%A5%E6%9C%9F%E7%B1%BB%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/09/27/Mysql%E6%97%A5%E6%9C%9F%E7%B1%BB%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL时间格式化函数date-format-用法详解"><a href="#MySQL时间格式化函数date-format-用法详解" class="headerlink" title="MySQL时间格式化函数date_format()用法详解"></a>MySQL时间格式化函数date_format()用法详解</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">DATE_FORMAT(<span class="hljs-type">date</span>,format)<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><p><em><code>date</code></em></p><p>  必需的。需要格式化的日期。</p></li><li><p><em><code>format</code></em></p><p>  必需的。格式化模式字符串。</p></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p><code>DATE_FORMAT()</code> 函数按照指定的格式格式化日期时间并返回格式化后的字符串。</p><p>如果其中任何一个参数为 <code>NULL</code>，<code>DATE_FORMAT()</code> 函数将返回 <code>NULL</code>。</p><h3 id="DATE-FORMAT-示例"><a href="#DATE-FORMAT-示例" class="headerlink" title="DATE_FORMAT() 示例"></a><code>DATE_FORMAT()</code> 示例</h3><h4 id="示例-1-格式化日期"><a href="#示例-1-格式化日期" class="headerlink" title="示例 1: 格式化日期"></a>示例 1: 格式化日期</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-28&#x27;</span>, <span class="hljs-string">&#x27;%Y&#x27;</span>),<br>    DATE_FORMAT(<span class="hljs-string">&#x27;2014-02-28&#x27;</span>, <span class="hljs-string">&#x27;%W&#x27;</span>),<br>    DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-01&#x27;</span>, <span class="hljs-string">&#x27;%M %d, %Y&#x27;</span>),<br>    DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-01&#x27;</span>, <span class="hljs-string">&#x27;%M %e %Y&#x27;</span>),<br>    DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-28&#x27;</span>, <span class="hljs-string">&#x27;%W, %M %e, %Y&#x27;</span>),<br>    <br># 输出结果<br> DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-28&#x27;</span>, <span class="hljs-string">&#x27;%Y&#x27;</span>): <span class="hljs-number">2022</span><br> DATE_FORMAT(<span class="hljs-string">&#x27;2014-02-28&#x27;</span>, <span class="hljs-string">&#x27;%W&#x27;</span>): Friday<br> DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-01&#x27;</span>, <span class="hljs-string">&#x27;%M %d, %Y&#x27;</span>): February <span class="hljs-number">01</span>, <span class="hljs-number">2022</span><br> DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-01&#x27;</span>, <span class="hljs-string">&#x27;%M %e %Y&#x27;</span>): February <span class="hljs-number">1</span> <span class="hljs-number">2022</span><br> DATE_FORMAT(<span class="hljs-string">&#x27;2022-02-28&#x27;</span>, <span class="hljs-string">&#x27;%W, %M %e, %Y&#x27;</span>): Monday, February <span class="hljs-number">28</span>, <span class="hljs-number">2022</span><br></code></pre></td></tr></table></figure><h4 id="示例-2-格式化日期和时间"><a href="#示例-2-格式化日期和时间" class="headerlink" title="示例 2: 格式化日期和时间"></a>示例 2: 格式化日期和时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> NOW(), DATE_FORMAT(NOW(), <span class="hljs-string">&#x27;%Y%m%d%H%i%S&#x27;</span>),<br><br># 输出结果<br>NOW(): <span class="hljs-number">2022</span><span class="hljs-number">-04</span><span class="hljs-number">-12</span> <span class="hljs-number">03</span>:<span class="hljs-number">18</span>:<span class="hljs-number">38</span><br>DATE_FORMAT(NOW(), <span class="hljs-string">&#x27;%Y%m%d%H%i%S&#x27;</span>): <span class="hljs-number">20220412031838</span><br></code></pre></td></tr></table></figure><h3 id="参数符号"><a href="#参数符号" class="headerlink" title="参数符号"></a>参数符号</h3><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>%a</code></td><td>星期的缩写 (<code>Sun</code>..<code>Sat</code>)</td></tr><tr><td><code>%b</code></td><td>月份的缩写 (<code>Jan</code>..<code>Dec</code>)</td></tr><tr><td><code>%c</code></td><td>月份数字 (<code>0</code>..<code>12</code>)</td></tr><tr><td><code>%D</code></td><td>带有英语前缀的月份中的每天 (<code>0th</code>, <code>1st</code>, <code>2nd</code>, <code>3rd</code>, …)</td></tr><tr><td><code>%d</code></td><td>月份中的每天的两位数字表示 (<code>00</code>..<code>31</code>)</td></tr><tr><td><code>%e</code></td><td>月份中的每天的数字表示 (<code>0</code>..<code>31</code>)</td></tr><tr><td><code>%f</code></td><td>微秒 (<code>000000</code>..<code>999999</code>)</td></tr><tr><td><code>%H</code></td><td>小时 (<code>00</code>..<code>23</code>)</td></tr><tr><td><code>%h</code></td><td>小时 (<code>01</code>..<code>12</code>)</td></tr><tr><td><code>%I</code></td><td>小时 (<code>01</code>..<code>12</code>)</td></tr><tr><td><code>%i</code></td><td>分钟 (<code>00</code>..<code>59</code>)</td></tr><tr><td><code>%j</code></td><td>一年中的每天 (<code>001</code>..<code>366</code>)</td></tr><tr><td><code>%k</code></td><td>小时 (<code>0</code>..<code>23</code>)</td></tr><tr><td><code>%l</code></td><td>小时 (<code>1</code>..<code>12</code>)</td></tr><tr><td><code>%M</code></td><td>月份名称 (<code>January</code>..<code>December</code>)</td></tr><tr><td><code>%m</code></td><td>两位数字月份 (<code>00</code>..<code>12</code>)</td></tr><tr><td><code>%p</code></td><td><code>AM</code> 或者 <code>PM</code></td></tr><tr><td><code>%r</code></td><td>十二小时制时间 (<em><code>hh:mm:ss</code></em> 后跟 <code>AM</code> 或 <code>PM</code>)</td></tr><tr><td><code>%S</code></td><td>秒 (<code>00</code>..<code>59</code>)</td></tr><tr><td><code>%s</code></td><td>秒 (<code>00</code>..<code>59</code>)</td></tr><tr><td><code>%T</code></td><td>二十四小时制时间 (<em><code>hh:mm:ss</code></em>)</td></tr><tr><td><code>%U</code></td><td>一年中的星期 (<code>00</code>..<code>53</code>), 每周的开始是星期天; <a href="https://www.sjkjc.com/mysql-ref/week/"><code>WEEK()</code></a> 函数中的 mode 0</td></tr><tr><td><code>%u</code></td><td>一年中的星期 (<code>00</code>..<code>53</code>), 每周的开始是星期一; <a href="https://www.sjkjc.com/mysql-ref/week/"><code>WEEK()</code></a> 函数中的 mode 1</td></tr><tr><td><code>%V</code></td><td>一年中的星期 (<code>01</code>..<code>53</code>), 每周的开始是星期天; <a href="https://www.sjkjc.com/mysql-ref/week/"><code>WEEK()</code></a> 函数中的 mode 2, 用于 <code>%X</code></td></tr><tr><td><code>%v</code></td><td>一年中的星期 (<code>01</code>..<code>53</code>), 每周的开始是星期一; <a href="https://www.sjkjc.com/mysql-ref/week/"><code>WEEK()</code></a> 函数中的 mode 3, 用于 <code>%x</code></td></tr><tr><td><code>%W</code></td><td>星期的名称 (<code>Sunday</code>..<code>Saturday</code>)</td></tr><tr><td><code>%w</code></td><td>星期中的每天 (<code>0</code>&#x3D;星期天..<code>6</code>&#x3D;星期六)</td></tr><tr><td><code>%X</code></td><td>一年中的星期，每周的开始是星期天，四位数字，用于 <code>%V</code></td></tr><tr><td><code>%x</code></td><td>一年中的星期，每周的开始是星期一，四位数字，用于 <code>%v</code></td></tr><tr><td><code>%Y</code></td><td>四位数字年份</td></tr><tr><td><code>%y</code></td><td>两位数字年份</td></tr><tr><td><code>%%</code></td><td>转义 <code>%</code></td></tr><tr><td><code>%x</code></td><td><em><code>x</code></em>, 上面为列举的其他字符</td></tr></tbody></table><p>1.<a href="https://www.runoob.com/sql/sql-dates.html">菜鸟SQL教程参考</a></p><p>2.<a href="https://www.sjkjc.com/mysql-ref/date_format/">MySQL 教程DATE_FORMAT() 函数参考</a></p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>Date_format</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql之count()、count(1)、count(列名)区别</title>
    <link href="/2022/09/27/Mysql%E4%B9%8Bcount()%E3%80%81count(1)%E3%80%81count(%E5%88%97%E5%90%8D)%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/09/27/Mysql%E4%B9%8Bcount()%E3%80%81count(1)%E3%80%81count(%E5%88%97%E5%90%8D)%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>count(*)包括了所有的列，相当于行数，在统计结果的时候，<code>不会忽略列值为NULL</code></p><p>count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，<code>不会忽略列值为NULL</code></p><p>count(列名)只包括列名那一列，在统计结果的时候，<code>会忽略列值为空</code>（空字符串&#x2F;0&#x2F;null）的计数，即某个字段值为NULL时，不统计。</p><blockquote><p>count(1)，其实就是计算一共有多少符合条件的行。</p><p>1并不是表示第一个字段，而是表示一个固定值。其实就可以想成表中有这么一个字段，这个字段就是固定值1，count(1)，就是计算一共有多少个1。</p></blockquote><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p class="note note-success">    <b>count(column)</b>也是会遍历整张表，但是不同的是它会拿到 column 的值以后判断是否为空，然后再进行累加，那么如果针对主键需要解析内容，如果是二级索引需要再次根据主键获取内容，则要多一次 IO 操作，所以 <b>count(column)</b>的性能肯定不如前两者，如果按照效率比较的话：<b>count(*)=count(1)>count(primary key)>count(非主键column)</b>。</p><h3 id="count-1-and-count"><a href="#count-1-and-count" class="headerlink" title="count(1) and count(*)"></a>count(1) and count(*)</h3><p>当表的数据量大些时，对表作分析之后，使用count(1)还要比使用count()用时多了！从执行计划来看，count(1)和count()的效果是一样的。但是在表做过分析之后，count(1)会比count(<em>)的用时少些（1w以内数据量），不过差不了多少。<br>如果count(1)是聚索引,id,那肯定是count(1)快。但是差的很小的。因为count(),自动会优化指定到那一个字段。所以没必要去count(1)，用count()，sql会帮你完成优化的 因此：count(1)和count(</em>)基本没有差别！</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> counttest(name <span class="hljs-type">char</span>(<span class="hljs-number">1</span>), age <span class="hljs-type">char</span>(<span class="hljs-number">2</span>));<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.03</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> counttest <span class="hljs-keyword">values</span><br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;14&#x27;</span>),(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;15&#x27;</span>), (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;15&#x27;</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">NULL</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;16&#x27;</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;17&#x27;</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-keyword">null</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>Query OK, <span class="hljs-number">8</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br>Records: <span class="hljs-number">8</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> counttest;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+</span><br><span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> age  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+</span><br><span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span> <span class="hljs-number">14</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span> <span class="hljs-number">15</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span> <span class="hljs-number">15</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> b    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> b    <span class="hljs-operator">|</span> <span class="hljs-number">16</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> c    <span class="hljs-operator">|</span> <span class="hljs-number">17</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> d    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> e    <span class="hljs-operator">|</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+</span><br><span class="hljs-number">8</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> name, <span class="hljs-built_in">count</span>(name), <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>), <span class="hljs-built_in">count</span>(age), <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(age))<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">from</span> counttest<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> name;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+-------------+----------+----------+------------+----------------------+</span><br><span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(name) <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(age) <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span>(age)) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+-------------+----------+----------+------------+----------------------+</span><br><span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span>           <span class="hljs-number">3</span> <span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span>          <span class="hljs-number">3</span> <span class="hljs-operator">|</span>                    <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> b    <span class="hljs-operator">|</span>           <span class="hljs-number">2</span> <span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span>          <span class="hljs-number">1</span> <span class="hljs-operator">|</span>                    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> c    <span class="hljs-operator">|</span>           <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span>          <span class="hljs-number">1</span> <span class="hljs-operator">|</span>                    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> d    <span class="hljs-operator">|</span>           <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span>          <span class="hljs-number">0</span> <span class="hljs-operator">|</span>                    <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> e    <span class="hljs-operator">|</span>           <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span>          <span class="hljs-number">1</span> <span class="hljs-operator">|</span>                    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+-------------+----------+----------+------------+----------------------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<span class="hljs-keyword">COPY</span><br><br></code></pre></td></tr></table></figure><p>1<a href="https://blog.csdn.net/iFuMI/article/details/77920767">参考1</a></p><p>2<a href="https://zhidao.baidu.com/question/1244677039964272939">参考2</a></p><p>3<a href="https://www.ikeguang.com/article/713">参考3</a></p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基础知识</title>
    <link href="/2022/09/26/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/09/26/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis基础知识"><a href="#Redis基础知识" class="headerlink" title="Redis基础知识"></a>Redis基础知识</h1><div align="center">     <a title="Github Total Stars" target="_blank" href="https://i-xiaoxin.github.io">        <img src="https://img.shields.io/github/stars/i-xiaoxin/i-xiaoxin.github.io?affiliations=OWNER&color=success&logo=github&style=plastic" />    </a>    <a title="Github Followers" target="_blank" href="https://i-xiaoxin.github.io">        <img src="https://img.shields.io/github/followers/i-xiaoxin?color=success&logo=github&style=plastic" />    </a>    <a title="Target " target="_blank" href="https://i-xiaoxin.github.io">        <img src="https://img.shields.io/github/languages/top/i-xiaoxin/i-xiaoxin.github.io?color=success&label=java&logo=github&style=plastic" />    </a></div><h2 id="1-Redis-简介"><a href="#1-Redis-简介" class="headerlink" title="1. Redis 简介"></a>1. Redis 简介</h2><p>◆ Redis 简介（NoSQL概念、Redis概念）</p><p>◆ Redis 的下载与安装</p><p>◆ Redis 的基本操作</p><h3 id="1-1-NoSQL概念"><a href="#1-1-NoSQL概念" class="headerlink" title="1.1 NoSQL概念"></a>1.1 NoSQL概念</h3><h4 id="1-1-1-问题现象"><a href="#1-1-1-问题现象" class="headerlink" title="1.1.1 问题现象"></a>1.1.1 问题现象</h4><p>在讲解NoSQL的概念之前呢，我们先来看一个现象：</p><p>（1）问题现象</p><p>每年到了过年期间，大家都会自觉自发的组织一场活动，叫做春运！以前我们买票都是到火车站排队，后来呢有了12306，有了他以后就更方便了，我们可以在网上买票，但是带来的问题，大家也很清楚，春节期间买票进不去，进去了刷不着票。什么原因呢，人太多了！</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/12306-%E6%B7%98%E5%AE%9D.png"></p><p>除了这种做铁路的，它系统做的不专业以外，还有马爸爸做的淘宝，它面临一样的问题。淘宝也崩，也是用户量太大！作为我们整个电商界的东哥来说，他第一次做图书促销的时候，也遇到了服务器崩掉的这样一个现象，原因同样是因为用户量太大！<img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E4%BA%AC%E4%B8%9C%E7%BF%BB%E8%BD%A6%E6%A1%88.png"></p><p>（2）现象特征</p><p>再来看这几个现象，有两个非常相似的特征：</p><p>第一，用户比较多，海量用户</p><p>第二，高并发</p><p>这两个现象出现以后，对应的就会造成我们的服务器瘫痪。核心本质是什么呢？其实并不是我们的应用服务器，而是我们的关系型数据库。关系型数据库才是最终的罪魁祸首！</p><p>（3）造成原因</p><p>什么样的原因导致的整个系统崩掉的呢：</p><p>1.性能瓶颈：磁盘IO性能低下</p><p>关系型数据库菜存取数据的时候和读取数据的时候他要走磁盘IO。磁盘这个性能本身是比较低的。</p><p>2.扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</p><p>我们说关系型数据库，它里面表与表之间的关系非常复杂，不知道大家能不能想象一点，就是一张表，通过它的外键关联了七八张表，这七八张表又通过她的外件，每张又关联了四五张表。你想想，查询一下，你要想拿到数据，你就要从A到B、B到C、C到D的一直这么关联下去，最终非常影响查询的效率。同时，你想扩展下，也很难!</p><p>（4）解决思路</p><p>面对这样的现象，我们要想解决怎么版呢。两方面：</p><p>一，降低磁盘IO次数，越低越好。</p><p>二，去除数据间关系，越简单越好。</p><p>降低磁盘IO次数，越低越好，怎么搞？我不用你磁盘不就行了吗？于是，内存存储的思想就提出来了，我数据不放到你磁盘里边，放内存里，这样是不是效率就高了。</p><p>第二，你的数据关系很复杂，那怎么办呢？干脆简单点，我断开你的关系，我不存关系了，我只存数据，这样不就没这事了吗？</p><p>把这两个特征一合并一起，就出来了一个新的概念：NoSQL</p><h4 id="1-1-2-NoSQL的概念"><a href="#1-1-2-NoSQL的概念" class="headerlink" title="1.1.2 NoSQL的概念"></a>1.1.2 NoSQL的概念</h4><p>（1）概念</p><p>NoSQL：即 Not-Only SQL（ 泛指非关系型的数据库），作为关系型数据库的补充。 作用：应对基于海量用户和海量数据前提下的数据处理问题。</p><p>他说这句话说的非常客气，什么意思呢？就是我们数据存储要用SQL，但是呢可以不仅仅用SQL，还可以用别的东西，那别的东西叫什么呢？于是他定义了一句话叫做NoSQL。这个意思就是说我们存储数据，可以不光使用SQL，我们还可以使用非SQL的这种存储方案，这就是所谓的NoSQL。</p><p>（2）特征</p><p>可扩容，可伸缩。SQL数据关系过于复杂，你扩容一下难度很高，那我们Nosql 这种的，不存关系，所以它的扩容就简单一些。</p><p>大数据量下高性能。包数据非常多的时候，它的性能高，因为你不走磁盘IO，你走的是内存，性能肯定要比磁盘IO的性能快一些。</p><p>灵活的数据模型、高可用。他设计了自己的一些数据存储格式，这样能保证效率上来说是比较高的，最后一个高可用，我们等到集群内部分再去它！</p><p>（3）常见 Nosql 数据库</p><p>目前市面上常见的Nosql产品：Redis、memcache、HBase、MongoDB</p><p>（4）应用场景-电商为例</p><p>我们以电商为例，来看一看他在这里边起到的作用。</p><p>第一类，在电商中我们的基础数据一定要存储起来，比如说商品名称，价格，生产厂商，这些都属于基础数据，这些数据放在MySQL数据库。</p><p>第二类，我们商品的附加信息，比如说，你买了一个商品评价了一下，这个评价它不属于商品本身。就像你买一个苹果，“这个苹果很好吃”就是评论，但是你能说很好吃是这个商品的属性嘛？不能这么说，那只是一个人对他的评论而已。这一类数据呢，我们放在另外一个地方，我们放到MongoDB。它也可以用来加快我们的访问，他属于NoSQL的一种。</p><p>第三，图片内的信息。注意这种信息相对来说比较固定，他有专用的存储区，我们一般用文件系统来存储。至于是不是分布式，要看你的系统的一个整个   瓶颈   了？如果说你发现你需要做分布式，那就做，不需要的话，一台主机就搞定了。</p><p>第四，搜索关键字。为了加快搜索，我们会用到一些技术，有些人可能了解过，像分ES、Lucene、solr都属于搜索技术。那说的这么热闹，我们的电商解决方案中还没出现我们的redis啊！注意第五类信息。</p><p>第五，热点信息。访问频度比较高的信息，这种东西的第二特征就是它具有波段性。换句话说他不是稳定的，它具有一个时效性的。那么这类信息放哪儿了，放到我们的redis这个解决方案中来进行存储。</p><p>具体的我们从我们的整个数据存储结构的设计上来看一下。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E7%94%B5%E5%95%86%E5%9C%BA%E6%99%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png"></p><p>我们的基础数据都存MySQL,在它的基础之上，我们把它连在一块儿，同时对外提供服务。向上走，有一些信息加载完以后,要放到我们的MongoDB中。还有一类信息，我们放到我们专用的文件系统中（比如图片），就放到我们的这个搜索专用的，如Lucene、solr及集群里边，或者用ES的这种技术里边。那么剩下来的热点信息，放到我们的redis里面。</p><h3 id="1-2-Redis概念"><a href="#1-2-Redis概念" class="headerlink" title="1.2 Redis概念"></a>1.2 Redis概念</h3><h4 id="1-2-1-redis概念"><a href="#1-2-1-redis概念" class="headerlink" title="1.2.1 redis概念"></a>1.2.1 redis概念</h4><p>概念：Redis (REmote DIctionary Server) 是用 C 语言开发的一个开源的高性能键值对（key-value）数据库。</p><p>特征：</p><p>（1）数据间没有必然的关联关系；</p><p>（2）内部采用单线程机制进行工作；</p><p>（3）高性能。官方提供测试数据，50个并发执行100000 个请求,读的速度是110000 次&#x2F;s,写的速度是81000次&#x2F;s。</p><p>（4）多数据类型支持</p><p>字符串类型，string  list</p><p>列表类型，hash  set</p><p>散列类型，zset&#x2F;sorted_set</p><p>集合类型</p><p>有序集合类型</p><p>（5）支持持久化，可以进行数据灾难恢复</p><h4 id="1-2-2-redis的应用场景"><a href="#1-2-2-redis的应用场景" class="headerlink" title="1.2.2 redis的应用场景"></a>1.2.2 redis的应用场景</h4><p>（1）为热点数据加速查询（主要场景）。如热点商品、热点新闻、热点资讯、推广类等高访问量信息等。</p><p>（2）即时信息查询。如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等。</p><p>（3）时效性信息控制。如验证码控制、投票控制等。</p><p>（4）分布式数据共享。如分布式集群架构中的 session 分离<br>消息队列.</p><h3 id="1-3-Redis-的下载与安装"><a href="#1-3-Redis-的下载与安装" class="headerlink" title="1.3 Redis 的下载与安装"></a>1.3 Redis 的下载与安装</h3><p>后期所有资料分4中不同色块显示，详情如下：</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E7%BA%A6%E5%AE%9A%E6%A0%BC%E5%BC%8F.png"></p><h4 id="1-3-1-Redis-的下载与安装"><a href="#1-3-1-Redis-的下载与安装" class="headerlink" title="1.3.1 Redis 的下载与安装"></a>1.3.1 Redis 的下载与安装</h4><p>学习环境均基于Center OS7安装Redis。</p><p>（1)下载Redis</p><p>下载安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://download.redis.io/releases/redis-5.0.0.tar.gz<br></code></pre></td></tr></table></figure><p>解压安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar –xvf redis-5.0.0.tar.gz<br></code></pre></td></tr></table></figure><p>安装c++环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc-c++<br></code></pre></td></tr></table></figure><p>编译（在解压的目录中执行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><p>安装（在解压的目录中执行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make install PREFIX=/usr/local/redis<br></code></pre></td></tr></table></figure><p>拷贝并修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /usr/upload/redis-3.0.7/redis.conf /usr/local/redis/bin<br><br><span class="hljs-comment"># 后台启动</span><br> vim /usr/local/redis/bin/redis.conf：<br>               daemonize <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>启动和关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启动</span><br>./redis-server redis.conf<br><span class="hljs-comment">#关闭</span><br>./redis-cli -h 127.0.0.1 -p 6379 shutdown<br></code></pre></td></tr></table></figure><p>（2）安装 Redis</p><p>redis-server，服务器启动命令 客户端启动命令</p><p>redis-cli，redis核心配置文件</p><p>redis.conf，RDB文件检查工具（快照持久化文件）</p><p>redis-check-dump，AOF文件修复工具</p><p>redis-check-aof</p><h3 id="1-4-Redis服务器启动"><a href="#1-4-Redis服务器启动" class="headerlink" title="1.4 Redis服务器启动"></a>1.4 Redis服务器启动</h3><h4 id="1-4-1-Redis服务器启动"><a href="#1-4-1-Redis服务器启动" class="headerlink" title="1.4.1 Redis服务器启动"></a>1.4.1 Redis服务器启动</h4><p>启动服务器——参数启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server [--port port]<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server --port 6379<br></code></pre></td></tr></table></figure><p>启动服务器——配置文件启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server config_file_name<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server redis.conf<br></code></pre></td></tr></table></figure><h4 id="1-4-2-Redis客户端启动"><a href="#1-4-2-Redis客户端启动" class="headerlink" title="1.4.2 Redis客户端启动"></a>1.4.2 Redis客户端启动</h4><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli [-h host] [-p port]<br></code></pre></td></tr></table></figure><p>范 例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli –h 61.129.65.248 –p 6384<br></code></pre></td></tr></table></figure><p>注意：服务器启动指定端口使用的是–port，客户端启动指定端口使用的是-p。-的数量不同。</p><h4 id="1-4-3-Redis基础环境设置约定"><a href="#1-4-3-Redis基础环境设置约定" class="headerlink" title="1.4.3 Redis基础环境设置约定"></a>1.4.3 Redis基础环境设置约定</h4><p>创建配置文件存储目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> conf<br></code></pre></td></tr></table></figure><p>创建服务器文件存储目录（包含日志、数据、临时配置文件等）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> data<br></code></pre></td></tr></table></figure><p>创建快速访问链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s redis-5.0.0 redis<br></code></pre></td></tr></table></figure><h3 id="1-5-配置文件启动与常用配置"><a href="#1-5-配置文件启动与常用配置" class="headerlink" title="1.5 配置文件启动与常用配置"></a>1.5 配置文件启动与常用配置</h3><h4 id="1-5-1-服务器端设定"><a href="#1-5-1-服务器端设定" class="headerlink" title="1.5.1 服务器端设定"></a>1.5.1 服务器端设定</h4><p>设置服务器以守护进程的方式运行，开启后服务器控制台中将打印服务器运行信息（同日志内容相同）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">daemonize <span class="hljs-built_in">yes</span>|no<br></code></pre></td></tr></table></figure><p>绑定主机地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> ip<br></code></pre></td></tr></table></figure><p>设置服务器端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">port port<br></code></pre></td></tr></table></figure><p>设置服务器文件保存地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> path<br></code></pre></td></tr></table></figure><h4 id="1-5-2-客户端配置"><a href="#1-5-2-客户端配置" class="headerlink" title="1.5.2  客户端配置"></a>1.5.2  客户端配置</h4><p> 服务器允许客户端连接最大数量，默认0，表示无限制。当客户端连接到达上限后，Redis会拒绝新的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">maxclients count<br></code></pre></td></tr></table></figure><p>客户端闲置等待最大时长，达到最大值后关闭对应连接。如需关闭该功能，设置为 0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">timeout</span> seconds<br></code></pre></td></tr></table></figure><h4 id="1-5-3-日志配置"><a href="#1-5-3-日志配置" class="headerlink" title="1.5.3  日志配置"></a>1.5.3  日志配置</h4><p>设置服务器以指定日志记录级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">loglevel debug|verbose|notice|warning<br></code></pre></td></tr></table></figure><p>日志记录文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">logfile filename<br></code></pre></td></tr></table></figure><p>注意：日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频度。</p><h3 id="1-6-Redis基本操作"><a href="#1-6-Redis基本操作" class="headerlink" title="1.6 Redis基本操作"></a>1.6 Redis基本操作</h3><h4 id="1-6-1-命令行模式工具使用思考"><a href="#1-6-1-命令行模式工具使用思考" class="headerlink" title="1.6.1  命令行模式工具使用思考"></a>1.6.1  命令行模式工具使用思考</h4><p>功能性命令</p><p>帮助信息查阅</p><p>退出指令</p><p>清除屏幕信息</p><h4 id="1-6-2-信息读写"><a href="#1-6-2-信息读写" class="headerlink" title="1.6.2  信息读写"></a>1.6.2  信息读写</h4><p>设置 key，value 数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> key value<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> name itheima<br></code></pre></td></tr></table></figure><p>根据 key 查询对应的 value，如果不存在，返回空（nil）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">get key<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">get name<br></code></pre></td></tr></table></figure><h4 id="1-6-3-帮助信息"><a href="#1-6-3-帮助信息" class="headerlink" title="1.6.3  帮助信息"></a>1.6.3  帮助信息</h4><p>获取命令帮助文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> [<span class="hljs-built_in">command</span>]<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> <span class="hljs-built_in">set</span><br></code></pre></td></tr></table></figure><p>获取组中所有命令信息名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> [@group-name]<br></code></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> @string<br></code></pre></td></tr></table></figure><p>1.6.4  退出命令行客户端模式</p><p>退出客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">quit<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>快捷键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl+C<br></code></pre></td></tr></table></figure><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h2><p>在这个部分，我们将学习一共要学习三大块内容，首先需要了解一下数据类型，接下来将针对着我们要学习的数据类型进行逐一的讲解，如string、hash、list、set等，最后我们通过一个案例来总结前面的数据类型的使用场景。</p><h3 id="2-1-数据存储类型介绍"><a href="#2-1-数据存储类型介绍" class="headerlink" title="2.1  数据存储类型介绍"></a>2.1  数据存储类型介绍</h3><h4 id="2-1-1-业务数据的特殊性"><a href="#2-1-1-业务数据的特殊性" class="headerlink" title="2.1.1  业务数据的特殊性"></a>2.1.1  业务数据的特殊性</h4><p>在了解数据类型之前，我们得先思考一个问题，数据类型既然是用来描述数据的存储格式的，如果你不知道哪些数据未来会进入到我们来的redis中，那么对应的数据类型的选择，你就会出现问题，如下：</p><p>（1）原始业务功能设计</p><p><strong>秒杀</strong>他这个里边数据变化速度特别的快，访问量也特别的高，用户大量涌入以后都会针对着一部分数据进行操作，这一类要记住。</p><p><strong>618活动</strong>对于我们京东的618活动、以及天猫的双11活动，相信大家不用说都知道这些数据一定要进去，因为他们的访问频度实在太高了。</p><p><strong>排队购票</strong>我们12306的票务信息。这些信息在原始设计的时候，他们就注定了要进redis。</p><p>（2）运营平台监控到的突发高频访问数据</p><p>此类平台临时监控到的这些数据，比如说现在出来的一个八卦的信息，这个新闻一旦出现以后呢，顺速的被围观了，那么这个时候，这个数据就会变得访量特别高，那么这类信息也要进入进去。</p><p>（3）高频、复杂的统计数据</p><p>在线人数。比如说直播现在很火，直播里边有很多数据，例如在线人数。进一个人出一个人，这个数据就要跳动，那么这个访问速度非常的快，而且访量很高，并且它里边有一个复杂的数据统计，在这里这种信息也要进入到我们的redis中。</p><p>投票排行榜。投票投票类的信息他的变化速度也比较快，为了追求一个更快的一个即时投票的名次变化，这种数据最好也放到redis中。</p><h4 id="2-1-2-Redis-数据类型-5种常用"><a href="#2-1-2-Redis-数据类型-5种常用" class="headerlink" title="2.1.2  Redis 数据类型(5种常用)"></a>2.1.2  Redis 数据类型(5种常用)</h4><p>基于以上数据特征我们进行分析，最终得出来我们的Redis中要设计5种 数据类型：</p><p>string、hash、list、set、sorted_set&#x2F;zset（应用性较低）</p><h3 id="2-2-string数据类型"><a href="#2-2-string数据类型" class="headerlink" title="2.2  string数据类型"></a>2.2  string数据类型</h3><p>在学习第一个数据类型之前，先给大家介绍一下，在随后这部分内容的学习过程中，我们每一种数据类型都分成三块来讲：首先是讲下它的基本操作，接下来讲一些它的扩展操作，最后我们会去做一个小的案例分析。</p><h4 id="2-2-1Redis-数据存储格式"><a href="#2-2-1Redis-数据存储格式" class="headerlink" title="2.2.1Redis 数据存储格式"></a>2.2.1Redis 数据存储格式</h4><p>在学习string这个数据形式之前，我们先要明白string到底是修饰什么的。我们知道redis 自身是一个 Map，其中所有的数据都是采用 key : value 的形式存储。</p><p>对于这种结构来说，我们用来存储数据一定是一个值前面对应一个名称。我们通过名称来访问后面的值。按照这种形势，我们可以对出来我们的存储格式。前面这一部分我们称为key。后面的一部分称为value，而我们的数据类型，他一定是修饰value的。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/redis%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4.png"></p><p>数据类型指的是存储的数据的类型，也就是 value 部分的类型，key 部分永远都是字符串。</p><h4 id="2-2-2-string-类型"><a href="#2-2-2-string-类型" class="headerlink" title="2.2.2  string 类型"></a>2.2.2  string 类型</h4><p>（1）存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型。</p><p>string，他就是存一个字符串儿，注意是value那一部分是一个字符串，它是redis中最基本、最简单的存储数据的格式。</p><p>（2）存储数据的格式：一个存储空间保存一个数据</p><p>每一个空间中只能保存一个字符串信息，这个信息里边如果是存的纯数字，他也能当数字使用，我们来看一下，这是我们的数据的存储空间。</p><p>（3）存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用.</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/redis%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B42.png"></p><p>一个key对一个value，而这个itheima就是我们所说的string类型，当然它也可以是一个纯数字的格式。</p><h4 id="2-2-3-string-类型数据的基本操作"><a href="#2-2-3-string-类型数据的基本操作" class="headerlink" title="2.2.3  string 类型数据的基本操作"></a>2.2.3  string 类型数据的基本操作</h4><p>（1）基础指令</p><p>添加&#x2F;修改数据添加&#x2F;修改数据</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> key <span class="hljs-comment">value</span><br></code></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">get</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">del</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>判定性添加数据</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">setnx key value</span><br></code></pre></td></tr></table></figure><p>添加&#x2F;修改多个数据</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mset</span> key1 value1 key2 value2 …<br></code></pre></td></tr></table></figure><p>获取多个数据</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mget</span> key1 key2 …<br></code></pre></td></tr></table></figure><p>获取数据字符个数（字符串长度）</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">strlen</span> <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">append</span> <span class="hljs-built_in">key</span> value<br></code></pre></td></tr></table></figure><p>（2）单数据操作与多数据操作的选择之惑</p><p>即set 与mset的关系。这对于这两个操作来说，没有什么你应该选哪个，而是他们自己的特征是什么，你要根据这个特征去比对你的业务，看看究竟适用于哪个。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/set.png"></p><p>假如说这是我们现在的服务器，他要向redis要数据的话，它会发出一条指令。那么当这条指令发过来的时候，比如说是这个set指令过来，那么它会把这个结果返回给你，这个时候我们要思考这里边一共经过了多长时间。</p><p>首先，发送set指令要时间，这是网络的一个时间，接下来redis要去运行这个指令要消耗时间，最终把这个结果返回给你又有一个时间，这个时间又是一个网络的时间，那我们可以理解为：一个指令发送的过程中需要消耗这样的时间.</p><p>但是如果说现在不是一条指令了，你要发3个set的话，还要多长时间呢？对应的发送时间要乘3了，因为这是三个单条指令,而运行的操作时间呢，它也要乘3了，但最终返回的也要发3次，所以这边也要乘3。</p><p>于是我们可以得到一个结论：单指令发3条它需要的时间，假定他们两个一样，是6个网络时间加3个处理时间，如果我们把它合成一个mset呢，我们想一想。</p><p>假如说用多指令发3个指令的话，其实只需要发一次就行了。这样我们可以得到一个结论，多指令发3个指令的话，其实它是两个网络时间加上3个redis的操作时间，为什么这写一个小加号呢，就是因为毕竟发的信息量变大了，所以网络时间有可能会变长。</p><p>那么通过这张图，你就可以得到一个结论，我们单指令和多指令他们的差别就在于你发送的次数是多还是少。当你影响的数据比较少的时候，你可以用单指令，也可以用多指令。但是一旦这个量大了，你就要选择多指令了，他的效率会高一些。</p><h3 id="2-3-string-类型数据的扩展操作"><a href="#2-3-string-类型数据的扩展操作" class="headerlink" title="2.3  string 类型数据的扩展操作"></a>2.3  string 类型数据的扩展操作</h3><h4 id="2-3-1-string-类型数据的扩展操作"><a href="#2-3-1-string-类型数据的扩展操作" class="headerlink" title="2.3.1  string 类型数据的扩展操作"></a>2.3.1  string 类型数据的扩展操作</h4><p>下面我们来看一string的扩展操作，分成两大块：一块是对数字进行操作的，第二块是对我们的key的时间进行操作的。</p><p>设置数值数据增加指定范围的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">incr key<br>incrby key increment<br>incrbyfloat key increment<br></code></pre></td></tr></table></figure><p>设置数值数据减少指定范围的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">decr key<br>decrby key increment<br></code></pre></td></tr></table></figure><p>设置数据具有指定的生命周期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">setex key seconds value<br>psetex key milliseconds value<br></code></pre></td></tr></table></figure><h4 id="2-3-2-string-类型数据操作的注意事项"><a href="#2-3-2-string-类型数据操作的注意事项" class="headerlink" title="2.3.2  string 类型数据操作的注意事项"></a>2.3.2  string 类型数据操作的注意事项</h4><p>(1)数据操作不成功的反馈与数据正常操作之间的差异</p><p>表示运行结果是否成功</p><p>(integer) 0  → false                 失败</p><p>(integer) 1  → true                  成功</p><p>表示运行结果值</p><p>(integer) 3  → 3                        3个</p><p>(integer) 1  → 1                         1个</p><p>(2)数据未获取到时，对应的数据为（nil），等同于null</p><p>(3)数据最大存储量：512MB</p><p>(4)string在redis内部存储默认就是一个字符串，当遇到增减类操作incr，decr时会转成数值型进行计算</p><p>(5)按数值进行操作的数据，如果原始数据不能转成数值，或超越了redis 数值上限范围，将报错<br>9223372036854775807（java中Long型数据最大值，Long.MAX_VALUE）</p><p>(6)redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响.</p><h3 id="2-4string应用场景与key命名约定"><a href="#2-4string应用场景与key命名约定" class="headerlink" title="2.4string应用场景与key命名约定"></a>2.4string应用场景与key命名约定</h3><h4 id="2-4-1-应用场景"><a href="#2-4-1-应用场景" class="headerlink" title="2.4.1  应用场景"></a>2.4.1  应用场景</h4><p>它的应用场景在于：主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/string%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png"></p><p>我们来思考一下：这些信息是不是你进入大V的页面儿以后就要读取这写信息的啊，那这种信息一定要存储到我们的redis中，因为他的访问量太高了！那这种数据应该怎么存呢？我们来一块儿看一下方案！</p><h4 id="2-4-2-解决方案"><a href="#2-4-2-解决方案" class="headerlink" title="2.4.2  解决方案"></a>2.4.2  解决方案</h4><p>（1）在redis中为大V用户设定用户信息，以用户主键和属性值作为key，后台设定定时刷新策略即可。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">eg:user:id:3506728370:fans→12210947<br>eg:user:id:3506728370:blogs→6164<br>eg:user:id:3506728370:focuses→83<br></code></pre></td></tr></table></figure><p>（2）也可以使用json格式保存数据</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">eg:user:id:3506728370    →&#123;“fans”：12210947，“blogs”：6164，“ focuses ”：83 &#125;<br></code></pre></td></tr></table></figure><p>（3） key 的设置约定</p><p>数据库中的热点数据key命名惯例</p><table><thead><tr><th></th><th><strong>表名</strong></th><th><strong>主键名</strong></th><th>主键值</th><th><strong>字段名</strong></th></tr></thead><tbody><tr><td>eg1：</td><td>order</td><td>id</td><td>29437595</td><td>name</td></tr><tr><td>eg2：</td><td>equip</td><td>id</td><td>390472345</td><td>type</td></tr><tr><td>eg3：</td><td>news</td><td>id</td><td>202004150</td><td>title</td></tr></tbody></table><h3 id="2-5-hash的基本操作"><a href="#2-5-hash的基本操作" class="headerlink" title="2.5  hash的基本操作"></a>2.5  hash的基本操作</h3><p>下面我们来学习第二个数据类型hash。</p><h4 id="2-5-1-数据存储的困惑"><a href="#2-5-1-数据存储的困惑" class="headerlink" title="2.5.1  数据存储的困惑"></a>2.5.1  数据存储的困惑</h4><p>对象类数据的存储如果具有较频繁的更新需求操作会显得笨重！</p><p>在正式学习之前，我们先来看一个关于数据存储的困惑：</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/hash%E5%AD%98%E5%82%A8.png"></p><p>比如说前面我们用以上形式存了数据，如果我们用单条去存的话，它存的条数会很多。但如果我们用json格式，它存一条数据就够了。问题来了，假如说现在粉丝数量发生变化了，你要把整个值都改了。但是用单条存的话就不存在这个问题，你只需要改其中一个就行了。这个时候我们就想，有没有一种新的存储结构，能帮我们解决这个问题呢。</p><p>我们一块儿来分析一下：</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E6%95%B0%E6%8D%AE.png"></p><p>如上图所示：单条的话是对应的数据在后面放着。仔细观察：我们看左边是不是长得都一模一样啊，都是对应的表名、ID等的一系列的东西。我们可以将右边红框中的这个区域给他封起来。</p><p>那如果要是这样的形式的话，如下图，我们把它一合并，并把右边的东西给他变成这个格式，这不就行了吗？</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/hash%E6%95%B0%E6%8D%AE.png"></p><p>这个图其实大家并不陌生，第一，你前面学过一个东西叫hashmap不就这格式吗？第二，redis自身不也是这格式吗？那是什么意思呢？注意，这就是我们要讲的第二种格式，hash。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/hash%E7%BB%93%E6%9E%84.png"></p><p>在右边对应的值，我们就存具体的值，那左边儿这就是我们的key。问题来了，那中间的这一块叫什么呢？这个东西我们给他起个名儿，叫做field字段。那么右边儿整体这块儿空间我们就称为hash，也就是说hash是存了一个key value的存储空间。</p><h4 id="2-5-2-hash-类型"><a href="#2-5-2-hash-类型" class="headerlink" title="2.5.2  hash 类型"></a>2.5.2  hash 类型</h4><p>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</p><p>需要的存储结构：一个存储空间保存多个键值对数据</p><p>hash类型：底层使用哈希表结构实现数据存储</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/hash%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><p>如上图所示，这种结构叫做hash，左边一个key，对右边一个存储空间。这里要明确一点，右边这块儿存储空间叫hash，也就是说hash是指的一个数据类型，他指的不是一个数据，是这里边的一堆数据，那么它底层呢，是用hash表的结构来实现的。</p><p>值得注意的是：</p><p>如果field数量较少，存储结构优化为类数组结构</p><p>如果field数量较多，存储结构使用HashMap结构</p><h4 id="2-5-3-hash-类型数据的基本操作"><a href="#2-5-3-hash-类型数据的基本操作" class="headerlink" title="2.5.3  hash 类型数据的基本操作"></a>2.5.3  hash 类型数据的基本操作</h4><p>添加&#x2F;修改数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hset key field value<br></code></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hget key field<br>hgetall key<br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdel key field1 [field2]<br></code></pre></td></tr></table></figure><p>设置field的值，如果该field存在则不做任何操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hsetnx key field value<br></code></pre></td></tr></table></figure><p>添加&#x2F;修改多个数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hmset key field1 value1 field2 value2 …<br></code></pre></td></tr></table></figure><p>获取多个数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hmget key field1 field2 …<br></code></pre></td></tr></table></figure><p>获取哈希表中字段的数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hlen key<br></code></pre></td></tr></table></figure><p>获取哈希表中是否存在指定的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexists key field<br></code></pre></td></tr></table></figure><h3 id="2-6-hash的拓展操作"><a href="#2-6-hash的拓展操作" class="headerlink" title="2.6  hash的拓展操作"></a>2.6  hash的拓展操作</h3><p>在看完hash的基本操作后，我们再来看他的拓展操作，他的拓展操作相对比较简单：</p><h4 id="2-6-1-hash-类型数据扩展操作"><a href="#2-6-1-hash-类型数据扩展操作" class="headerlink" title="2.6.1  hash 类型数据扩展操作"></a>2.6.1  hash 类型数据扩展操作</h4><p>获取哈希表中所有的字段名或字段值</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hkeys <span class="hljs-built_in">key</span><br>hvals <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><p>设置指定字段的数值数据增加指定范围的值</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">hincrby</span> key <span class="hljs-meta">field</span> increment<br><span class="hljs-symbol">hincrbyfloat</span> key <span class="hljs-meta">field</span> increment<br></code></pre></td></tr></table></figure><h4 id="2-6-2-hash类型数据操作的注意事项"><a href="#2-6-2-hash类型数据操作的注意事项" class="headerlink" title="2.6.2  hash类型数据操作的注意事项"></a>2.6.2  hash类型数据操作的注意事项</h4><p>(1)hash类型中value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，对应的值为（nil）。</p><p>(2）每个 hash 可以存储 232 - 1 个键值对<br>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但hash设计初衷不是为了存储大量对象而设计 的，切记不可滥用，更不可以将hash作为对象列表使用。</p><p>(3)hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈。</p><h3 id="2-7-hash应用场景"><a href="#2-7-hash应用场景" class="headerlink" title="2.7  hash应用场景"></a>2.7  hash应用场景</h3><h4 id="2-7-1-应用场景"><a href="#2-7-1-应用场景" class="headerlink" title="2.7.1  应用场景"></a>2.7.1  应用场景</h4><p>双11活动日，销售手机充值卡的商家对移动、联通、电信的30元、50元、100元商品推出抢购活动，每种商品抢购上限1000  张。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/hash%E5%BA%94%E7%94%A8.png"></p><p>也就是商家有了，商品有了，数量有了。最终我们的用户买东西就是在改变这个数量。那你说这个结构应该怎么存呢？对应的商家的ID作为key，然后这些充值卡的ID作为field，最后这些数量作为value。而我们所谓的操作是其实就是increa这个操作，只不过你传负值就行了。看一看对应的解决方案：</p><h4 id="2-7-2-解决方案"><a href="#2-7-2-解决方案" class="headerlink" title="2.7.2  解决方案"></a>2.7.2  解决方案</h4><p>以商家id作为key</p><p>将参与抢购的商品id作为field</p><p>将参与抢购的商品数量作为对应的value</p><p>抢购时使用降值的方式控制产品数量</p><p>注意：实际业务中还有超卖等实际问题，这里不做讨论</p><h3 id="2-8-list基本操作"><a href="#2-8-list基本操作" class="headerlink" title="2.8  list基本操作"></a>2.8  list基本操作</h3><p>前面我们存数据的时候呢，单个数据也能存，多个数据也能存，但是这里面有一个问题，我们存多个数据用hash的时候它是没有顺序的。我们平时操作，实际上数据很多情况下都是有顺序的，那有没有一种能够用来存储带有顺序的这种数据模型呢，list就专门来干这事儿。</p><h4 id="2-8-1-list-类型"><a href="#2-8-1-list-类型" class="headerlink" title="2.8.1  list 类型"></a>2.8.1  list 类型</h4><p>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</p><p>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</p><p>list类型：保存多个数据，底层使用双向链表存储结构实现</p><p>先来通过一张图，回忆一下顺序表、链表、双向链表。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/list1.png"></p><p>list对应的存储结构是什么呢？里边存的这个东西是个列表，他有一个对应的名称。就是key存一个list的这样结构。对应的基本操作，你其实是可以想到的。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/list2.png"></p><p>来看一下，因为它是双向的，所以他左边右边都能操作，它对应的操作结构两边都能进数据。这就是链表的一个存储结构。往外拿数据的时候怎么拿呢？通常是从一端拿，当然另一端也能拿。如果两端都能拿的话，这就是个双端队列，两边儿都能操作。如果只能从一端进一端出，这个模型咱们前面了解过，叫做栈。</p><h4 id="2-8-2-list-类型数据基本操作"><a href="#2-8-2-list-类型数据基本操作" class="headerlink" title="2.8.2 list 类型数据基本操作"></a>2.8.2 list 类型数据基本操作</h4><p>最后看一下他的基本操作</p><p>添加&#x2F;修改数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpush key value1 [value2] ……<br>rpush key value1 [value2] ……<br></code></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">lrange key start stop<br>lindex key index<br>llen key<br></code></pre></td></tr></table></figure><p>获取并移除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpop key<br>rpop key<br></code></pre></td></tr></table></figure><h3 id="2-9-list扩展操作"><a href="#2-9-list扩展操作" class="headerlink" title="2.9  list扩展操作"></a>2.9  list扩展操作</h3><h4 id="2-9-1-list-类型数据扩展操作"><a href="#2-9-1-list-类型数据扩展操作" class="headerlink" title="2.9.1  list 类型数据扩展操作"></a>2.9.1  list 类型数据扩展操作</h4><p>移除指定数据</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">lrem <span class="hljs-built_in">key</span> <span class="hljs-built_in">count</span> <span class="hljs-built_in">value</span><br></code></pre></td></tr></table></figure><p>规定时间内获取并移除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">blpop key1 [key2] <span class="hljs-built_in">timeout</span><br>brpop key1 [key2] <span class="hljs-built_in">timeout</span><br>brpoplpush <span class="hljs-built_in">source</span> destination <span class="hljs-built_in">timeout</span><br></code></pre></td></tr></table></figure><h4 id="2-9-2-list-类型数据操作注意事项"><a href="#2-9-2-list-类型数据操作注意事项" class="headerlink" title="2.9.2  list 类型数据操作注意事项"></a>2.9.2  list 类型数据操作注意事项</h4><p>（1）list中保存的数据都是string类型的，数据总容量是有限的，最多232 - 1 个元素(4294967295)。</p><p>（2）list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</p><p>（3）获取全部数据操作结束索引设置为-1</p><p>（4）list可以对数据进行分页操作，通常第一页的信息来自于list，第2页及更多的信息通过数据库的形式加载</p><h3 id="2-10-list-应用场景"><a href="#2-10-list-应用场景" class="headerlink" title="2.10 list 应用场景"></a>2.10 list 应用场景</h3><h4 id="2-10-1-应用场景"><a href="#2-10-1-应用场景" class="headerlink" title="2.10.1  应用场景"></a>2.10.1  应用场景</h4><p>企业运营过程中，系统将产生出大量的运营数据，如何保障多台服务器操作日志的统一顺序输出？</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/list%E5%BA%94%E7%94%A8.png"></p><p>假如现在你有多台服务器，每一台服务器都会产生它的日志，假设你是一个运维人员，你想看它的操作日志，你怎么看呢？打开A机器的日志看一看，打开B机器的日志再看一看吗？这样的话你会可能会疯掉的！因为左边看的有可能它的时间是11:01，右边11:02，然后再看左边11:03，它们本身是连续的，但是你在看的时候就分成四个文件了，这个时候你看起来就会很麻烦。能不能把他们合并呢？答案是可以的！怎么做呢？建立起redis服务器。当他们需要记日志的时候，记在哪儿,全部发给redis。等到你想看的时候，通过服务器访问redis获取日志。然后得到以后，就会得到一个完整的日志信息。那么这里面就可以获取到完整的日志了，依靠什么来实现呢？就依靠我们的list的模型的顺序来实现。进来一组数据就往里加，谁先进来谁先加进去，它是有一定的顺序的。</p><h4 id="2-10-2-解决方案"><a href="#2-10-2-解决方案" class="headerlink" title="2.10.2  解决方案"></a>2.10.2  解决方案</h4><p>依赖list的数据具有顺序的特征对信息进行管理</p><p>使用队列模型解决多路信息汇总合并的问题</p><p>使用栈模型解决最新消息的问题</p><h3 id="2-11-set-基本操作"><a href="#2-11-set-基本操作" class="headerlink" title="2.11  set 基本操作"></a>2.11  set 基本操作</h3><h4 id="2-11-1-set类型"><a href="#2-11-1-set类型" class="headerlink" title="2.11.1 set类型"></a>2.11.1 set类型</h4><p>新的存储需求：存储大量的数据，在查询方面提供更高的效率</p><p>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</p><p>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/set%E6%A8%A1%E5%9E%8B.png"></p><p>通过这个名称，大家也基本上能够认识到和我们Java中的set完全一样。我们现在要存储大量的数据，并且要求提高它的查询效率。用list这种链表形式，它的查询效率是不高的，那怎么办呢？这时候我们就想，有没有高效的存储机制。其实前面咱讲Java的时候说过hash表的结构就非常的好，但是这里边我们已经有hash了，他做了这么一个设定，干嘛呢，他把hash的存储空间给改一下，右边你原来存数据改掉,全部存空，那你说数据放哪儿了？放到原来的filed的位置，也就在这里边存真正的值，那么这个模型就是我们的set 模型。</p><p>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的。</p><p>看一下它的整个结构：</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/set4.png"></p><h4 id="2-11-2-set类型数据的基本操作"><a href="#2-11-2-set类型数据的基本操作" class="headerlink" title="2.11.2 set类型数据的基本操作"></a>2.11.2 set类型数据的基本操作</h4><p>添加数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd key member1 [member2]<br></code></pre></td></tr></table></figure><p>获取全部数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smembers key<br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">srem key member1 [member2]<br></code></pre></td></tr></table></figure><p>获取集合数据总量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scard key<br></code></pre></td></tr></table></figure><p>判断集合中是否包含指定数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sismember key member<br></code></pre></td></tr></table></figure><p>随机获取集合中指定数量的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">srandmember key [count]<br></code></pre></td></tr></table></figure><p>随机获取集中的某个数据并将该数据移除集合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">spop key [count]<br></code></pre></td></tr></table></figure><h3 id="2-12-set-类型数据的扩展操作"><a href="#2-12-set-类型数据的扩展操作" class="headerlink" title="2.12  set 类型数据的扩展操作"></a>2.12  set 类型数据的扩展操作</h3><h4 id="2-12-1-set-类型数据的扩展操作"><a href="#2-12-1-set-类型数据的扩展操作" class="headerlink" title="2.12.1  set 类型数据的扩展操作"></a>2.12.1  set 类型数据的扩展操作</h4><p>求两个集合的交、并、差集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">sinter key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sunion key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sdiff key1 <span class="hljs-selector-attr">[key2 …]</span><br></code></pre></td></tr></table></figure><p>求两个集合的交、并、差集并存储到指定集合中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">sinterstore destination key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sunionstore destination key1 <span class="hljs-selector-attr">[key2 …]</span>  <br>sdiffstore destination key1 <span class="hljs-selector-attr">[key2 …]</span><br></code></pre></td></tr></table></figure><p>将指定数据从原始集合中移动到目标集合中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smove <span class="hljs-built_in">source</span> destination member<br></code></pre></td></tr></table></figure><p>通过下面一张图回忆一下交、并、差</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E4%BA%A4%E5%B9%B6%E5%B7%AE.png"></p><h4 id="2-12-2-set-类型数据操作的注意事项"><a href="#2-12-2-set-类型数据操作的注意事项" class="headerlink" title="2.12.2  set 类型数据操作的注意事项"></a>2.12.2  set 类型数据操作的注意事项</h4><p>set 类型不允许数据重复，如果添加的数据在 set 中已经存在，将只保留一份。</p><p>set 虽然与hash的存储结构相同，但是无法启用hash中存储值的空间。</p><h3 id="2-13-set应用场景"><a href="#2-13-set应用场景" class="headerlink" title="2.13  set应用场景"></a>2.13  set应用场景</h3><h4 id="2-13-1-set应用场景"><a href="#2-13-1-set应用场景" class="headerlink" title="2.13.1  set应用场景"></a>2.13.1  set应用场景</h4><p>（1）黑名单</p><p>资讯类信息类网站追求高访问量，但是由于其信息的价值，往往容易被不法分子利用，通过爬虫技术，  快速获取信息，个别特种行业网站信息通过爬虫获取分析后，可以转换成商业机密进行出售。例如第三方火 车票、机票、酒店刷票代购软件，电商刷评论、刷好评。</p><p>同时爬虫带来的伪流量也会给经营者带来错觉，产生错误的决策，有效避免网站被爬虫反复爬取成为每个网站都要考虑的基本问题。在基于技术层面区分出爬虫用户后，需要将此类用户进行有效的屏蔽，这就是黑名单的典型应用。</p><p>ps:不是说爬虫一定做摧毁性的工作，有些小型网站需要爬虫为其带来一些流量。</p><p>（2）白名单</p><p>对于安全性更高的应用访问，仅仅靠黑名单是不能解决安全问题的，此时需要设定可访问的用户群体， 依赖白名单做更为苛刻的访问验证。</p><h4 id="2-13-2-解决方案"><a href="#2-13-2-解决方案" class="headerlink" title="2.13.2  解决方案"></a>2.13.2  解决方案</h4><p>基于经营战略设定问题用户发现、鉴别规则</p><p>周期性更新满足规则的用户黑名单，加入set集合</p><p>用户行为信息达到后与黑名单进行比对，确认行为去向</p><p>黑名单过滤IP地址：应用于开放游客访问权限的信息源</p><p>黑名单过滤设备信息：应用于限定访问设备的信息源</p><p>黑名单过滤用户：应用于基于访问权限的信息源</p><h3 id="2-14-实践案例"><a href="#2-14-实践案例" class="headerlink" title="2.14  实践案例"></a>2.14  实践案例</h3><h4 id="2-14-1业务场景"><a href="#2-14-1业务场景" class="headerlink" title="2.14.1业务场景"></a>2.14.1业务场景</h4><p>使用微信的过程中，当微信接收消息后，会默认将最近接收的消息置顶，当多个好友及关注的订阅号同时发 送消息时，该排序会不停的进行交替。同时还可以将重要的会话设置为置顶。一旦用户离线后，再次打开微信时，消息该按照什么样的顺序显示。</p><p>我们分析一下：</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/set%E6%A1%88%E4%BE%8B.png"></p><p>100这台手机代表你。而200、300、400这三台代表你好友的手机。在这里有一些东西需要交代一下，因为我们每个人的都会对自己的微信中的一些比较重要的人设置会话置顶，将他的那条对话放在最上面。我们假定这个人有两个会话置顶的好友，分别是400和500，而这里边就包含400.</p><p>下面呢，我们就来发这个消息，第一个发消息的是300，他发了个消息给100。发完以后，这个东西应该怎么存储呢？在这里面一定要分开，记录置顶的这些人的会话，对应的会话显示顺序和非置顶的一定要分两。</p><p>这里面我们创建两个模型，一个是普通的，一个是置顶的，而上面的这个置顶的用户呢，我们用set来存储，因为不重复。而下面这些因为有顺序，很容易想到用list去存储,不然你怎么表达顺序呢？</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/300.png"></p><p>那当300发给消息给100以后，这个时候我们先判定你在置顶人群中吗？不在,那好，300的消息对应的顺序就应该放在普通的列表里边。而在这里边，我们把300加进去。第一个数据也就是现在300。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/400.png"></p><p>接下来400，发了个消息。判断一下，他是需要置顶的，所以400将进入list的置顶里边放着。当前还没有特殊的地方。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/200.png"></p><p>再来200发消息了，和刚才的判定方法一样，先看在不在置顶里，不在的话进普通，然后在普通里边把200加入就行了，OK，到这里目前还没有顺序变化。</p><p>接下来200又发消息过来，同一个人给你连发了两条，那这个时候200的消息到达以后，先判断是否在置顶范围，不在，接下来他要放在list普通中，这里你要注意一点，因为这里边已经有200，所以进来以后先干一件事儿，把200杀掉，没有200，然后再把200加进来，那你想一下，现在这个位置顺序是什么呢？就是新的都在右边，对不对？</p><p>还记得我们说list模型，如果是一个双端队列，它是可以两头进两头出。当然我们双端从一头进一头出，这就是栈模型，现在咱们运用的就是list模型中的栈模型。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/3002.png"></p><p>现在300发消息，先判定他在不在，不在，用普通的队列，接下来按照刚才的操作，不管你里边原来有没有300，我先把300杀掉，没了，200自然就填到300的位置了，他现在是list里面唯一一个，然后让300进来，注意是从右侧进来的，那么现在300就是最新的。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E5%88%86%E6%9E%90.png"></p><p>那么到这里呢，我们让100来读取消息。你觉得这个消息顺序应该是什么样的？首先置顶的400有一个，他跑在最上面，然后list普通如果出来的话，300是最新的消息，而200在他后面的。用这种形式，我们就可以做出来他的消息顺序来。</p><h4 id="2-14-2-解决方案"><a href="#2-14-2-解决方案" class="headerlink" title="2.14.2  解决方案"></a>2.14.2  解决方案</h4><p>看一下最终的解决方案：</p><p>依赖list的数据具有顺序的特征对消息进行管理，将list结构作为栈使用</p><p>置顶与普通会话分别创建独立的list分别管理</p><p>当某个list中接收到用户消息后，将消息发送方的id从list的一侧加入list（此处设定左侧）</p><p>多个相同id发出的消息反复入栈会出现问题，在入栈之前无论是否具有当前id对应的消息，先删除对应id</p><p>推送消息时先推送置顶会话list，再推送普通会话list，推送完成的list清除所有数据<br>消息的数量，也就是微信用户对话数量采用计数器的思想另行记录，伴随list操作同步更新</p><h4 id="2-14-3-数据类型总结"><a href="#2-14-3-数据类型总结" class="headerlink" title="2.14.3  数据类型总结"></a>2.14.3  数据类型总结</h4><p>总结一下，在整个数据类型的部分，我们主要介绍了哪些内容：</p><p>首先我们了解了一下数据类型，接下来针对着我们要学习的数据类型，进行逐一讲解了string、hash、list、set等，最后通过一个案例总结了一下前面的数据类型的使用场景。</p><h2 id="3-常用指令"><a href="#3-常用指令" class="headerlink" title="3. 常用指令"></a>3. 常用指令</h2><p>在这部分中呢，我们家学习两个知识，第一个是key的常用指令，第二个是数据库的常用指令。和前面我们学数据类型做一下区分，前面你学的那些指令呢，都是针对某一个数据类型操作的，现在学的都是对所有的操作的，来看一下，我们在学习Key的操作的时候，我们先想一下的操作我们应该学哪些东西:</p><h3 id="3-1-key-操作分析"><a href="#3-1-key-操作分析" class="headerlink" title="3.1  key 操作分析"></a>3.1  key 操作分析</h3><h4 id="3-1-1-key应该设计哪些操作？"><a href="#3-1-1-key应该设计哪些操作？" class="headerlink" title="3.1.1  key应该设计哪些操作？"></a>3.1.1  key应该设计哪些操作？</h4><p>key是一个字符串，通过key获取redis中保存的数据</p><p>对于key自身状态的相关操作，例如：删除，判定存在，获取类型等</p><p>对于key有效性控制相关操作，例如：有效期设定，判定是否有效，有效状态的切换等</p><p>对于key快速查询操作，例如：按指定策略查询key</p><h4 id="3-1-2-key-基本操作"><a href="#3-1-2-key-基本操作" class="headerlink" title="3.1.2  key 基本操作"></a>3.1.2  key 基本操作</h4><p>删除指定key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">del key<br></code></pre></td></tr></table></figure><p>获取key是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exists key<br></code></pre></td></tr></table></figure><p>获取key的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> key<br></code></pre></td></tr></table></figure><p>3.1.3  拓展操作</p><p>排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>改名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename key newkey<br>renamenx key newkey<br></code></pre></td></tr></table></figure><h4 id="3-1-3-key-扩展操作（时效性控制）"><a href="#3-1-3-key-扩展操作（时效性控制）" class="headerlink" title="3.1.3  key 扩展操作（时效性控制）"></a>3.1.3  key 扩展操作（时效性控制）</h4><p>为指定key设置有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">expire key seconds<br>pexpire key milliseconds<br>expireat key timestamp<br>pexpireat key milliseconds-timestamp<br></code></pre></td></tr></table></figure><p>获取key的有效时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ttl key<br>pttl key<br></code></pre></td></tr></table></figure><p>切换key从时效性转换为永久性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">persist key<br></code></pre></td></tr></table></figure><h4 id="3-1-4-key-扩展操作（查询模式）"><a href="#3-1-4-key-扩展操作（查询模式）" class="headerlink" title="3.1.4  key 扩展操作（查询模式）"></a>3.1.4  key 扩展操作（查询模式）</h4><p>查询key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keys pattern<br></code></pre></td></tr></table></figure><p>查询模式规则</p><p>*匹配任意数量的任意符号      ?配合一个任意符号[]匹配一个指定符号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">keys *  keys    查询所有<br>it*  keys       查询所有以it开头<br>*heima          查询所有以heima结尾<br>keys ??heima    查询所有前面两个字符任意，后面以heima结尾 查询所有以<br>keys user:?     user:开头，最后一个字符任意<br>keys u[st]er:1  查询所有以u开头，以er:1结尾，中间包含一个字母，s或t<br></code></pre></td></tr></table></figure><h3 id="3-2-数据库指令"><a href="#3-2-数据库指令" class="headerlink" title="3.2  数据库指令"></a>3.2  数据库指令</h3><h4 id="3-2-1-key-的重复问题"><a href="#3-2-1-key-的重复问题" class="headerlink" title="3.2.1  key 的重复问题"></a>3.2.1  key 的重复问题</h4><p>在这个地方我们来讲一下数据库的常用指令，在讲这个东西之前，我们先思考一个问题：</p><p>假如说你们十个人同时操作redis，会不会出现key名字命名冲突的问题。</p><p>一定会，为什么?因为你的key是由程序而定义的。你想写什么写什么，那在使用的过程中大家都在不停的加，早晚有一天他会冲突的。</p><p>redis在使用过程中，伴随着操作数据量的增加，会出现大量的数据以及对应的key。</p><p>那这个问题我们要不要解决？要！怎么解决呢？我们最好把数据进行一个分类，除了命名规范我们做统一以外，如果还能把它分开，这样是不是冲突的机率就会小一些了，这就是咱们下面要说的解决方案！</p><h4 id="3-2-2-解决方案"><a href="#3-2-2-解决方案" class="headerlink" title="3.2.2  解决方案"></a>3.2.2  解决方案</h4><p>redis为每个服务提供有16个数据库，编号从0到15</p><p>每个数据库之间的数据相互独立</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p><p>在对应的数据库中划出一块区域，说他就是几，你就用几那块，同时，其他的这些都可以进行定义，一共是16个，这里边需要注意一点，他们这16个共用redis的内存。没有说谁大谁小，也就是说数字只是代表了一块儿区域，区域具体多大未知。这是数据库的一个分区的一个策略！</p><h4 id="3-2-3-数据库的基本操作"><a href="#3-2-3-数据库的基本操作" class="headerlink" title="3.2.3   数据库的基本操作"></a>3.2.3   数据库的基本操作</h4><p>切换数据库</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">index</span><br></code></pre></td></tr></table></figure><p>其他操作</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span><br></code></pre></td></tr></table></figure><h4 id="3-2-4-数据库扩展操作"><a href="#3-2-4-数据库扩展操作" class="headerlink" title="3.2.4  数据库扩展操作"></a>3.2.4  数据库扩展操作</h4><p>数据移动</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">move</span> key <span class="hljs-keyword">db</span><br></code></pre></td></tr></table></figure><p>数据总量</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dbsize</span><br></code></pre></td></tr></table></figure><p>数据清除</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flushdb  flushall</span><br></code></pre></td></tr></table></figure><h2 id="4-Jedis"><a href="#4-Jedis" class="headerlink" title="4. Jedis"></a>4. Jedis</h2><p>在学习完redis后，我们现在就要用Java来连接redis了，也就是我们的这一章要学的Jedis了。在这个部分，我们主要讲解以下3个内容：</p><p>HelloWorld（Jedis版）</p><p>Jedis简易工具类开发</p><p>可视化客户端</p><h3 id="4-1-Jedis简介"><a href="#4-1-Jedis简介" class="headerlink" title="4.1  Jedis简介"></a>4.1  Jedis简介</h3><h4 id="4-1-1-编程语言与redis"><a href="#4-1-1-编程语言与redis" class="headerlink" title="4.1.1  编程语言与redis"></a>4.1.1  编程语言与redis</h4><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/jedis1.png"></p><p>对于我们现在的数据来说，它是在我们的redis中，而最终我们是要做程序。那么程序就要和我们的redis进行连接。干什么事情呢？两件事：程序中有数据的时候，我们要把这些数据全部交给redis管理。同时，redis中的数据还能取出来，回到我们的应用程序中。那在这个过程中，在Java与redis之间打交道的这个东西就叫做Jedis.简单说，Jedis就是提供了Java与redis的连接服务的，里边有各种各样的API接口，你可以去调用它。</p><p>除了Jedis外，还有没有其他的这种连接服务呢？其实还有很多，了解一下：</p><p>Java语言连接redis服务 Jedis（SpringData、Redis 、 Lettuce）</p><p>其它语言：C 、C++ 、C# 、Erlang、Lua 、Objective-C 、Perl 、PHP 、Python 、Ruby 、Scala</p><h4 id="4-1-2-准备工作"><a href="#4-1-2-准备工作" class="headerlink" title="4.1.2  准备工作"></a>4.1.2  准备工作</h4><p>(1)jar包导入</p><p>下载地址：<a href="https://mvnrepository.com/artifact/redis.clients/jedis">https://mvnrepository.com/artifact/redis.clients/jedis</a></p><p>基于maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2)客户端连接redis</p><p>连接redis</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Jedis jedis</span> = new Jedis(<span class="hljs-string">&quot;localhost&quot;</span>, 6379);<br></code></pre></td></tr></table></figure><p>操作redis</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">jedis.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;itheima&quot;</span>);  jedis.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><p>关闭redis连接</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">jedis.close()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>API文档</p><p><a href="http://xetorthio.github.io/jedis/">http://xetorthio.github.io/jedis/</a></p><h4 id="4-1-3-代码实现"><a href="#4-1-3-代码实现" class="headerlink" title="4.1.3 代码实现"></a>4.1.3 代码实现</h4><p>创建：com.itheima.JedisTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.获取连接对象</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.40.130&quot;</span>,<span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//2.执行操作</span><br>        jedis.set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(hello);<br>        jedis.lpush(<span class="hljs-string">&quot;list1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>);<br>        List&lt;String&gt; list1 = jedis.lrange(<span class="hljs-string">&quot;list1&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (String s:list1 ) &#123;<br>            System.out.println(s);<br>        &#125;<br>        jedis.sadd(<span class="hljs-string">&quot;set1&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;poi&quot;</span>,<span class="hljs-string">&quot;cba&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> jedis.scard(<span class="hljs-string">&quot;set1&quot;</span>);<br>        System.out.println(len);<br>        <span class="hljs-comment">//3.关闭连接</span><br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-Jedis简易工具类开发"><a href="#4-2-Jedis简易工具类开发" class="headerlink" title="4.2  Jedis简易工具类开发"></a>4.2  Jedis简易工具类开发</h3><p>前面我们做的程序还是有点儿小问题，就是我们的Jedis对象的管理是我们自己创建的，真实企业开发中是不可能让你去new一个的，那接下来咱们就要做一个工具类，简单来说，就是做一个创建Jedis的这样的一个工具。</p><h4 id="4-2-1-基于连接池获取连接"><a href="#4-2-1-基于连接池获取连接" class="headerlink" title="4.2.1  基于连接池获取连接"></a>4.2.1  基于连接池获取连接</h4><p>JedisPool：Jedis提供的连接池技术 </p><p>poolConfig:连接池配置对象 </p><p>host:redis服务地址</p><p>port:redis服务端口号</p><p>JedisPool的构造器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">JedisPool</span><span class="hljs-params">(GenericObjectPoolConfig poolConfig, String host, <span class="hljs-type">int</span> port)</span> &#123;<br><span class="hljs-built_in">this</span>(poolConfig, host, port, <span class="hljs-number">2000</span>, (String)<span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, (String)<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-封装连接参数"><a href="#4-2-2-封装连接参数" class="headerlink" title="4.2.2  封装连接参数"></a>4.2.2  封装连接参数</h4><p>创建jedis的配置文件：jedis.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jedis.host</span>=<span class="hljs-string">192.168.40.130  </span><br><span class="hljs-attr">jedis.port</span>=<span class="hljs-string">6379  </span><br><span class="hljs-attr">jedis.maxTotal</span>=<span class="hljs-string">50  </span><br><span class="hljs-attr">jedis.maxIdle</span>=<span class="hljs-string">10</span><br></code></pre></td></tr></table></figure><h4 id="4-2-3-加载配置信息"><a href="#4-2-3-加载配置信息" class="headerlink" title="4.2.3  加载配置信息"></a>4.2.3  加载配置信息</h4><p> 创建JedisUtils：com.itheima.util.JedisUtils，使用静态代码块初始化资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> maxTotal;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> maxIdel;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String host;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> port;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPoolConfig jpc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool jp;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;redis&quot;</span>);<br>        maxTotal = Integer.parseInt(bundle.getString(<span class="hljs-string">&quot;redis.maxTotal&quot;</span>));<br>        maxIdel = Integer.parseInt(bundle.getString(<span class="hljs-string">&quot;redis.maxIdel&quot;</span>));<br>        host = bundle.getString(<span class="hljs-string">&quot;redis.host&quot;</span>);<br>        port = Integer.parseInt(bundle.getString(<span class="hljs-string">&quot;redis.port&quot;</span>));<br>        <span class="hljs-comment">//Jedis连接池配置</span><br>        jpc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        jpc.setMaxTotal(maxTotal);<br>        jpc.setMaxIdle(maxIdel);<br>        jp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jpc,host,port);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-4-获取连接"><a href="#4-2-4-获取连接" class="headerlink" title="4.2.4  获取连接"></a>4.2.4  获取连接</h4><p> 对外访问接口，提供jedis连接对象，连接从连接池获取，在JedisUtils中添加一个获取jedis的方法：getJedis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> jedisPool.getResource();<br><span class="hljs-keyword">return</span> jedis;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-可视化客户端"><a href="#4-3-可视化客户端" class="headerlink" title="4.3  可视化客户端"></a>4.3  可视化客户端</h3><p>4.3.1  Redis Desktop Manager</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E5%8F%AF%E8%A7%86%E5%8C%96.png"></p><h2 id="5-持久化"><a href="#5-持久化" class="headerlink" title="5. 持久化"></a>5. 持久化</h2><p>下面呢，进入到持久化的学习.这部分内容理解的东西多，操作的东西少。在这个部分，我们将讲解四个东西：</p><p>持久化简介</p><p>RDB</p><p>AOF</p><p>RDB与AOF区别</p><h3 id="5-1-持久化简介"><a href="#5-1-持久化简介" class="headerlink" title="5.1  持久化简介"></a>5.1  持久化简介</h3><h4 id="5-1-1-场景-意外断电"><a href="#5-1-1-场景-意外断电" class="headerlink" title="5.1.1  场景-意外断电"></a>5.1.1  场景-意外断电</h4><p>不知道大家有没有遇见过，就是正工作的时候停电了，如果你用的是笔记本电脑还好，你有电池，但如果你用的是台式机呢，那恐怕就比较灾难了，假如你现在正在写一个比较重要的文档，如果你要使用的是word，这种办公自动化软件的话，他一旦遇到停电，其实你不用担心，因为它会给你生成一些其他的文件。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E6%8C%81%E4%B9%85%E5%8C%96%E6%A1%88%E4%BE%8B1.png"></p><p>其实他们都在做一件事儿，帮你自动恢复，有了这个文件，你前面的东西就不再丢了。那什么是自动恢复呢？你要先了解他的整个过程。</p><p>我们说自动恢复，其实基于的一个前提就是他提前把你的数据给存起来了。你平常操作的所有信息都是在内存中的，而我们真正的信息是保存在硬盘中的，内存中的信息断电以后就消失了，硬盘中的信息断电以后还可以保留下来！</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E5%A4%87%E4%BB%BD.png"></p><p>我们将文件由内存中保存到硬盘中的这个过程，我们叫做数据保存，也就叫做持久化。但是把它保存下来不是你的目的，最终你还要把它再读取出来，它加载到内存中这个过程，我们叫做数据恢复，这就是我们所说的word为什么断电以后还能够给你保留文件，因为它执行了一个自动备份的过程，也就是通过自动的形式，把你的数据存储起来，那么有了这种形式以后，我们的数据就可以由内存到硬盘上实现保存。</p><h4 id="5-1-2-什么是持久化"><a href="#5-1-2-什么是持久化" class="headerlink" title="5.1.2  什么是持久化"></a>5.1.2  什么是持久化</h4><p>(1)什么是持久化</p><p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化 。</p><p>持久化用于防止数据的意外丢失，确保数据安全性。</p><p>(2)持久化过程保存什么？</p><p>我们知道一点，计算机中的数据全部都是二进制，如果现在我要你给我保存一组数据的话，你有什么样的方式呢，其实最简单的就是现在长什么样，我就记下来就行了，那么这种是记录纯粹的数据，也叫做快照存储，也就是它保存的是某一时刻的数据状态。</p><p>还有一种形式，它不记录你的数据，它记录你所有的操作过程，比如说大家用idea的时候，有没有遇到过写错了ctrl+z撤销，然后ctrl+y还能恢复，这个地方它也是在记录，但是记录的是你所有的操作过程，那我想问一下，操作过程，我都给你留下来了，你说数据还会丢吗？肯定不会丢，因为你所有的操作过程我都保存了。这种保存操作过程的存储，用专业术语来说可以说是日志，这是两种不同的保存数据的形式啊。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E6%8C%81%E4%B9%85%E5%8C%962.png"></p><p>总结一下：</p><p>第一种：将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据。</p><p>第二种：将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程。</p><h3 id="5-2-RDB"><a href="#5-2-RDB" class="headerlink" title="5.2  RDB"></a>5.2  RDB</h3><h4 id="5-2-1-save指令"><a href="#5-2-1-save指令" class="headerlink" title="5.2.1  save指令"></a>5.2.1  save指令</h4><p>手动执行一次保存操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">save</span><br></code></pre></td></tr></table></figure><p><strong>save指令相关配置</strong></p><p>设置本地数据库文件名，默认值为 dump.rdb，通常设置为dump-端口号.rdb</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dbfilename filename</span><br></code></pre></td></tr></table></figure><p>设置存储.rdb文件的路径，通常设置成存储空间较大的目录中，目录名称data</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">dir</span> <span class="hljs-built_in">path</span><br></code></pre></td></tr></table></figure><p>设置存储至本地数据库时是否压缩数据，默认yes，设置为no，节省 CPU 运行时间，但存储文件变大</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rdbcompression</span> <span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>设置读写文件过程是否进行RDB格式校验，默认yes，设置为no，节约读写10%时间消耗，单存在数据损坏的风险</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rdbchecksum</span> <span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p><strong>save指令工作原理</strong></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/rdb%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F.png"></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F2.png"></p><p>需要注意一个问题，来看一下，现在有四个客户端各自要执行一个指令，把这些指令发送到redis服务器后，他们执行有一个先后顺序问题，假定就是按照1234的顺序放过去的话，那会是什么样的？</p><p>记得redis是个单线程的工作模式，它会创建一个任务队列，所有的命令都会进到这个队列里边，在这儿排队执行，执行完一个消失一个，当所有的命令都执行完了，OK，结果达到了。</p><p>但是如果现在我们执行的时候save指令保存的数据量很大会是什么现象呢？</p><p>他会非常耗时，以至于影响到它在执行的时候，后面的指令都要等，所以说这种模式是不友好的，这是save指令对应的一个问题，当cpu执行的时候会阻塞redis服务器，直到他执行完毕，所以说我们不建议大家在线上环境用save指令。</p><h4 id="5-2-2-bgsave指令"><a href="#5-2-2-bgsave指令" class="headerlink" title="5.2.2  bgsave指令"></a>5.2.2  bgsave指令</h4><p>之前我们讲到了当save指令的数据量过大时，单线程执行方式造成效率过低，那应该如何处理？</p><p>此时我们可以使用：<strong>bgsave</strong>指令，bg其实是background的意思，后台执行的意思</p><p>手动启动后台保存操作，但不是立即执行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">bgsave</span><br></code></pre></td></tr></table></figure><p><strong>bgsave指令相关配置</strong></p><p>后台存储过程中如果出现错误现象，是否停止保存操作，默认yes</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">stop-writes-on-bgsave-error</span> <span class="hljs-string">yes|no</span><br></code></pre></td></tr></table></figure><p>其 他</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dbfilename</span> <span class="hljs-string">filename  </span><br><span class="hljs-attr">dir</span> <span class="hljs-string">path  </span><br><span class="hljs-attr">rdbcompression</span> <span class="hljs-string">yes|no  </span><br><span class="hljs-attr">rdbchecksum</span> <span class="hljs-string">yes|no</span><br></code></pre></td></tr></table></figure><p><strong>bgsave指令工作原理</strong></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/rdb%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F3.png"></p><p>当执行bgsave的时候，客户端发出bgsave指令给到redis服务器。注意，这个时候服务器马上回一个结果告诉客户端后台已经开始了，与此同时它会创建一个子进程，使用Linux的fork函数创建一个子进程，让这个子进程去执行save相关的操作，此时我们可以想一下，我们主进程一直在处理指令，而子进程在执行后台的保存，它会不会干扰到主进程的执行吗？</p><p>答案是不会，所以说他才是主流方案。子进程开始执行之后，它就会创建啊RDB文件把它存起来，操作完以后他会把这个结果返回，也就是说bgsave的过程分成两个过程，第一个是服务端拿到指令直接告诉客户端开始执行了；另外一个过程是一个子进程在完成后台的保存操作，操作完以后回一个消息。</p><h4 id="5-2-3-save配置自动执行"><a href="#5-2-3-save配置自动执行" class="headerlink" title="5.2.3 save配置自动执行"></a>5.2.3 save配置自动执行</h4><p>设置自动持久化的条件，满足限定时间范围内key的变化数量达到指定数量即进行持久化</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">save</span> <span class="hljs-string">second changes</span><br></code></pre></td></tr></table></figure><p>参数</p><p>second：监控时间范围</p><p>changes：监控key的变化量</p><p>范例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">save 900 1<br>save 300 10<br>save 60 10000<br></code></pre></td></tr></table></figure><p>其他相关配置：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">dbfilename filename<br>dir path<br>rdbcompression yes|no<br>rdbchecksum yes|no<br>stop-writes-on-bgsave-error yes|no<br></code></pre></td></tr></table></figure><p><strong>save配置工作原理</strong></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F4.png"></p><h4 id="5-2-4-RDB三种启动方式对比"><a href="#5-2-4-RDB三种启动方式对比" class="headerlink" title="5.2.4 RDB三种启动方式对比"></a>5.2.4 RDB三种启动方式对比</h4><table><thead><tr><th>方式</th><th>save指令</th><th>bgsave指令</th></tr></thead><tbody><tr><td>读写</td><td>同步</td><td>异步</td></tr><tr><td>阻塞客户端指令</td><td>是</td><td>否</td></tr><tr><td>额外内存消耗</td><td>否</td><td>是</td></tr><tr><td>启动新进程</td><td>否</td><td>是</td></tr></tbody></table><p><strong>RDB特殊启动形式</strong></p><p>服务器运行过程中重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">debug reload<br></code></pre></td></tr></table></figure><p>关闭服务器时指定保存数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shutdown save<br></code></pre></td></tr></table></figure><p>全量复制（在主从复制中详细讲解）</p><p><strong>RDB优点：</strong></p><ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li></ul><p><strong>RDB缺点</strong></p><ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul><h3 id="5-3-AOF"><a href="#5-3-AOF" class="headerlink" title="5.3  AOF"></a>5.3  AOF</h3><p>为什么要有AOF,这得从RDB的存储的弊端说起：</p><ul><li>存储数据量较大，效率较低，基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</li><li>大数据量下的IO性能较低</li><li>基于fork创建子进程，内存产生额外消耗</li><li>宕机带来的数据丢失风险</li></ul><p>那解决的思路是什么呢？</p><ul><li>不写全数据，仅记录部分数据</li><li>降低区分数据是否改变的难度，改记录数据为记录操作过程</li><li>对所有操作均进行记录，排除丢失数据的风险</li></ul><h4 id="5-3-1-AOF概念"><a href="#5-3-1-AOF概念" class="headerlink" title="5.3.1 AOF概念"></a>5.3.1 AOF概念</h4><p><strong>AOF</strong>(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令 达到恢复数据的目的。<strong>与RDB相比可以简单理解为由记录数据改为记录数据产生的变化</strong></p><p>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</p><p><strong>AOF写数据过程</strong></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/20220924140622.png"></p><p><strong>启动AOF相关配置</strong></p><p>开启AOF持久化功能，默认no，即不开启状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">appendonly</span> <span class="hljs-string">yes|no</span><br></code></pre></td></tr></table></figure><p>AOF持久化文件名，默认文件名为appendonly.aof，建议配置为appendonly-端口号.aof</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">appendfilename</span> <span class="hljs-string">filename</span><br></code></pre></td></tr></table></figure><p>AOF持久化文件保存路径，与RDB持久化文件保持一致即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dir</span><br></code></pre></td></tr></table></figure><p>AOF写数据策略，默认为everysec</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">appendfsync</span> <span class="hljs-string">always|everysec|no</span><br></code></pre></td></tr></table></figure><h4 id="5-3-2-AOF执行策略"><a href="#5-3-2-AOF执行策略" class="headerlink" title="5.3.2 AOF执行策略"></a>5.3.2 AOF执行策略</h4><p>AOF写数据三种策略(appendfsync)</p><ul><li><p><strong>always</strong>(每次）：每次写入操作均同步到AOF文件中数据零误差，性能较低，不建议使用。</p></li><li><p><strong>everysec</strong>（每秒）：每秒将缓冲区中的指令同步到AOF文件中，在系统突然宕机的情况下丢失1秒内的数据 数据准确性较高，性能较高，建议使用，也是默认配置</p></li><li><p><strong>no</strong>（系统控制）：由操作系统控制每次同步到AOF文件的周期，整体过程不可控</p></li></ul><h4 id="5-3-3-AOF重写"><a href="#5-3-3-AOF重写" class="headerlink" title="5.3.3 AOF重写"></a>5.3.3 AOF重写</h4><p>场景：AOF写数据遇到的问题，如果连续执行如下指令该如何处理</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/2.png"></p><p><strong>什么叫AOF重写？</strong></p><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重 写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干个条命令执行结 果转化成最终结果数据对应的指令进行记录。</p><p><strong>AOF重写作用</strong></p><ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul><p><strong>AOF重写规则</strong></p><ul><li><p>进程内具有时效性的数据，并且数据已超时将不再写入文件</p></li><li><p>非写入类的无效指令将被忽略，只保留最终数据的写入命令</p><p>如del key1、 hdel key2、srem key3、set key4 111、set key4 222等</p><p>如select指令虽然不更改数据，但是更改了数据的存储位置，此类命令同样需要记录</p></li><li><p>对同一数据的多条写命令合并为一条命令</p></li></ul><p>如lpushlist1 a、lpush list1 b、lpush list1 c可以转化为：lpush list1 a b c。</p><p>为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</p><p><strong>AOF重写方式</strong></p><ul><li>手动重写</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">bgrewriteaof</span><br></code></pre></td></tr></table></figure><p><strong>手动重写原理分析：</strong></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/3.png"></p><ul><li>自动重写</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">auto-aof-rewrite-min-size</span> <span class="hljs-string">size</span><br><span class="hljs-attr">auto-aof-rewrite-percentage</span> <span class="hljs-string">percentage</span><br></code></pre></td></tr></table></figure><p>自动重写触发条件设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">auto-aof-rewrite-min-size</span> <span class="hljs-string">size</span><br><span class="hljs-attr">auto-aof-rewrite-percentage</span> <span class="hljs-string">percent</span><br></code></pre></td></tr></table></figure><p>自动重写触发比对参数（ 运行指令info Persistence获取具体信息 ）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">aof_current_size</span>  <span class="hljs-string"></span><br><span class="hljs-attr">aof_base_size</span><br></code></pre></td></tr></table></figure><p> 自动重写触发条件公式：</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/4.png"></p><h4 id="5-3-4-AOF工作流程及重写流程"><a href="#5-3-4-AOF工作流程及重写流程" class="headerlink" title="5.3.4 AOF工作流程及重写流程"></a>5.3.4 AOF工作流程及重写流程</h4><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/20220924140822.png"></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/AOF%E6%B5%81%E7%A8%8B2.png"></p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/AOF3.png"></p><h3 id="5-4-RDB与AOF区别"><a href="#5-4-RDB与AOF区别" class="headerlink" title="5.4  RDB与AOF区别"></a>5.4  RDB与AOF区别</h3><h4 id="5-4-1-RDB与AOF对比（优缺点）"><a href="#5-4-1-RDB与AOF对比（优缺点）" class="headerlink" title="5.4.1 RDB与AOF对比（优缺点）"></a>5.4.1 RDB与AOF对比（优缺点）</h4><table><thead><tr><th>持久化方式</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>占用存储空间</td><td>小（数据级：压缩）</td><td>大（指令级：重写）</td></tr><tr><td>存储速度</td><td>慢</td><td>快</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>会丢失数据</td><td>依据策略决定</td></tr><tr><td>资源消耗</td><td>高&#x2F;重量级</td><td>低&#x2F;轻量级</td></tr><tr><td>启动优先级</td><td>低</td><td>高</td></tr></tbody></table><h4 id="5-4-2-RDB与AOF应用场景"><a href="#5-4-2-RDB与AOF应用场景" class="headerlink" title="5.4.2 RDB与AOF应用场景"></a>5.4.2 RDB与AOF应用场景</h4><p>RDB与AOF的选择之惑</p><ul><li>对数据非常敏感，建议使用默认的AOF持久化方案</li></ul><p>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出 现问题时，最多丢失0-1秒内的数据。</p><p>注意：由于AOF文件存储体积较大，且恢复速度较慢</p><ul><li>数据呈现阶段有效性，建议使用RDB持久化方案</li></ul><p>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段 点数据恢复通常采用RDB方案</p><p>注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结：</p><p><strong>综合比对</strong></p><ul><li>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</li><li>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</li><li>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</li><li>灾难恢复选用RDB</li><li>双保险策略，同时开启 RDB和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据结构</title>
    <link href="/2022/09/26/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/09/26/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="Reids数据结构"><a href="#Reids数据结构" class="headerlink" title="Reids数据结构"></a>Reids数据结构</h3><p class="note note-success">    数据库掌握的就是数据结构，Redis数据结构就是“键（key）”；“键”道不过是赋值//取值/删除，因此要想入道，就从基础开始学习</p><table><thead><tr><th align="center">数据类型</th><th align="center">赋值语法</th><th align="center">取值语法</th><th align="center">删除语法</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">SET key_name value</td><td align="center">GET key_name</td><td align="center">DEL key_name</td><td align="center">String</td></tr><tr><td align="center">Hash</td><td align="center">HSET key_name field value</td><td align="center">HGET key_name field</td><td align="center">HDEL key_name field</td><td align="center">Map</td></tr><tr><td align="center">List</td><td align="center">LPUSH&#x2F;RPUSH key_name value1…valueN</td><td align="center">LRANGE key_name  0 -1</td><td align="center">LREM key_name count value</td><td align="center">List</td></tr><tr><td align="center">Set</td><td align="center">SADD key_name value1…valueN</td><td align="center">SMEMBERS key_name</td><td align="center">SREM key_name value1…valueN</td><td align="center">Set</td></tr><tr><td align="center">Zset</td><td align="center">ZADD key_name   score value</td><td align="center">ZRANGE key_name 0 -1[WITHSCORES]</td><td align="center">ZRANK key [member]</td><td align="center">Sort Set</td></tr></tbody></table><p>*<strong>注意：</strong>DEL key命令可以删除任何key</p><h3 id="String命令示例"><a href="#String命令示例" class="headerlink" title="String命令示例"></a>String命令示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 对不存在的键进行设置<br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> key &quot;value&quot;<br>OK<br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">GET</span> key<br>&quot;value&quot;<br> <br> <br># 对已存在的键进行设置<br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> key &quot;new-value&quot;<br>OK<br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">GET</span> key<br>&quot;new-value&quot;<br></code></pre></td></tr></table></figure><h3 id="Hset命令示例"><a href="#Hset命令示例" class="headerlink" title="Hset命令示例"></a>Hset命令示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> HSET myhash field1 &quot;foo&quot;<br>OK<br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> HGET myhash field1<br>&quot;foo&quot;<br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> HSET website google &quot;www.g.cn&quot;       # 设置一个新域<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span>HSET website google &quot;www.google.com&quot; # 覆盖一个旧域<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="List命令示例"><a href="#List命令示例" class="headerlink" title="List命令示例"></a>List命令示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">#LPUSH KEY_NAME VALUE1.. VALUEN<br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> LPUSH list1 &quot;foo&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> LPUSH list1 &quot;bar&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">2</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> LRANGE list1 <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br><span class="hljs-number">1</span>) &quot;foo&quot;<br><span class="hljs-number">2</span>) &quot;bar<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#LRANGE KEY_NAME <span class="hljs-keyword">START</span> <span class="hljs-keyword">END</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> LPUSH list1 &quot;foo&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> LPUSH list1 &quot;bar&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">2</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> LPUSHX list1 &quot;bar&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">0</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> LRANGE list1 <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br><span class="hljs-number">1</span>) &quot;foo&quot;<br><span class="hljs-number">2</span>) &quot;bar&quot;<br><span class="hljs-number">3</span>) &quot;bar&quot;<br></code></pre></td></tr></table></figure><h3 id="Set命令示例"><a href="#Set命令示例" class="headerlink" title="Set命令示例"></a>Set命令示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># SADD KEY_NAME VALUE1..VALUEN<br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> SADD myset &quot;hello&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> SADD myset &quot;foo&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> SADD myset &quot;hello&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">0</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> SMEMBERS myset<br><span class="hljs-number">1</span>) &quot;hello&quot;<br><span class="hljs-number">2</span>) &quot;foo&quot;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">#SMEMBERS KEY <span class="hljs-keyword">VALUE</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> SADD myset1 &quot;hello&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> SADD myset1 &quot;world&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> SMEMBERS myset1<br><span class="hljs-number">1</span>) &quot;World&quot;<br><span class="hljs-number">2</span>) &quot;Hello&quot;<br></code></pre></td></tr></table></figure><h3 id="Zset命令示例"><a href="#Zset命令示例" class="headerlink" title="Zset命令示例"></a>Zset命令示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">#ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN<br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> ZADD myset <span class="hljs-number">1</span> &quot;hello&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> ZADD myset <span class="hljs-number">1</span> &quot;foo&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> ZADD myset <span class="hljs-number">2</span> &quot;world&quot; <span class="hljs-number">3</span> &quot;bar&quot;<br>(<span class="hljs-type">integer</span>) <span class="hljs-number">2</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> ZRANGE myzset <span class="hljs-number">0</span> <span class="hljs-number">-1</span> WITHSCORES<br><span class="hljs-number">1</span>) &quot;hello&quot;<br><span class="hljs-number">2</span>) &quot;1&quot;<br><span class="hljs-number">3</span>) &quot;foo&quot;<br><span class="hljs-number">4</span>) &quot;1&quot;<br><span class="hljs-number">5</span>) &quot;world&quot;<br><span class="hljs-number">6</span>) &quot;2&quot;<br><span class="hljs-number">7</span>) &quot;bar&quot;<br><span class="hljs-number">8</span>) &quot;3&quot;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"># ZRANGE key <span class="hljs-keyword">start</span> stop [WITHSCORES]<br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> ZRANGE salary <span class="hljs-number">0</span> <span class="hljs-number">-1</span> WITHSCORES             # 显示整个有序集成员<br><span class="hljs-number">1</span>) &quot;jack&quot;<br><span class="hljs-number">2</span>) &quot;3500&quot;<br><span class="hljs-number">3</span>) &quot;tom&quot;<br><span class="hljs-number">4</span>) &quot;5000&quot;<br><span class="hljs-number">5</span>) &quot;boss&quot;<br><span class="hljs-number">6</span>) &quot;10086&quot;<br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> ZRANGE salary <span class="hljs-number">1</span> <span class="hljs-number">2</span> WITHSCORES              # 显示有序集下标区间 <span class="hljs-number">1</span> 至 <span class="hljs-number">2</span> 的成员<br><span class="hljs-number">1</span>) &quot;tom&quot;<br><span class="hljs-number">2</span>) &quot;5000&quot;<br><span class="hljs-number">3</span>) &quot;boss&quot;<br><span class="hljs-number">4</span>) &quot;10086&quot;<br> <br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> ZRANGE salary <span class="hljs-number">0</span> <span class="hljs-number">200000</span> WITHSCORES         # 测试 <span class="hljs-keyword">end</span> 下标超出最大下标时的情况<br><span class="hljs-number">1</span>) &quot;jack&quot;<br><span class="hljs-number">2</span>) &quot;3500&quot;<br><span class="hljs-number">3</span>) &quot;tom&quot;<br><span class="hljs-number">4</span>) &quot;5000&quot;<br><span class="hljs-number">5</span>) &quot;boss&quot;<br><span class="hljs-number">6</span>) &quot;10086&quot;<br> <br>redis <span class="hljs-operator">&gt;</span> ZRANGE salary <span class="hljs-number">200000</span> <span class="hljs-number">3000000</span> WITHSCORES                  # 测试当给定区间不存在于有序集时的情况<br>(<span class="hljs-keyword">empty</span> list <span class="hljs-keyword">or</span> <span class="hljs-keyword">set</span>)<br></code></pre></td></tr></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><p class="note note-success">    Redis在实际使用过程中更多的用作缓存，然而缓存的数据一般都是需要设置生存时间的，即：到期后数据销毁。</p><table><thead><tr><th>keys命令</th><th>描述</th></tr></thead><tbody><tr><td>EXPIRE key seconds</td><td>设置key的生存时间（单位：秒）key在多少秒后会自动删除</td></tr><tr><td>TTL key</td><td>查看key的生存时间</td></tr><tr><td>PERSIST key</td><td>清除生存时间</td></tr><tr><td>PEXPIRE key milliseconds</td><td>生存时间设置单位为：毫秒</td></tr><tr><td>KEYS *</td><td>查询数据库中素有key键</td></tr><tr><td>SDIFF setB setA</td><td>集合的差集运算A-B（difference）</td></tr><tr><td>SINTER setA setB</td><td>集合的交集运算A ∩ B（intersection）</td></tr><tr><td>SUNION setA setB</td><td>集合的并集运算A ∪B（union）</td></tr></tbody></table><p><a href="https://www.redis.net.cn/order/">redis命令示例查询</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>POI-java与Excel操作</title>
    <link href="/2022/09/23/POI-java%E4%B8%8EExcel%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/09/23/POI-java%E4%B8%8EExcel%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p class="note note-success">    Apache POI是用Java编写的免费开源的跨平台的Java API，Apache POI提供API给Java程 序对Microsoft Office格式档案读和写的功能，其中使用最多的就是使用POI操作Excel文 件。</p><h3 id="导入maven坐标"><a href="#导入maven坐标" class="headerlink" title="导入maven坐标"></a>导入maven坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="POI结构说明"><a href="#POI结构说明" class="headerlink" title="POI结构说明"></a>POI结构说明</h3><ul><li>HSSF提供读写Microsoft Excel XLS格式档案的功能。</li><li>XSSF提供读写Microsoft Excel OOXML XLSX格式档案的功能。</li><li>HWPF提供读写Microsoft Word DOC格式档案的功能。</li><li>HSLF提供读写Microsoft PowerPoint格式档案的功能。</li><li>HDGF提供读Microsoft Visio格式档案的功能。</li><li>HPBF提供读Microsoft Publisher格式档案的功能。</li><li>HSMF提供读Microsoft Outlook格式档案的功能。</li></ul><h3 id="POI-Excel写入（Writer）"><a href="#POI-Excel写入（Writer）" class="headerlink" title="POI-Excel写入（Writer）"></a>POI-Excel写入（Writer）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java-poi-excel-使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelWriterTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 1。 创造工作簿 workbook</span><br>        <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>        <span class="hljs-comment">// 2. 创造工作表 sheet</span><br>        <span class="hljs-type">HSSFSheet</span> <span class="hljs-variable">sheet1</span> <span class="hljs-operator">=</span> workbook.createSheet(<span class="hljs-string">&quot;sheet1&quot;</span>);<br>        <span class="hljs-comment">// 3. 工作行 row    表头0行</span><br>        <span class="hljs-type">HSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet1.createRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 4. 单元格 cell   表头字段</span><br>        row.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;姓名&quot;</span>);<br>        row.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;年龄&quot;</span>);<br>        <span class="hljs-comment">// 从1行开始创建表row 并创建cell赋值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">HSSFRow</span> <span class="hljs-variable">rowi</span> <span class="hljs-operator">=</span> sheet1.createRow(i);<br>            rowi.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;姓名&quot;</span>);<br>            rowi.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;年龄&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// IO流输出文件</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\0\\Desktop\\POI.xls&quot;</span>);<br>        workbook.write(fileOutputStream);<br>        fileOutputStream.flush();<br>        fileOutputStream.close();<br>        System.out.println(<span class="hljs-string">&quot;Excel创建成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POI-Excel读取（Reader）"><a href="#POI-Excel读取（Reader）" class="headerlink" title="POI-Excel读取（Reader）"></a>POI-Excel读取（Reader）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java-poi-excel-xls-Reader使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelReaderTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\0\\Desktop\\POI.xls&quot;</span>));<br>        <span class="hljs-type">HSSFSheet</span> <span class="hljs-variable">sheet1</span> <span class="hljs-operator">=</span> workbook.getSheet(<span class="hljs-string">&quot;sheet1&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;sheet1.getLastRowNum(); i++) &#123;<br>            <span class="hljs-type">HSSFRow</span> <span class="hljs-variable">rowi</span> <span class="hljs-operator">=</span> sheet1.getRow(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">row1</span> <span class="hljs-operator">=</span> rowi.getCell(<span class="hljs-number">0</span>).getStringCellValue();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">row2</span> <span class="hljs-operator">=</span> rowi.getCell(<span class="hljs-number">1</span>).getStringCellValue();<br>            System.out.println(row1+<span class="hljs-string">&quot;|&quot;</span>+row2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POI-Excel操作工具类"><a href="#POI-Excel操作工具类" class="headerlink" title="POI-Excel操作工具类"></a>POI-Excel操作工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * excel 操作工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">POIUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">xls</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xls&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">xlsx</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xlsx&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATE_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读excel文件并返回</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String[]&gt; readExcel(MultipartFile file) <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 检查文件</span><br>        checkFile(file);<br>        <span class="hljs-comment">// 获得Workbook工作簿对象</span><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workBook</span> <span class="hljs-operator">=</span> getWorkBook(file);<br>        <span class="hljs-comment">// 创建返回对象，把每行中的值作为一个数组，所有行作为一个集合返回</span><br>        List&lt;String[]&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (workBook != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">sheetNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; sheetNum &lt; workBook.getNumberOfSheets(); sheetNum++) &#123;<br>                <span class="hljs-comment">// 获得当前sheet工作表</span><br>                <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workBook.getSheetAt(sheetNum);<br>                <span class="hljs-keyword">if</span> (sheet == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">// 获得当前sheet的开始行</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">firstRowNum</span> <span class="hljs-operator">=</span> sheet.getFirstRowNum();<br>                <span class="hljs-comment">// 获得当前sheet的结束行</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">lastRowNum</span> <span class="hljs-operator">=</span> sheet.getLastRowNum();<br>                <span class="hljs-comment">// 循环除了第一行的所有行</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> firstRowNum + <span class="hljs-number">1</span>; rowNum &lt;= lastRowNum; rowNum++) &#123;<br>                    <span class="hljs-comment">// 获得当前行</span><br>                    <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(rowNum);<br>                    <span class="hljs-keyword">if</span> (row == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// 获得当前行的开始列</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">firstCellNum</span> <span class="hljs-operator">=</span> row.getFirstCellNum();<br>                    <span class="hljs-comment">// 获得当前行的列数</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">lastCellNum</span> <span class="hljs-operator">=</span> row.getPhysicalNumberOfCells();<br>                    String[] cells = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[row.getPhysicalNumberOfCells()];<br>                    <span class="hljs-comment">// 循环当前行</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> firstCellNum; cellNum &lt; lastCellNum; cellNum++) &#123;<br>                        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.getCell(cellNum);<br>                        cells[cellNum] = getCellValue(cell);<br>                    &#125;<br>                    list.add(cells);<br>                &#125;<br>            &#125;<br>            workBook.close();<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">// 校验文件是否合法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkFile</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 判断文件是否存在</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == file) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;文件不存在！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 获得文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-comment">// 判断文件是否是excel文件</span><br>        <span class="hljs-keyword">if</span> (!fileName.endsWith(xls) &amp;&amp; !fileName.endsWith(xlsx)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(fileName + <span class="hljs-string">&quot;不是excel文件&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Workbook <span class="hljs-title function_">getWorkBook</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br>        <span class="hljs-comment">// 获得文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-comment">// 创建Workbook工作薄对象，表示整个excel</span><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取excel文件的io流</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> file.getInputStream();<br>            <span class="hljs-comment">// 根据文件后缀名不同(xls和xlsx)获得不同的Workbook实现类对象</span><br>            <span class="hljs-keyword">if</span> (fileName.endsWith(xls)) &#123;<br>                <span class="hljs-comment">// 2003</span><br>                workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(is);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fileName.endsWith(xlsx)) &#123;<br>                <span class="hljs-comment">// 2007</span><br>                workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(is);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> workbook;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCellValue</span><span class="hljs-params">(Cell cell)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cellValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (cell == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> cellValue;<br>        &#125;<br>        <span class="hljs-comment">// 如果当前单元格内容为日期类型，需要特殊处理</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataFormatString</span> <span class="hljs-operator">=</span> cell.getCellStyle().getDataFormatString();<br>        <span class="hljs-keyword">if</span> (dataFormatString.equals(<span class="hljs-string">&quot;m/d/yy&quot;</span>)) &#123;<br>            cellValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(DATE_FORMAT).format(cell.getDateCellValue());<br>            <span class="hljs-keyword">return</span> cellValue;<br>        &#125;<br>        <span class="hljs-comment">// 把数字当成String来读，避免出现1读成1.0的情况</span><br>        <span class="hljs-keyword">if</span> (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) &#123;<br>            cell.setCellType(Cell.CELL_TYPE_STRING);<br>        &#125;<br>        <span class="hljs-comment">// 判断数据的类型</span><br>        <span class="hljs-keyword">switch</span> (cell.getCellType()) &#123;<br>            <span class="hljs-keyword">case</span> Cell.CELL_TYPE_NUMERIC: <span class="hljs-comment">// 数字</span><br>                cellValue = String.valueOf(cell.getNumericCellValue());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> Cell.CELL_TYPE_STRING: <span class="hljs-comment">// 字符串</span><br>                cellValue = String.valueOf(cell.getStringCellValue());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> Cell.CELL_TYPE_BOOLEAN: <span class="hljs-comment">// Boolean</span><br>                cellValue = String.valueOf(cell.getBooleanCellValue());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> Cell.CELL_TYPE_FORMULA: <span class="hljs-comment">// 公式</span><br>                cellValue = String.valueOf(cell.getCellFormula());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> Cell.CELL_TYPE_BLANK: <span class="hljs-comment">// 空值</span><br>                cellValue = <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> Cell.CELL_TYPE_ERROR: <span class="hljs-comment">// 故障</span><br>                cellValue = <span class="hljs-string">&quot;非法字符&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                cellValue = <span class="hljs-string">&quot;未知类型&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cellValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://poi.apache.org/">1.POI官网</a></p><p><a href="https://www.yiibai.com/apache_poi/apache_poi_core_classes.html">2.POI常用API中文查询</a></p>]]></content>
    
    
    <categories>
      
      <category>Utils</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>POI</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis传递参数实现方式</title>
    <link href="/2022/09/21/Mybatis%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/09/21/Mybatis%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><p>传参的基本方式有两种：<code>#&#123;param&#125;</code> <code>$&#123;param&#125;</code></p><p class="note note-success">    #{}为参数占位符?，即SQL预编译 <B>推荐使用</B></br>    ${}为字符串替换，即SQL拼接</p><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><h4 id="实体传入"><a href="#实体传入" class="headerlink" title="实体传入"></a>实体传入</h4><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> userMapper.getUserInfo(user);<br>    <span class="hljs-keyword">return</span> userInfo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapper层："><a href="#mapper层：" class="headerlink" title="mapper层："></a>mapper层：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>    User <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(User User)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapper-xml："><a href="#mapper-xml：" class="headerlink" title="mapper.xml："></a>mapper.xml：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserInfo&quot;</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.pojo.User&quot;</span>&gt;</span><br>    select userId<br>    from users<br>    where userId=#&#123;userId&#125; and sex=#&#123;sex&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Map传入"><a href="#Map传入" class="headerlink" title="Map传入"></a>Map传入</h3><h4 id="service层："><a href="#service层：" class="headerlink" title="service层："></a>service层：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(Map map)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getUserInfo(map);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapper层：-1"><a href="#mapper层：-1" class="headerlink" title="mapper层："></a>mapper层：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>    User <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(Map map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapper-xml层："><a href="#mapper-xml层：" class="headerlink" title="mapper.xml层："></a>mapper.xml层：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserInfo&quot;</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span>  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.pojo.User&quot;</span>&gt;</span><br>    select userId<br>    from users<br>    where userId=#&#123;userId&#125; and sex=#&#123;sex&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注解-Param传入"><a href="#注解-Param传入" class="headerlink" title="注解@Param传入"></a>注解@Param传入</h3><h4 id="service层：-1"><a href="#service层：-1" class="headerlink" title="service层："></a>service层：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(User user,Integer age)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">userResult</span> <span class="hljs-operator">=</span> userMapper.getUserInfo(user,age);<br>    <span class="hljs-keyword">return</span> userResult;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapper层：-2"><a href="#mapper层：-2" class="headerlink" title="mapper层："></a>mapper层：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>    User <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userInfo&quot;)</span> User user,<span class="hljs-meta">@Param(&quot;age&quot;)</span> Integer age)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapper-xml：-1"><a href="#mapper-xml：-1" class="headerlink" title="mapper.xml："></a>mapper.xml：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserInfo&quot;</span>   <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.pojo.User&quot;</span>&gt;</span><br>    select userId<br>    from users<br>    where userId=#&#123;userInfo.userId&#125; and sex=#&#123;userInfo.sex&#125; and age=#&#123;age&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考：</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/cangqinglang/p/14237361.html">mybatis 传递参数的7种方法 </a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://www.codebaoku.com/it-java/it-java-238108.html">SpringBoot 使用MyBatis的几种传参规范示例</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>DAO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cron表达式详解</title>
    <link href="/2022/09/21/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/09/21/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p class="note note-success">    <b>cron</b>是基于时间的任务管理系统，通过cron在固定时间、日期、间隔下，运行定期任务，如：定期下载文件和邮件。cron该词来源于希腊语chronos（χρόνος），原意是时间。</p>通常，任务时间表（crontab）文件储存的指令被crond（守护进程）激活，守护进程在后台运行，并每一分钟检查是否有定期的作业需要执行。这类作业一般称为cron jobs。<h3 id="cron表达式格式"><a href="#cron表达式格式" class="headerlink" title="cron表达式格式"></a>cron表达式格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">┌───────────── 秒 <span class="hljs-keyword">second</span> (<span class="hljs-number">0</span> <span class="hljs-operator">-</span> <span class="hljs-number">59</span>)<br>│ ┌───────────── 分 <span class="hljs-keyword">minute</span> (<span class="hljs-number">0</span> <span class="hljs-operator">-</span> <span class="hljs-number">59</span>)<br>│ │ ┌───────────── 时 <span class="hljs-keyword">hour</span> (<span class="hljs-number">0</span> <span class="hljs-operator">-</span> <span class="hljs-number">23</span>)<br>│ │ │ ┌───────────── 日 <span class="hljs-keyword">day</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">month</span> (<span class="hljs-number">1</span> <span class="hljs-operator">-</span> <span class="hljs-number">31</span>) <span class="hljs-keyword">or</span> L <span class="hljs-keyword">for</span> <span class="hljs-keyword">last</span> <span class="hljs-keyword">day</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">month</span><br>│ │ │ │ ┌───────────── 月 <span class="hljs-keyword">month</span> (<span class="hljs-number">1</span> <span class="hljs-operator">-</span> <span class="hljs-number">12</span> <span class="hljs-keyword">or</span> Jan<span class="hljs-operator">/</span>January <span class="hljs-operator">-</span> <span class="hljs-type">Dec</span><span class="hljs-operator">/</span>December)<br>│ │ │ │ │ ┌─────────────周 <span class="hljs-keyword">day</span> <span class="hljs-keyword">of</span> the week (<span class="hljs-number">0</span> <span class="hljs-operator">-</span> <span class="hljs-number">6</span> <span class="hljs-keyword">or</span> Sun<span class="hljs-operator">/</span>Sunday <span class="hljs-operator">-</span> Sat<span class="hljs-operator">/</span>Saturday)<br>│ │ │ │ │ │ ┌─────────────年（一般省略，用不上）<br>│ │ │ │ │ │ │<br><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <br></code></pre></td></tr></table></figure><h3 id="cron表达式字符含义"><a href="#cron表达式字符含义" class="headerlink" title="cron表达式字符含义"></a>cron表达式字符含义</h3><p>关于 <strong>cron</strong> 的各个域的定义如下表格所示：</p><table><thead><tr><th align="center">域</th><th align="center">是否必填</th><th align="center">值以及范围</th><th align="center">通配符</th></tr></thead><tbody><tr><td align="center">秒</td><td align="center">是</td><td align="center">0-59</td><td align="center">, - * &#x2F;</td></tr><tr><td align="center">分</td><td align="center">是</td><td align="center">0-59</td><td align="center">, - * &#x2F;</td></tr><tr><td align="center">时</td><td align="center">是</td><td align="center">0-23</td><td align="center">, - * &#x2F;</td></tr><tr><td align="center">日</td><td align="center">是</td><td align="center">1-31</td><td align="center">, - * ? &#x2F; L W</td></tr><tr><td align="center">月</td><td align="center">是</td><td align="center">1-12 或 JAN-DEC</td><td align="center">, - * &#x2F;</td></tr><tr><td align="center">周</td><td align="center">是</td><td align="center">1-7 或 SUN-SAT</td><td align="center">, - * ? &#x2F; L #</td></tr><tr><td align="center">年</td><td align="center">否</td><td align="center">1970-2099</td><td align="center">, - * &#x2F;</td></tr></tbody></table><h3 id="cron中的通配符"><a href="#cron中的通配符" class="headerlink" title="cron中的通配符"></a>cron中的通配符</h3><ul><li><code>,</code> 这里指的是在两个以上的时间点中都执行，如果我们在 “分” 这个域中定义为 <code>8,12,35</code> ，则表示分别在第8分，第12分 第35分执行该定时任务。</li><li><code>-</code> 这个比较好理解就是指定在某个域的连续范围，如果我们在 “时” 这个域中定义 <code>1-6</code>，则表示在1到6点之间每小时都触发一次，用 <code>,</code> 表示 <code>1,2,3,4,5,6</code></li><li><code>*</code> 表示所有值，可解读为 “每”。 如果在“日”这个域中设置 <code>*</code>,表示每一天都会触发。</li><li><code>?</code> 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的8号触发一个操作，但不关心是周几，我们可以这么设置 <code>0 0 0 8 * ?</code></li><li><code>/</code> 在某个域上周期性触发，该符号将其所在域中的表达式分为两个部分，其中第一部分是起始值，除了秒以外都会降低一个单位，比如 在 “秒” 上定义 <code>5/10</code> 表示从 第 5 秒开始 每 10 秒执行一次，而在 “分” 上则表示从 第 5 秒开始 每 10 分钟执行一次。</li><li><code>L</code> 表示英文中的<strong>LAST</strong> 的意思，只能在 “日”和“周”中使用。在“日”中设置，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年), 在“周”上表示周六，相当于”7”或”SAT”。如果在”L”前加上数字，则表示该数据的最后一个。例如在“周”上设置”7L”这样的格式,则表示“本月最后一个周六”</li><li><code>W</code> 表示离指定日期的最近那个工作日(周一至周五)触发，只能在 “日” 中使用且只能用在具体的数字之后。若在“日”上置”15W”，表示离每月15号最近的那个工作日触发。假如15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果是 “1W” 就只能往本月的下一个最近的工作日推不能跨月往上一个月推。</li><li><code>#</code> 表示每月的第几个周几，只能作用于 “周” 上。例如 ”2#3” 表示在每月的第三个周二。</li></ul><h3 id="cron示例"><a href="#cron示例" class="headerlink" title="cron示例"></a>cron示例</h3><table><thead><tr><th align="right">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="right"><code>0 15 10 ? * *</code></td><td align="left">每天上午10:15执行任务</td></tr><tr><td align="right"><code>0 15 10 * * ?</code></td><td align="left">每天上午10:15执行任务</td></tr><tr><td align="right"><code>0 0 12 * * ?</code></td><td align="left">每天中午12:00执行任务</td></tr><tr><td align="right"><code>0 0 10,14,16 * * ?</code></td><td align="left">每天上午10:00点、下午14:00以及下午16:00执行任务</td></tr><tr><td align="right"><code>0 0/30 9-17 * * ?</code></td><td align="left">每天上午09:00到下午17:00时间段内每隔半小时执行任务</td></tr><tr><td align="right"><code>0 * 14 * * ?</code></td><td align="left">每天下午14:00到下午14:59时间段内每隔1分钟执行任务</td></tr><tr><td align="right"><code>0 0-5 14 * * ?</code></td><td align="left">每天下午14:00到下午14:05时间段内每隔1分钟执行任务</td></tr><tr><td align="right"><code>0 0/5 14 * * ?</code></td><td align="left">每天下午14:00到下午14:55时间段内每隔5分钟执行任务</td></tr><tr><td align="right"><code>0 0/5 14,18 * * ?</code></td><td align="left">每天下午14:00到下午14:55、下午18:00到下午18:55时间段内每隔5分钟执行任务</td></tr><tr><td align="right"><code>0 0 12 ? * WED</code></td><td align="left">每个星期三中午12:00执行任务</td></tr><tr><td align="right"><code>0 15 10 15 * ?</code></td><td align="left">每月15日上午10:15执行任务</td></tr><tr><td align="right"><code>0 15 10 L * ?</code></td><td align="left">每月最后一日上午10:15执行任务</td></tr><tr><td align="right"><code>0 15 10 ? * 6L</code></td><td align="left">每月最后一个星期六上午10:15执行任务</td></tr><tr><td align="right"><code>0 15 10 ? * 6#3</code></td><td align="left">每月第三个星期六上午10:15执行任务</td></tr><tr><td align="right"><code>0 10,44 14 ? 3 WED</code></td><td align="left">每年3月的每个星期三下午14:10和14:44执行任务</td></tr><tr><td align="right"><code>0 15 10 ? * * 2022</code></td><td align="left">2022年每天上午10:15执行任务</td></tr><tr><td align="right"><code>0 15 10 ? * * *</code></td><td align="left">每年每天上午10:15执行任务</td></tr><tr><td align="right"><code>0 0/5 14,18 * * ? 2022</code></td><td align="left">2022年每天下午14:00到下午14:55、下午18:00到下午18:55时间段内每隔5分钟执行任务</td></tr><tr><td align="right"><code>0 15 10 ? * 6#3 2022,2023</code></td><td align="left">2022年至2023年每月第三个星期六上午10:15执行任务</td></tr><tr><td align="right"><code>0 0/30 9-17 * * ? 2022-2025</code></td><td align="left">2022年至2025年每天上午09:00到下午17:30时间段内每隔半小时执行任务</td></tr><tr><td align="right"><code>0 10,44 14 ? 3 WED 2022/2</code></td><td align="left">从2022年开始，每隔两年3月的每个星期三下午14:10和14:44执行任务</td></tr></tbody></table><h3 id="cron表达式在线工具"><a href="#cron表达式在线工具" class="headerlink" title="cron表达式在线工具"></a>cron表达式在线工具</h3><p>1<a href="https://www.pppet.net/">cron表达式在线工具1</a> </p><p>2<a href="https://www.bejson.com/othertools/cron/">cron表达式在线工具2</a> </p><p>3<a href="https://cron.qqe2.com/">cron表达式在线工具3</a> </p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Cron</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo微服务基础知识</title>
    <link href="/2022/09/21/dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/09/21/dubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<div align="center"><a href="https://i-xiaoxin.github.io/"><img src="https://readme-typing-svg.demolab.com?font=Fira+Code&size=25&pause=1000&width=435&lines=%F0%9F%8D%8E%E8%B7%AF%E6%BC%AB%E6%BC%AB%E5%85%B6%E4%BF%AE%E8%BF%9C%E5%85%AE%2C%E5%90%BE%E5%B0%86%E4%B8%8A%E4%B8%8B%E8%80%8C%E6%B1%82%E7%B4%A2;The+road+ahead+will+be+long;+Our+climb+will+be+steep" alt="Typing SVG" /></a></div><h3 id="🚩微服务出现背景简述"><a href="#🚩微服务出现背景简述" class="headerlink" title="🚩微服务出现背景简述"></a>🚩微服务出现背景简述</h3><p>2008年以后，国内互联网行业飞速发展，我们对软件系统的需求已经不再是过去”能用就行”这种需求了，像<strong>抢红包、双十一</strong>这样的活动不断逼迫我们去突破软件系统的性能上限，传统的IT企业”能用就行”的开发思想已经不能满足互联网<strong>高并发、大流量</strong>的性能要求。系统架构走向<strong>分布式</strong>已经是服务器开发领域解决该问题唯一的出路，然而分布式系统由于天生的复杂度，并不像开发单体应用一样把框架一堆就能搞定，因此各大互联网公司都在投入技术力量研发自己的基础设施。这里面比较有名的如阿里的开源项目dubbo, Netflix开发的一系列服务框架。</p><h3 id="🚩系统架构演变"><a href="#🚩系统架构演变" class="headerlink" title="🚩系统架构演变"></a>🚩系统架构演变</h3><ul><li><h4 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h4><p>  单体架构也称之为单体系统或者是单体应用。就是一种把系统中所有的功能、模块耦合在一个应用中的架构方式</p><p>  <img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20220922204728268.png" alt="单体架构"></p><blockquote><p>存在以下问题：</p><p>​<a href="https://emojipedia.org/basketball/">🏀</a> 代码耦合：模块的边界模糊、依赖关系不清晰，整个项目非常复杂，每次修改代码都心惊胆战</p><p>​<a href="https://emojipedia.org/basketball/">🏀</a>  迭代困难：每次功能的变更或bug的修复都会导致重新部署整个应用，随着代码的增多，构建、测试和部署的时间也会增加</p><p>​<a href="https://emojipedia.org/basketball/">🏀</a>  扩展受限：单体应用只能作为一个整体进行扩展，无法根据业务模块的需要进行伸缩</p><p>​<a href="https://emojipedia.org/basketball/">🏀</a>  技术债务：随着时间推移、需求变更和人员更迭，会逐渐形成应用程序的技术债务，并且越积越多不坏不修</p><p>​<a href="https://emojipedia.org/basketball/">🏀</a>  阻碍创新：单体应用往往使用统一的技术平台或方案解决所有的问题，要想引入新技术平台会非常困难</p></blockquote></li><li><h4 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h4><p>  分布式是需要按照功能点把系统拆分，拆分成独立的功能，单独为某一个节点添加服务器，需要系统之间配合才能完成整个业务逻辑。</p><p>  <img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20220922205059287.png" alt="分布式架构"></p><blockquote><p>分布式架构优点：</p><p>​<a href="https://emojipedia.org/puzzle-piece/">🧩</a> 不同的团队负责不同的子项目</p><p>​<a href="https://emojipedia.org/puzzle-piece/">🧩</a> 可以灵活的进行分布式部署</p><p>​<a href="https://emojipedia.org/puzzle-piece/">🧩</a> 可以为某一模块单独加集群</p><p>分布式架构缺点：</p><p>​<a href="https://emojipedia.org/clapper-board/">🎬</a>  模块之间有一些通用的业务逻辑无法共用。</p></blockquote></li><li><h4 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h4><p>  SOA：Service Oriented Architecture（面向服务的架构）。也就是把工程拆分成<strong>服务层，表现层</strong>两个工程。服务层中包含业务逻辑，只需要对外提供服务即可。表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现，使用ESB（Enterparise Servce Bus企业服务总线，代表技术：Mule、WSO2）提供表现层和服务层之间的交互。</p></li></ul><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20220922205438294.png" alt="SOA架构"></p><blockquote><p>存在的问题：</p><p><a href="https://emojipedia.org/volleyball/">🏐</a>  不支持集群、臃肿</p></blockquote><h3 id="Dubbo框架"><a href="#Dubbo框架" class="headerlink" title="Dubbo框架"></a>Dubbo框架</h3><h4 id="Dubbo简介"><a href="#Dubbo简介" class="headerlink" title="Dubbo简介"></a>Dubbo简介</h4><p>因为需求的增长导致架构创新，dubbo的出现就是为了实现SOA架构的框架，Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个基于Java的高性能<strong>RPC</strong>（Remote Procedure Call）框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。后期阿里巴巴停止了该项目的维护，于是当当网在这之上推出了自己的Dubbox，项目 <a href="https://dubbo.apache.org/zh/">Apache Dubbo</a></p><h4 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h4><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20220922205824470.png" alt="Dubbo架构"></p><h3 id="注册中心-zookeeper"><a href="#注册中心-zookeeper" class="headerlink" title="注册中心 zookeeper"></a>注册中心 zookeeper</h3><p><a href="https://zookeeper.apache.org/">Zookeeper</a>是Apacahe Hadoop的子项目，可以为分布式应用程序协调服务，适合作为Dubbo服务的注册中心，负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互。</p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20220922210506808.png" alt="zookeeper"></p><h3 id="zookeeper的安装"><a href="#zookeeper的安装" class="headerlink" title="zookeeper的安装"></a>zookeeper的安装</h3><p class="note note-success">    (1) 安装jdk</p><p class="note note-success">    (2) 上传并解压缩zookeeper压缩包</p><p class="note note-success">    (3) 进入 bin 目录，启动服务输入命令</p><h3 id="Dubbo案例Demo"><a href="#Dubbo案例Demo" class="headerlink" title="Dubbo案例Demo"></a>Dubbo案例Demo</h3><h4 id="🏅父工程的pom-xml中添加依赖"><a href="#🏅父工程的pom-xml中添加依赖" class="headerlink" title="🏅父工程的pom.xml中添加依赖"></a><a href="https://emojipedia.org/sports-medal/">🏅</a>父工程的pom.xml中添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.bjpowernode<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbox_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 由于使⽤了zookeeper作为注册中⼼，则需要加⼊zookeeper的客户端jar包： --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.101tec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="🏅创建公共接口"><a href="#🏅创建公共接口" class="headerlink" title="🏅创建公共接口"></a><a href="https://emojipedia.org/sports-medal/">🏅</a>创建公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloService</span>&#123;<br>    String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="🏅定义服务提供方并配置"><a href="#🏅定义服务提供方并配置" class="headerlink" title="🏅定义服务提供方并配置"></a><a href="https://emojipedia.org/sports-medal/">🏅</a>定义服务提供方并配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建service</span><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Service;<br><span class="hljs-comment">//import org.springframework.stereotype.Service;</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HelloService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,Dubbox.......&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="🏅定义服务消费方"><a href="#🏅定义服务消费方" class="headerlink" title="🏅定义服务消费方"></a><a href="https://emojipedia.org/sports-medal/">🏅</a>定义服务消费方</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义controller</span><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;<br><span class="hljs-keyword">import</span> com.bjpowernode.service.HelloService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Reference</span><br>    <span class="hljs-comment">//@Autowired</span><br>   <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> helloService.hello();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="推荐IDEA安装zookeeper插件"><a href="#推荐IDEA安装zookeeper插件" class="headerlink" title="推荐IDEA安装zookeeper插件"></a>推荐IDEA安装zookeeper插件</h3>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
      <tag>Dubbox</tag>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七牛云使用Demo</title>
    <link href="/2022/09/21/%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%BF%E7%94%A8Demo/"/>
    <url>/2022/09/21/%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%BF%E7%94%A8Demo/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p class="note note-success">    微服务中采用分布式架构，假设用户访问app时，服务可能通过集群配分配到海底或者山洞里的某个幸运服务器，这时图片单一部署在服务器需要采用统一URI，于是云存储图片服务获得URI进行部署即可解决问题。本次采用的是七牛云作为Demo测试（优惠）省。</p><h3 id="七牛云前置工作环境搭建"><a href="#七牛云前置工作环境搭建" class="headerlink" title="七牛云前置工作环境搭建"></a>七牛云前置工作环境搭建</h3><h4 id="1-注册登录"><a href="#1-注册登录" class="headerlink" title="1.注册登录"></a>1.注册登录</h4><h4 id="2-构建存储空间"><a href="#2-构建存储空间" class="headerlink" title="2.构建存储空间"></a>2.构建存储空间</h4><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/20220924153231.png"></p><p class="note note-success">   <1>选择<font color="#FF00FF">对象存储</font></br>       </p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20220924153909853.png" alt="新建存储空间"></p><p class="note note-success">   <2>进入<font color="#FF00FF">新建空间</font>，存储空间名称即入口，请依照规范标准命名；存储区域根据自己地理位置进行选择；访问控制公开</br>       </p><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/image-20220924154507736.png" alt="image-20220924154507736"></p><p class="note note-success">   <3>进入构建空间，获取<font color="#FF00FF">系统分配的域名前缀</font>以便程序中使用</br>       </p><p class="note note-success">   <4>官方SDK工具中找到对应编程语言得SDK配置文档，嫌麻烦就直接找客服</br>       </p><p class="note note-success">    <5>点击<font color="#FF00FF">个人中心->密钥管理</font>获取AccessKey/SecretKey</br>       </p><h3 id="java案例"><a href="#java案例" class="headerlink" title="java案例"></a>java案例</h3><h4 id="SDK工具类"><a href="#SDK工具类" class="headerlink" title="SDK工具类"></a>SDK工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuyunUtils</span> &#123;<br>    <span class="hljs-comment">// AccessKey </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ftn79KS0pDDPoGqtd9wNyNICRuMq_fqo9Jt3Gjj1&quot;</span>;<br>    <span class="hljs-comment">// SecretKey</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pKUaRo5vxUKtZVSrCpy5J5kayUtpcvsu9ykbm1mh&quot;</span>;<br>    <span class="hljs-comment">// 云空间名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CloudDemo&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upload2Qiniu</span><span class="hljs-params">(String filePath,String fileName)</span>&#123;<br>        <span class="hljs-comment">//构造一个带指定Zone对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Zone.zone1());<br>        <span class="hljs-type">UploadManager</span> <span class="hljs-variable">uploadManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadManager</span>(cfg);<br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, secretKey);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> auth.uploadToken(bucket);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> uploadManager.put(filePath, fileName, upToken);<br>            <span class="hljs-comment">//解析上传成功的结果</span><br>            <span class="hljs-type">DefaultPutRet</span> <span class="hljs-variable">putRet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);<br>        &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> ex.response;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.err.println(r.bodyString());<br>            &#125; <span class="hljs-keyword">catch</span> (QiniuException ex2) &#123;<br>                <span class="hljs-comment">//ignore</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//上传文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upload2Qiniu</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes, String fileName)</span>&#123;<br>        <span class="hljs-comment">//构造一个带指定Zone对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Zone.zone1());<br>        <span class="hljs-comment">//...其他参数参考类注释</span><br>        <span class="hljs-type">UploadManager</span> <span class="hljs-variable">uploadManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadManager</span>(cfg);<br><br>        <span class="hljs-comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> fileName;<br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, secretKey);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> auth.uploadToken(bucket);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> uploadManager.put(bytes, key, upToken);<br>            <span class="hljs-comment">//解析上传成功的结果</span><br>            <span class="hljs-type">DefaultPutRet</span> <span class="hljs-variable">putRet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);<br>            System.out.println(putRet.key);<br>            System.out.println(putRet.hash);<br>        &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> ex.response;<br>            System.err.println(r.toString());<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.err.println(r.bodyString());<br>            &#125; <span class="hljs-keyword">catch</span> (QiniuException ex2) &#123;<br>                <span class="hljs-comment">//ignore</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFileFromQiniu</span><span class="hljs-params">(String fileName)</span>&#123;<br>        <span class="hljs-comment">//构造一个带指定Zone对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Zone.zone1());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> fileName;<br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, secretKey);<br>        <span class="hljs-type">BucketManager</span> <span class="hljs-variable">bucketManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BucketManager</span>(auth, cfg);<br>        <span class="hljs-keyword">try</span> &#123;<br>            bucketManager.delete(bucket, key);<br>        &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>            <span class="hljs-comment">//如果遇到异常，说明删除失败</span><br>            System.err.println(ex.code());<br>            System.err.println(ex.response.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QinNiuTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpload</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\0\\Desktop\\avatar.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123.jpg&quot;</span>;<br>        QiniuyunUtils.upload2Qiniu(filePath,fileName);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123.jpg&quot;</span>;<br>        QiniuyunUtils.deleteFileFromQiniu(fileName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>七牛云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合体系</title>
    <link href="/2022/09/21/java%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB/"/>
    <url>/2022/09/21/java%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<div align="center">    <a title="Github Total Stars" target="_blank" href="https://i-xiaoxin.github.io">        <img src="https://img.shields.io/github/stars/i-xiaoxin/i-xiaoxin.github.io?affiliations=OWNER&color=success&logo=github&style=plastic" />    </a>    <a title="Github Followers" target="_blank" href="https://i-xiaoxin.github.io">        <img src="https://img.shields.io/github/followers/i-xiaoxin?color=success&logo=github&style=plastic" />    </a>    <a title="Target " target="_blank" href="https://i-xiaoxin.github.io">        <img src="https://img.shields.io/github/languages/top/i-xiaoxin/i-xiaoxin.github.io?color=success&label=java&logo=github&style=plastic" />    </a></div><div align="center"><a href="https://i-xiaoxin.github.io/"><img src="https://readme-typing-svg.demolab.com?font=Ma+Shan+Zheng&pause=1000&width=435&lines=%F0%9F%9A%80%E5%AE%9D%E5%89%91%E9%94%8B%E4%BB%8E%E7%A3%A8%E7%A0%BA%E5%87%BA%EF%BC%8C%E6%A2%85%E8%8A%B1%E9%A6%99%E8%87%AA%E8%8B%A6%E5%AF%92%E6%9D%A5" alt="Typing SVG" /></a></div><h3 id="数组存在问题"><a href="#数组存在问题" class="headerlink" title="数组存在问题:"></a>数组存在问题:</h3><ul><li><p>数组长度固定</p></li><li><p>存入的类型只能是一种(数据单一)</p></li><li><p>数组是线性结构，增删效率低</p></li></ul><p>假设现在有一个情景需求，统计一个学校的学生,如果使用数组则需要固定长度,而一旦固定了之后,加入学校开除学生了则不能减少数组长度,同样如果学校中途又来了学生也没办法添加;所以数组是无法解决这个问题的,因为学生的统计是不固定的,有可能会增加也有可能会减少；所以出现了集合</p><p>集合的出现就是为了解决数组的问题,所以能够确定一点就是集合更加的强大;<strong>集合存储数据必须是引用数据类型</strong></p><h3 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h3><blockquote><p>Collection接口体系</p></blockquote><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/09.png" alt="Collection接口体系"></p><blockquote><p>Map接口体系</p></blockquote><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/10.png" alt="Map接口体系"></p><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><ul><li><p><code>boolean add(E e)</code>:向集合中添加元素</p></li><li><p><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>:向集合中添加一个集合元素</p></li><li><p><code>boolean contains(Object o)</code>:检测集合中是否包含某个元素</p></li><li><p><code>boolean containsAll(Collection&lt;?&gt; c)</code>:检测集合中是否包含另一个集合中的元素</p></li><li><p><code>boolean remove(Object o)</code>:从集合中移除指定数据(对象)</p></li><li><p><code>boolean removeAll(Collection&lt;?&gt; c)</code>:移除此集合的所有也包含在指定集合中的元素</p></li><li><p><code>boolean retainAll(Collection&lt;?&gt; c)</code>:移除刺激和的所有不包含在指定集合中的元素(移除非相同的元素,非交集元素)</p></li><li><p><code>int size()</code>:返回集合中的元素数量</p></li><li><p><code>boolean isEmpty()</code>:判断集合是否为空</p></li><li><p><code>Object[] toArray()</code>:将集合转为数组</p></li><li><p><code>void clear()</code>:清空集合内元素</p></li><li><p><code>Iterator&lt;E&gt; iterator()</code>:返回集合迭代器元素,用于遍历集合中的所有元素</p><p>  代码案例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 由于Collection是接口所以无法直接创建对象,所以使用其子类创建(ArrayList)</span><br>        <span class="hljs-comment">// 以多态方式创建Collection接口集合,并且只能使用Collection接口中的方法</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">// 1. `boolean add(E e)`:向集合中添加元素</span><br>        collection.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        collection.add(<span class="hljs-number">18</span>);<br>        collection.add(<span class="hljs-number">185.2</span>);<br>        collection.add(<span class="hljs-string">&quot;男&quot;</span>);<br>        System.out.println(collection);<br>        <span class="hljs-comment">// 2. `boolean addAll(Collection&lt;? extends E&gt; c)`:向集合中添加一个集合元素</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">collection1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        collection.add(<span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        collection.add(<span class="hljs-number">19</span>);<br>        collection.add(<span class="hljs-number">182.2</span>);<br>        collection.add(<span class="hljs-string">&quot;男&quot;</span>);<br>        collection.addAll(collection1);<br>        System.out.println(collection);<br>        <span class="hljs-comment">// 3. `boolean contains(Object o)`:检测集合中是否包含某个元素</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContains</span> <span class="hljs-operator">=</span> collection.contains(<span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        System.out.println(isContains);<br>        isContains = collection.contains(<span class="hljs-string">&quot;吴彦祖1&quot;</span>);<br>        System.out.println(isContains);<br>        <span class="hljs-comment">// 4. `boolean containsAll(Collection&lt;?&gt; c)`:检测集合中是否包含另一个集合中的元素</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContainsAll</span> <span class="hljs-operator">=</span> collection.containsAll(collection1);<br>        System.out.println(isContainsAll);<br>        <span class="hljs-comment">// collection1中再添加一条数据</span><br>        collection1.add(<span class="hljs-string">&quot;帅&quot;</span>);<br>        isContainsAll = collection.containsAll(collection1);<br>        System.out.println(isContainsAll);<br>        <span class="hljs-comment">// 5.  `boolean remove(Object o)`:从集合中移除指定数据(对象)</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isRemove</span> <span class="hljs-operator">=</span> collection.remove(<span class="hljs-string">&quot;帅&quot;</span>);<br>        System.out.println(isRemove);<br>        System.out.println(collection);<br>        isRemove = collection.remove(<span class="hljs-string">&quot;男&quot;</span>);<br>        System.out.println(isRemove);<br>        System.out.println(collection);<br>        <span class="hljs-comment">// 6. `boolean removeAll(Collection&lt;?&gt; c)`:移除此集合的所有也包含在指定集合中的元素</span><br>        <span class="hljs-comment">// 7. `boolean retainAll(Collection&lt;?&gt; c)`:移除刺激和的所有不包含在指定集合中的元素(移除非相同的元素,非交集元素)</span><br>        <span class="hljs-comment">// 8. `int size()`:返回集合中的元素数量</span><br>        System.out.println(collection.size());<br>        <span class="hljs-comment">// 9. `boolean isEmpty()`:判断集合是否为空</span><br>        System.out.println(collection.isEmpty());<br>        <span class="hljs-comment">// 10. `Object[] toArray()`:将集合转为数组</span><br>        <span class="hljs-comment">// 11. `void clear()`:清空集合内元素</span><br>        collection.clear();<br>        System.out.println(collection);<br>        System.out.println(collection.isEmpty());<br>        <span class="hljs-comment">// 12. `Iterator&lt;E&gt; iterator()`:返回集合迭代器元素,用于遍历集合中的所有元素</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><ul><li><code>boolean add(E e)</code>:向List集合中添加元素<code>常用</code></li><li><code>void add(int index, E element)</code>:向List集合中指定位置添加元素</li><li><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>:将指定集合中的所有元素追加到此集合的末尾</li><li><code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code>:将指定集合中的所有元素追加到此集合的指定位置</li><li><code>boolean contains(Object o)</code>:检测此集合中是否包含指定元素<code>常用</code></li><li><code>boolean containsAll(Collection&lt;?&gt; c)</code>:检测集合中是否包含另一个集合中的元素</li><li><code>E get(int index)</code>:获取集合中指定下标索引的元素并返回<code>常用</code></li><li><code>E set(int index, E element)</code>:修改集合中指定下标索引的元素</li><li><code>int indexOf(Object o)</code>:在集合中查找元素如果存在则返回此元素的下标索引(返回第一次发现的下标索引)</li><li><code>int lastIndexOf(Object o)</code>:在集合中查找元素如果存在则返回此元素的下标索引(返回最后一次发现的下标索引)</li><li><code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code>:切割集合,指定起始位置和结束位置</li><li><code>ListIterator&lt;E&gt; listIterator()</code>:返回List接口迭代器</li><li><code>int size()</code>:返回集合中的元素数量<code>常用</code></li><li><code>boolean isEmpty()</code>:判断集合是否为空<code>常用</code></li><li><code>Object[] toArray()</code>:将集合转为数组</li><li><code>void clear()</code>:清空集合内元素</li><li><code>Iterator&lt;E&gt; iterator()</code>:返回集合迭代器元素,用于遍历集合中的所有元素</li></ul><p>代码案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用多态方式创建List接口对象--&gt;使用其子类ArrayList</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">// 1. `boolean add(E e)`:向List集合中添加元素`常用`</span><br>        list.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        list.add(<span class="hljs-number">18</span>);<br>        list.add(<span class="hljs-string">&quot;男神&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 2. `void add(int index, E element)`:向List集合中指定位置添加元素</span><br>        list.add(<span class="hljs-number">2</span>, <span class="hljs-number">185.3</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 3. `boolean addAll(Collection&lt;? extends E&gt; c)`:将指定集合中的所有元素追加到此集合的末尾</span><br>        <span class="hljs-comment">// 4. `boolean addAll(int index, Collection&lt;? extends E&gt; c)`:将指定集合中的所有元素追加到此集合的指定位置</span><br>        <span class="hljs-comment">// 5. `boolean contains(Object o)`:检测此集合中是否包含指定元素`常用`</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContains</span> <span class="hljs-operator">=</span> list.contains(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(isContains);<br>        isContains = list.contains(<span class="hljs-string">&quot;彭于晏1&quot;</span>);<br>        System.out.println(isContains);<br>        <span class="hljs-comment">// 6. `boolean containsAll(Collection&lt;?&gt; c)`:检测集合中是否包含另一个集合中的元素</span><br>        <span class="hljs-comment">// 7. `E get(int index)`:获取集合中指定下标索引的元素并返回`常用`</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>        System.out.println(o);<br>        <span class="hljs-comment">// 如果调用超出范围则报异常--&gt;IndexOutOfBoundsException: Index: 100, Size: 4</span><br>        <span class="hljs-comment">// Object o1 = list.get(100);</span><br>        <span class="hljs-comment">// System.out.println(o1);</span><br>        <span class="hljs-comment">// 8. `E set(int index, E element)`:修改集合中指定下标索引的元素</span><br>        <span class="hljs-comment">// 返回的结果是修改前的内容</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> list.set(<span class="hljs-number">2</span>, <span class="hljs-number">185.0</span>);<br>        System.out.println(set);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 9. `int indexOf(Object o)`:在集合中查找元素如果存在则返回此元素的下标索引(返回第一次发现的下标索引)</span><br>        <span class="hljs-comment">// 在集合中多添加一些数据</span><br>        list.add(<span class="hljs-string">&quot;男&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;男神&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> list.indexOf(<span class="hljs-string">&quot;男神&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;返回下标:&quot;</span> + index);<br>        <span class="hljs-comment">// 如果不存在则返回-1</span><br>        index = list.indexOf(<span class="hljs-string">&quot;男神123&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;返回下标:&quot;</span> + index);<br>        <span class="hljs-comment">// 10. `int lastIndexOf(Object o)`:在集合中查找元素如果存在则返回此元素的下标索引(返回最后一次发现的下标索引)</span><br>        index = list.lastIndexOf(<span class="hljs-string">&quot;男神&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;返回下标:&quot;</span> + index);<br>        <span class="hljs-comment">// 如果不存在则返回-1</span><br>        index = list.lastIndexOf(<span class="hljs-string">&quot;男神123&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;返回下标:&quot;</span> + index);<br>        <span class="hljs-comment">// 11. `List&lt;E&gt; subList(int fromIndex, int toIndex)`:切割集合,指定起始位置和结束位置</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">subList</span> <span class="hljs-operator">=</span> list.subList(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>        System.out.println(subList);<br>        <span class="hljs-comment">// 12. `ListIterator&lt;E&gt; listIterator()`:返回List接口迭代器</span><br>        <span class="hljs-comment">// 13. `int size()`:返回集合中的元素数量`常用`</span><br>        <span class="hljs-comment">// 14. `boolean isEmpty()`:判断集合是否为空`常用`</span><br>        <span class="hljs-comment">// 15. `Object[] toArray()`:将集合转为数组</span><br>        <span class="hljs-comment">// 16. `void clear()`:清空集合内元素</span><br>        <span class="hljs-comment">// 17. `Iterator&lt;E&gt; iterator()`:返回集合迭代器元素,用于遍历集合中的所有元素</span><br><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br>        <span class="hljs-comment">// 使用迭代器</span><br>        <span class="hljs-comment">// `Iterator&lt;E&gt; iterator()`:返回集合迭代器元素,用于遍历集合中的所有元素</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br>        <span class="hljs-comment">// 迭代器方法boolean hasNext();--&gt;判断iterator中是否还有可迭代的元素</span><br>        <span class="hljs-comment">// 迭代器方法E next();--&gt;输出迭代器中的元素--&gt;类似于指针每次调用都会向后移</span><br>        <span class="hljs-comment">// next如果超出范围则报错--&gt;NoSuchElementException</span><br>        <span class="hljs-comment">// 将next指针指向下一个元素</span><br>        <span class="hljs-comment">/*Object next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);</span><br><span class="hljs-comment">        // 将next指针指向下一个元素</span><br><span class="hljs-comment">        next = iterator.next();</span><br><span class="hljs-comment">        System.out.println(next);*/</span><br>        <span class="hljs-comment">// iterator.hasNext()验证是否有下一条数据</span><br>        <span class="hljs-comment">/*boolean b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);</span><br><span class="hljs-comment">        iterator.next();</span><br><span class="hljs-comment">        b = iterator.hasNext();</span><br><span class="hljs-comment">        System.out.println(b);*/</span><br>        <span class="hljs-comment">// 使用while循环</span><br>        <span class="hljs-comment">// iterator.hasNext()判断是否存在元素</span><br>        <span class="hljs-comment">// list.clear();</span><br>        <span class="hljs-comment">// iterator = list.iterator();</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-comment">// 将next指针指向下一条数据</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-comment">// 输出结果</span><br>            System.out.println(next);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br>        <span class="hljs-comment">// for循环遍历与上面的iterator迭代器相同都是遍历</span><br>        <span class="hljs-keyword">for</span> (Object o1 : list) &#123;<br>            System.out.println(o1);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br>        <span class="hljs-comment">// `ListIterator&lt;E&gt; listIterator()`:返回List接口迭代器</span><br>        <span class="hljs-type">ListIterator</span> <span class="hljs-variable">listIterator</span> <span class="hljs-operator">=</span> list.listIterator();<br>        <span class="hljs-keyword">while</span> (listIterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> listIterator.next();<br>            System.out.println(next);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="List接口之实现类ArrayList"><a href="#List接口之实现类ArrayList" class="headerlink" title="List接口之实现类ArrayList"></a>List接口之实现类ArrayList</h3><h4 id="ArrayList概述"><a href="#ArrayList概述" class="headerlink" title="ArrayList概述"></a>ArrayList概述</h4><blockquote><p>ArrayList–&gt;仅从名字看是数组集合–&gt;ArrayList其底层是数组实现的,但是通过某些手段实现了可变长度的数组(动态数组),其容量可以自动增长动态增加容量<br>官方解释:</p><p>List接口的可调整大小的数组实现(ArrayList是List接口的实现类,并且是动态数组大小)。实现了List接口的所有操作，并允许添加所有元素，包括null(但不建议添加null) 。除了实现List接口之外，该类还提供了一些自己的方法用来实现动态数组大小的方法;</p><p><code>(注意:ArrayList类与Vector类的方法相同,不同之处在于ArrayList是线程不安全,而Vector是线程安全)</code></p></blockquote><h4 id="ArrayList中的底层实现源码"><a href="#ArrayList中的底层实现源码" class="headerlink" title="ArrayList中的底层实现源码"></a>ArrayList中的底层实现源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;<br>    <span class="hljs-comment">// ArrayList底层实现是使用数组实现的</span><br>    <span class="hljs-comment">// transient--&gt;(瞬时/瞬态/短暂的)--&gt;如果通过网络传输此对象或向文件中写入此对象则不保留的字段(此字段不传输的内容)</span><br>    <span class="hljs-comment">// 通过transient关键字修饰的只能在Java中使用,不能传输(例如写入文件和网络传输)</span><br>    <span class="hljs-keyword">transient</span> Object[] elementData;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList添加方法"><a href="#ArrayList添加方法" class="headerlink" title="ArrayList添加方法"></a>ArrayList添加方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ArrayList集合的元素数量,与数组无关,因为是成员变量所以默认是0</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><span class="hljs-comment">// 向集合末尾添加元素</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-comment">// 判断当前集合的大小,size是当前添加的元素数量,如果没有添加则默认是0</span><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// 此方法是add添加时调用的,用于判断集合空间的大小</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// 确保显式容量,并且参数是计算容量calculateCapacity()方法,用于计算当前容量</span><br>    <span class="hljs-comment">// calculateCapacity()中的参数elementData是数组,minCapacity传入的最小容量</span><br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br><span class="hljs-comment">// 此方法是ensureExplicitCapacity中内部调用的,作用是计算容器的容量大小</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// 使用传入的数组容器与默认数组容器使用==判断,判断是否相同的内存地址</span><br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class="hljs-comment">// 返回Math数学类中的max方法计算出的大小</span><br>        <span class="hljs-comment">// 如果DEFAULT_CAPACITY大则返回DEFAULT_CAPACITY</span><br>        <span class="hljs-comment">// 如果minCapacity大则返回minCapacity</span><br>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class="hljs-comment">// 直接返回最小空间</span><br>    <span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br><span class="hljs-comment">// 确保内部容量大小,minCapacity空间是从--&gt;calculateCapacity方法计算而来</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// 集合修改的次数(不用管)</span><br>    modCount++;<br>    <span class="hljs-comment">// 使用传入的最小空间minCapacity减去数组长度elementData.length,如果大于0则空间溢出,</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 如果没有空间则进入继续计算,设置elementData数组的空间</span><br>        <span class="hljs-comment">// 调用grow方法增加数组长度</span><br>        grow(minCapacity);<br>&#125;<br><span class="hljs-comment">// 动态增加数组长度--&gt;数组长度不足时会调用的方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// 第一步将数组长度赋值给old空间(oldCapacity)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-comment">// 设置新空间(newCapacity) = oldCapacity(老空间)+(oldCapacity&gt;&gt;1)老空间右移一位,代表空间除2</span><br>    <span class="hljs-comment">// 为什么计算空间时要加这么大的空间,原因是你都调用了并且能加到这个数值代表你是常用,所以不可能一直给你默认一个数值</span><br>    <span class="hljs-comment">// 新数组空间的计算结果其实就是原空间的1.5倍</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 新空间减去传入的最小空间如果小于0则代表计算出来空间太小</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 如果小了则将最小空间重新赋值给新空间</span><br>        newCapacity = minCapacity;<br>    <span class="hljs-comment">// 如果新空间减去最大空间(MAX_ARRAY_SIZE=2147483639)</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 如果大于则将新空间重新计算一个数值并赋值</span><br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// 最终的扩容,将原数组与新空间通过Arrays.copyOf()方法拷贝至当前数组中,完成了数组的扩容</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/11.png"></p><h4 id="ArrayList获取方法"><a href="#ArrayList获取方法" class="headerlink" title="ArrayList获取方法"></a>ArrayList获取方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取下标索引元素方法</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 验证输入的index是否超出范围,超出则抛异常</span><br>    rangeCheck(index);<br>    <span class="hljs-comment">// 返回index小表索引的元素</span><br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br><span class="hljs-comment">// 获取index下标索引元素的方法</span><br>E <span class="hljs-title function_">elementData</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 返回数组当前index下标元素;例如:String[]strs = &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;--&gt;strs[1]</span><br>    <span class="hljs-keyword">return</span> (E) elementData[index];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList修改方法"><a href="#ArrayList修改方法" class="headerlink" title="ArrayList修改方法"></a>ArrayList修改方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改方法</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    <span class="hljs-comment">// 验证输入的index是否超出范围,超出则抛异常</span><br>    rangeCheck(index);<br>    <span class="hljs-comment">// 获取当前数组index下标索引的元素</span><br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br>    <span class="hljs-comment">// 将当前index下标索引数据修改为传入的数据</span><br>    elementData[index] = element;<br>    <span class="hljs-comment">// 返回修改前的内容</span><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList使用代码案例"><a href="#ArrayList使用代码案例" class="headerlink" title="ArrayList使用代码案例"></a>ArrayList使用代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用ArrayList集合,注意通常使用ArrayList都是使用多态方式创建既:List list=new ArrayList()这种方式</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">// 默认</span><br>        <span class="hljs-comment">// 追加数据--&gt;会扩容到10大小的空间</span><br>        arrayList.add(<span class="hljs-string">&quot;小明&quot;</span>);<br>        System.out.println(arrayList);<br>        <span class="hljs-comment">// 插入数据</span><br>        arrayList.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(arrayList);<br>        <span class="hljs-comment">// 修改数据</span><br>        arrayList.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        System.out.println(arrayList);<br>        <span class="hljs-comment">// 移除数据</span><br>        arrayList.remove(<span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        System.out.println(arrayList);<br>        <span class="hljs-comment">// 获取数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> arrayList.get(<span class="hljs-number">0</span>);<br>        System.out.println(o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="重写实现ArrayList部分功能"><a href="#重写实现ArrayList部分功能" class="headerlink" title="重写实现ArrayList部分功能"></a>重写实现ArrayList部分功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义实现ArrayList部分方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span> &#123;<br>    <span class="hljs-comment">// 使用数组当做集合的底层存放</span><br>    <span class="hljs-keyword">private</span> Object[] elementData;<br><br>    <span class="hljs-comment">// 用于记录集合中元素数量的变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认初始化数组空间即可</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建数组并分配默认空间--&gt;默认10即可</span><br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">10</span>];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建自定义容量大小的构造方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> initCapacity 初始化容量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initCapacity)</span> &#123;<br>        <span class="hljs-comment">// 创建数组并分配默认空间--&gt;默认10即可</span><br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initCapacity];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加元素方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element 传入需要添加的元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回是否添加成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>        <span class="hljs-comment">// 判断容量是否需要扩容</span><br>        ensureCapacityInternal();<br>        <span class="hljs-comment">// 将数据添加至数组中--&gt;其中size代表当前集合中的数据有多少</span><br>        <span class="hljs-built_in">this</span>.elementData[size++] = element;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 使用size与数组长度对比,如果size大了则代表需要扩容</span><br>        <span class="hljs-comment">/*if (size &gt;= this.elementData.length) &#123;</span><br><span class="hljs-comment">            // 将数组长度获取并赋值</span><br><span class="hljs-comment">            int oldLength = this.elementData.length;</span><br><span class="hljs-comment">            // 创建新数组并指定空间大小</span><br><span class="hljs-comment">            Object[] newElementData = new Object[oldLength + (oldLength &gt;&gt; 1) + 1];</span><br><span class="hljs-comment">            // 使用循环遍历方式将数据转义至新数组中--&gt;带着大家使用原始方式来一遍</span><br><span class="hljs-comment">            // 根据老数组的长度计算循环</span><br><span class="hljs-comment">            for (int i = 0; i &lt; this.elementData.length; i++) &#123;</span><br><span class="hljs-comment">                // 循环将原始数组数据复制给新数组</span><br><span class="hljs-comment">                newElementData[i] = this.elementData[i];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            // 重新赋值后再将this.elementData重新赋值指向新数组内存地址</span><br><span class="hljs-comment">            this.elementData = newElementData;</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">// 模仿官方写法</span><br>        <span class="hljs-keyword">if</span> (size &gt;= <span class="hljs-built_in">this</span>.elementData.length) &#123;<br>            <span class="hljs-comment">// 将数组长度获取并赋值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.elementData.length;<br>            <span class="hljs-comment">// 计算新空间大小</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 使用数组工具类拷贝数组</span><br>            <span class="hljs-built_in">this</span>.elementData = Arrays.copyOf(<span class="hljs-built_in">this</span>.elementData, newCapacity);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取集合中的元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 传入下标索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回当前下标元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">// 验证传入的index是否超出索引范围</span><br>        rangeCheck(index);<br>        <span class="hljs-comment">// 返回数据</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.elementData[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查传入的index是否超出范围</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 传入的下标索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rangeCheck</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">// 判断index是否小于0,以及是否大于size</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;数组下标索引超出范围:&quot;</span> + index);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index   传入需要修改的下标索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element 传入修改的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回修改前的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, Object element)</span> &#123;<br>        <span class="hljs-comment">// 验证下标是否合法</span><br>        rangeCheck(index);<br>        <span class="hljs-comment">// 将老数据提取</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">oldElementData</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.elementData[index];<br>        <span class="hljs-comment">// 修改index下标索引的数据</span><br>        <span class="hljs-built_in">this</span>.elementData[index] = element;<br>        <span class="hljs-keyword">return</span> oldElementData;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * toString方法用于打印数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回的是数组中的元素数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ArrayList&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;elementData=&quot;</span> + Arrays.toString(elementData) +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 测试方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建自己写的ArrayList</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            list.add(<span class="hljs-string">&quot;添加数据测试&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-comment">// 打印结果</span><br>        System.out.println(list);<br>        <span class="hljs-comment">// 获取数据</span><br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>        System.out.println(list.get(<span class="hljs-number">3</span>));<br>        System.out.println(list.get(<span class="hljs-number">5</span>));<br>        System.out.println(list.get(<span class="hljs-number">7</span>));<br>        <span class="hljs-comment">// System.out.println(list.get(-1));</span><br>        System.out.println(<span class="hljs-string">&quot;============================================&quot;</span>);<br>        <span class="hljs-comment">// 修改数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">oldElementData</span> <span class="hljs-operator">=</span> list.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(oldElementData);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList集合中使用泛型约束添加数据的类型"><a href="#ArrayList集合中使用泛型约束添加数据的类型" class="headerlink" title="ArrayList集合中使用泛型约束添加数据的类型"></a>ArrayList集合中使用泛型约束添加数据的类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListGenericsDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 集合中的泛型</span><br>        <span class="hljs-comment">// 在未使用泛型时向集合添加数据,由于数据的不统一,造成无法准确调用集合中元素的私有方法</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">// 添加数据</span><br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;彭于晏1&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">18</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;彭于晏2&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">19</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;彭于晏3&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>));<br>        <span class="hljs-comment">// 添加其他数据</span><br>        list.add(<span class="hljs-string">&quot;String类型数据&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;String类型数据&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;String类型数据&quot;</span>);<br>        <span class="hljs-comment">// 取出数据</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) list.get(<span class="hljs-number">2</span>);<br>        System.out.println(person.getName());<br>        <span class="hljs-comment">// 获取下标为3的数据,下标为3的是String类型,转换对象时不属于同一个类型,会出现类型转换异常</span><br>        <span class="hljs-comment">// Person person1 = (Person) list.get(3);</span><br>        <span class="hljs-comment">// System.out.println(person1.getName());</span><br>        <span class="hljs-comment">// 不转</span><br>        <span class="hljs-comment">// Object o = list.get(0);</span><br>        <span class="hljs-comment">// 只能调用Object类的方法</span><br><br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        <span class="hljs-comment">// 所以集合中有一个泛型的概念,泛型的作用就是用于约束类中的参数(参数可以代表:属性,形参,实参)传输--&gt;泛型用于约束/规则</span><br>        <span class="hljs-comment">// 使用泛型的集合</span><br>        <span class="hljs-comment">// 格式例如:List&lt;泛型类型(任意类型)&gt; list = new ArrayList&lt;&gt;();</span><br>        <span class="hljs-comment">// 定义一个List集合,泛型类型为Person,代表着只能向集合中添加Person对象数据</span><br>        List&lt;Person&gt; persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 添加数据,如果添加的数据不是泛型类型则会出现编译异常</span><br>        <span class="hljs-comment">// Required type:Person--&gt;需要类型是Person</span><br>        <span class="hljs-comment">// Provided:String--&gt;但是提供的是String类型</span><br>        <span class="hljs-comment">// persons.add(&quot;String类型数据&quot;);</span><br>        <span class="hljs-comment">// 添加准确数据</span><br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;彭于晏1&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">18</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;彭于晏2&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">19</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;彭于晏3&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>));<br>        <span class="hljs-comment">// 获取数据</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> persons.get(<span class="hljs-number">0</span>);<br>        System.out.println(person2);<br>        System.out.println(person2.getName() + <span class="hljs-string">&quot;-&quot;</span> + person2.getSex());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**注意:**集合中使用泛型的目的是为了约束添加数据时的类型–&gt;统一数据类型,统一数据类型的目的使用使用时不用强转,同样也不会因为强转而发生类型转换异常–&gt;后期所有的集合都需要指定泛型类型</p><h3 id="List接口之实现类LinkedList"><a href="#List接口之实现类LinkedList" class="headerlink" title="List接口之实现类LinkedList"></a>List接口之实现类LinkedList</h3><h4 id="LinkedList概述"><a href="#LinkedList概述" class="headerlink" title="LinkedList概述"></a>LinkedList概述</h4><p>LinkedList底层是使用链表存储数据,使用链表存储数据是为了解决ArrayList使用数据存储数据的问题–&gt;数据存储查询速度快,但是插入删除速度慢,LinkedList链表结构是查询速度慢,插入删除速度快–&gt;LinkedList底层的存储方式就是使用双链表结构存储,在其中有一个内部类Node–&gt;节点,存储数据</p><h4 id="LinkedList中的链表是什么"><a href="#LinkedList中的链表是什么" class="headerlink" title="LinkedList中的链表是什么?"></a>LinkedList中的链表是什么?</h4><p>链表存储时数据不连续(属于数据之间是非连续空间),空间不连续也就意味着无法通过下标指向某一个元素,所以就出现了一个问题,只要查找数据就必须遍历所有的集合数据进行查找</p><h4 id="链表分为4种类型"><a href="#链表分为4种类型" class="headerlink" title="链表分为4种类型"></a>链表分为4种类型</h4><h5 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h5><p>单链表结构:单链表存储使用节点方式(节点就是一个对象),</p><p>存储数据时有两个属性：</p><ul><li><p>data：存放数据</p></li><li><p>next：指针，指向下一个节点地址，最后一个节点存储null</p></li></ul><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/12.png"></p><h5 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h5><p>双链表结构中使用双链表存储使用节点方式(节点就是一个对象)</p><p>存储数据时有三个属性</p><ul><li>prev–&gt;存储上一个节点地址,如果是第一个则存储null</li><li>data–&gt;存储数据</li><li>next–&gt;指针,存储下一个节点地址,如果是最后一个则存储null</li></ul><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/13.png"></p><h5 id="环形单链表"><a href="#环形单链表" class="headerlink" title="环形单链表"></a>环形单链表</h5><p>单链表结构:单链表存储使用节点方式(节点就是一个对象)</p><p>存储数据时有两个属性</p><ul><li>data(存放数据)</li><li>next(指针,指向下一个节点地址),最后一个节点的next存储的是第一个节点的地址</li></ul><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/14.png"></p><h5 id="环形双链表"><a href="#环形双链表" class="headerlink" title="环形双链表"></a>环形双链表</h5><p>双链表结构:双链表存储使用节点方式(节点就是一个对象)</p><p>存储数据时有三个属性</p><ul><li>prev–&gt;存储上一个节点地址,如果是第一个则存储最后一个节点的地址</li><li>data–&gt;存储数据</li><li>next–&gt;指针,存储下一个节点地址,如果是最后一个则存储第一个节点的地址</li></ul><p><img src="https://raw.githubusercontent.com/i-xiaoxin/image/master/15.png"></p><h4 id="LinkedList私有的方法-自己新增针对于增加和删除方法"><a href="#LinkedList私有的方法-自己新增针对于增加和删除方法" class="headerlink" title="LinkedList私有的方法(自己新增针对于增加和删除方法)"></a>LinkedList私有的方法(自己新增针对于增加和删除方法)</h4><ul><li><code>public void addFirst(E e)</code>:向集合的开头插入数据</li><li><code>public void addLast(E e)</code>:向集合的末尾插入数据</li><li><code>public E getFirst()</code>:获取集合中的第一个元素(如果第一个元素是null则抛异常)</li><li><code>public E getLast()</code>:获取集合中的最后一个元素(如果最后一个元素是null则抛异常)</li><li><code>public E peekFirst()</code>:获取集合中的第一个元素但是不删除(如果第一个元素是null则返回null)</li><li><code>public E peekLast()</code>:获取集合中的最后一个元素但是不删除(如果最后一个元素是null则返回null)</li><li><code>public E pollFirst()</code>:获取集合中的第一个元素,获取后直接删除</li><li><code>public E pollLast()</code>:获取集合中的最后一个元素,获取后直接删除</li><li><code>public E removeFirst()</code>:移除集合中的第一个元素</li><li><code>public E removeLast()</code>:移除集合中的最后一个元素</li></ul><p>LinkedList私有的方法代码案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 如果使用多态方式创建则无法使用LinkedList的私有方法</span><br>        <span class="hljs-comment">// List&lt;String&gt; list = new LinkedList&lt;&gt;();</span><br>        <span class="hljs-comment">// 所以创建时只能指定自己的对象</span><br>        LinkedList&lt;String&gt; linkedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `public void addFirst(E e)`:向集合的开头插入数据</span><br>        linkedList.addFirst(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(linkedList);<br>        linkedList.addFirst(<span class="hljs-string">&quot;梅超风&quot;</span>);<br>        System.out.println(linkedList);<br>        <span class="hljs-comment">// 2. `public void addLast(E e)`:向集合的末尾插入数据</span><br>        linkedList.addLast(<span class="hljs-string">&quot;岳不群&quot;</span>);<br>        System.out.println(linkedList);<br>        linkedList.addLast(<span class="hljs-string">&quot;林平之&quot;</span>);<br>        System.out.println(linkedList);<br>        <span class="hljs-comment">// 3. `public E getFirst()`:获取集合中的第一个元素</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> linkedList.getFirst();<br>        System.out.println(first);<br>        <span class="hljs-comment">// 4. `public E getLast()`:获取集合中的最后一个元素</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> linkedList.getLast();<br>        System.out.println(last);<br>        <span class="hljs-comment">// 5. `public E peekFirst()`:获取集合中的第一个元素但是不删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">peekFirst</span> <span class="hljs-operator">=</span> linkedList.peekFirst();<br>        System.out.println(peekFirst);<br>        <span class="hljs-comment">// 6. `public E peekLast()`:获取集合中的最后一个元素但是不删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">peekLast</span> <span class="hljs-operator">=</span> linkedList.peekLast();<br>        System.out.println(peekLast);<br>        System.out.println(linkedList);<br>        <span class="hljs-comment">// 7. `public E pollFirst()`:获取集合中的第一个元素,获取后直接删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pollFirst</span> <span class="hljs-operator">=</span> linkedList.pollFirst();<br>        System.out.println(pollFirst);<br>        <span class="hljs-comment">// 8. `public E pollLast()`:获取集合中的最后一个元素,获取后直接删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pollLast</span> <span class="hljs-operator">=</span> linkedList.pollLast();<br>        System.out.println(pollLast);<br>        System.out.println(linkedList);<br>        <span class="hljs-comment">// 9. `public E removeFirst()`:移除集合中的第一个元素</span><br>        linkedList.addFirst(<span class="hljs-string">&quot;梅超风&quot;</span>);<br>        System.out.println(linkedList);<br>        linkedList.removeFirst();<br>        System.out.println(linkedList);<br>        <span class="hljs-comment">// 10. `public E removeLast()`:移除集合中的最后一个元素</span><br>        linkedList.removeLast();<br>        System.out.println(linkedList);<br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        <span class="hljs-comment">// 都是使用多态方式创建时就不存在以上的私有定义的方法</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `boolean add(E e)`:向List集合中添加元素`常用`</span><br>        list.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 2. `void add(int index, E element)`:向List集合中指定位置添加元素</span><br>        list.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;梅超风&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 3. `boolean addAll(Collection&lt;? extends E&gt; c)`:将指定集合中的所有元素追加到此集合的末尾</span><br>        list.addAll(linkedList);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 4. `boolean addAll(int index, Collection&lt;? extends E&gt; c)`:将指定集合中的所有元素追加到此集合的指定位置</span><br>        <span class="hljs-comment">// 5. `boolean contains(Object o)`:检测此集合中是否包含指定元素`常用`</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContains</span> <span class="hljs-operator">=</span> list.contains(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(isContains);<br>        <span class="hljs-comment">// 6. `boolean containsAll(Collection&lt;?&gt; c)`:检测集合中是否包含另一个集合中的元素</span><br>        <span class="hljs-comment">// 7. `E get(int index)`:获取集合中指定下标索引的元素并返回`常用`</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>        System.out.println(get);<br>        <span class="hljs-comment">// 8. `E set(int index, E element)`:修改集合中指定下标索引的元素</span><br>        list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;东方不败&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 9. `int indexOf(Object o)`:在集合中查找元素如果存在则返回此元素的下标索引(返回第一次发现的下标索引)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">indexOf</span> <span class="hljs-operator">=</span> list.indexOf(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(indexOf);<br>        <span class="hljs-comment">// 10. `int lastIndexOf(Object o)`:在集合中查找元素如果存在则返回此元素的下标索引(返回最后一次发现的下标索引)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastIndexOf</span> <span class="hljs-operator">=</span> list.lastIndexOf(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(lastIndexOf);<br>        <span class="hljs-comment">// 11. `List&lt;E&gt; subList(int fromIndex, int toIndex)`:切割集合,指定起始位置和结束位置</span><br>        <span class="hljs-comment">// 12. `ListIterator&lt;E&gt; listIterator()`:返回List接口迭代器</span><br>        <span class="hljs-comment">// 13. `int size()`:返回集合中的元素数量`常用`</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> list.size();<br>        System.out.println(size);<br>        <span class="hljs-comment">// 14. `boolean isEmpty()`:判断集合是否为空`常用`</span><br>        System.out.println(list.isEmpty());<br>        <span class="hljs-comment">// 15. `Object[] toArray()`:将集合转为数组</span><br>        <span class="hljs-comment">// 16. `void clear()`:清空集合内元素</span><br>        <span class="hljs-comment">// 17. `Iterator&lt;E&gt; iterator()`:返回集合迭代器元素,用于遍历集合中的所有元素</span><br>        <span class="hljs-comment">// ListIterator迭代器</span><br>        ListIterator&lt;String&gt; listIterator = list.listIterator();<br>        <span class="hljs-keyword">while</span> (listIterator.hasNext()) &#123;<br>            System.out.println(listIterator.next());<br>        &#125;<br>        <span class="hljs-comment">// Iterator迭代器</span><br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>        <span class="hljs-comment">// 清空clear</span><br>        list.clear();<br>        System.out.println(list.isEmpty());<br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="自定义实现LinkedList功能"><a href="#自定义实现LinkedList功能" class="headerlink" title="自定义实现LinkedList功能"></a>自定义实现LinkedList功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span> &#123;<br>    <span class="hljs-comment">// 用于存放首节点的属性--&gt;只记录集合中的第一个节点</span><br>    <span class="hljs-keyword">private</span> Node firstNode;<br>    <span class="hljs-comment">// 用于存放尾结点的属性--&gt;只记录集合中的最后一个节点</span><br>    <span class="hljs-keyword">private</span> Node lastNode;<br>    <span class="hljs-comment">// 用于存放集合中的元素数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>        <span class="hljs-comment">// 获取最后一个节点赋值给临时对象存放</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> lastNode;<br>        <span class="hljs-comment">// 创建新节点,每次创建都是最后一条所以next指向直接赋值null</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(tempNode, element, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 将新创建新节点当做是集合中的最后一个节点</span><br>        lastNode = newNode;<br>        <span class="hljs-comment">// 验证临时节点是否为空</span><br>        <span class="hljs-keyword">if</span> (tempNode == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 将集合中的第一个节点的指向,指向到newNode节点上,代表是集合中的第一个节点</span><br>            firstNode = newNode;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 临时存储节点不为空则将临时节点的next指向下一个节点,下一个节点就是上面新增的</span><br>            tempNode.next = newNode;<br>        &#125;<br>        <span class="hljs-comment">// 将集合中的size++代表元素数量</span><br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取集合中的第一个节点</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getFirstNode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstNode.elementData;<br>    &#125;<br>    <span class="hljs-comment">// 获取集合中的最后一个节点</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getLastNode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastNode.elementData;<br>    &#125;<br>    <span class="hljs-comment">// size方法,获取长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <span class="hljs-comment">// 创建私有内部类--&gt;节点类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-comment">// 前一个节点</span><br>        Node prev;<br>        <span class="hljs-comment">// 数据</span><br>        Object elementData;<br>        <span class="hljs-comment">// 下一个节点</span><br>        Node next;<br>        <span class="hljs-comment">// 全参构造方法</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node prev, Object elementData, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.elementData = elementData;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建自定义LinkedList集合对象</span><br>        <span class="hljs-type">LinkedList</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>        <span class="hljs-comment">// 添加数据</span><br>        linkedList.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        linkedList.add(<span class="hljs-string">&quot;梅超风&quot;</span>);<br>        linkedList.add(<span class="hljs-string">&quot;东方不败&quot;</span>);<br>        linkedList.add(<span class="hljs-string">&quot;岳不群&quot;</span>);<br>        linkedList.add(<span class="hljs-string">&quot;林平之&quot;</span>);<br>        linkedList.add(<span class="hljs-string">&quot;鞠婧祎&quot;</span>);<br>        <span class="hljs-comment">// 获取集合中第一个元素</span><br>        System.out.println(linkedList.getFirstNode());<br>        <span class="hljs-comment">// 获取集合中最后一个元素</span><br>        System.out.println(linkedList.getLastNode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="List接口之实现类Vector"><a href="#List接口之实现类Vector" class="headerlink" title="List接口之实现类Vector"></a>List接口之实现类Vector</h3><h4 id="Vector实现类概述"><a href="#Vector实现类概述" class="headerlink" title="Vector实现类概述"></a>Vector实现类概述</h4><p>Vector与ArrayList一模一样的,唯一的区别在于Vector是线程安全的而ArrayList是线程不安全</p><h4 id="List接口之Vector添加方法"><a href="#List接口之Vector添加方法" class="headerlink" title="List接口之Vector添加方法"></a>List接口之Vector添加方法</h4><ul><li><code>public synchronized boolean add(E e)</code>:向集合中追加元素<code>常用</code></li><li><code>public void add(int index, E element)</code>:向集合的指定下标索引插入元素</li><li><code>public synchronized boolean addAll(Collection&lt;? extends E&gt; c)</code>:将指定 Collection 中的所有元素附加到此 Vector 的末尾</li><li><code>public synchronized boolean addAll(int index, Collection&lt;? extends E&gt; c)</code>:将指定 Collection 中的所有元素插入到此 Vector 的指定位置。将当前位于该位置的元素（如果有）和任何后续元素向右移动（增加它们的索引）</li><li><code>public synchronized void addElement(E obj)</code>:向集合中追加元素</li></ul><h4 id="List接口之Vector删除方法"><a href="#List接口之Vector删除方法" class="headerlink" title="List接口之Vector删除方法"></a>List接口之Vector删除方法</h4><ul><li><code>public synchronized E remove(int index)</code>:指定下标索引删除集合中元素</li><li><code>public boolean remove(Object o)</code>:指定元素对象删除集合中的元素<code>常用</code></li><li><code>public synchronized boolean removeAll(Collection&lt;?&gt; c)</code>:从此 Vector 中删除包含在指定 Collection 中的所有元素</li><li><code>public synchronized void removeAllElements()</code>:从此Vector中删除所有元素并将其大小设置为零。</li><li><code>public synchronized boolean removeElement(Object obj)</code>:从此Vector中删除参数的第一个出现的元素。</li></ul><h4 id="List接口之Vector修改方法"><a href="#List接口之Vector修改方法" class="headerlink" title="List接口之Vector修改方法"></a>List接口之Vector修改方法</h4><ul><li><code>public synchronized E set(int index, E element)</code>:修改指定下标索引的元素<code>常用</code></li><li><code>public synchronized void setElementAt(E obj, int index)</code>:修改指定下标索引的元素</li><li><code>public synchronized void setSize(int newSize)</code>:设置集合中数组的大小</li></ul><h4 id="List接口之Vector查询方法"><a href="#List接口之Vector查询方法" class="headerlink" title="List接口之Vector查询方法"></a>List接口之Vector查询方法</h4><ul><li><code>public synchronized E get(int index)</code>:通过下标索引获取集合中的数据<code>常用</code></li><li><code>public int indexOf(Object o)</code>:指定元素获取集合中是否存在如果存在则返回第一次找到的下标索引否则返回-1</li><li><code>public synchronized int lastIndexOf(Object o)</code>:指定元素获取集合中是否存在如果存在则返回最后一次找到的下标索引否则返回-1</li></ul><h4 id="List接口之Vector其他方法"><a href="#List接口之Vector其他方法" class="headerlink" title="List接口之Vector其他方法"></a>List接口之Vector其他方法</h4><ul><li><code>public synchronized int size()</code>:获取集合中的元素数量–&gt;集合长度</li><li><code>public synchronized boolean isEmpty()</code>:判断集合是否为空</li><li><code>public void clear()</code>:清空集合中的所有数据</li></ul><h4 id="List接口之Vector代码案例"><a href="#List接口之Vector代码案例" class="headerlink" title="List接口之Vector代码案例"></a>List接口之Vector代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VectorDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建Vector对象</span><br>        Vector&lt;String&gt; vector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>        <span class="hljs-comment">// #### 3. List接口之Vector添加方法</span><br>        <span class="hljs-comment">// 1. `public synchronized boolean add(E e)`:向集合中追加元素`常用`</span><br>        vector.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(vector);<br>        <span class="hljs-comment">// 2. `public void add(int index, E element)`:向集合的指定下标索引插入元素</span><br>        vector.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;梅超风&quot;</span>);<br>        System.out.println(vector);<br>        <span class="hljs-comment">// 3. `public synchronized boolean addAll(Collection&lt;? extends E&gt; c)`:将指定 Collection 中的所有元素附加到此 Vector 的末尾</span><br>        <span class="hljs-comment">// 4. `public synchronized boolean addAll(int index, Collection&lt;? extends E&gt; c)`:将指定 Collection 中的所有元素插入到此 Vector 的指定位置。将当前位于该位置的元素（如果有）和任何后续元素向右移动（增加它们的索引）</span><br>        <span class="hljs-comment">// 5. `public synchronized void addElement(E obj)`:向集合中追加元素</span><br>        vector.addElement(<span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        System.out.println(vector);<br>        <span class="hljs-comment">// #### 4. List接口之Vector删除方法</span><br>        <span class="hljs-comment">// 1. `public synchronized E remove(int index)`:指定下标索引删除集合中元素</span><br>        vector.remove(<span class="hljs-number">0</span>);<br>        System.out.println(vector);<br>        <span class="hljs-comment">// 2. `public boolean remove(Object o)`:指定元素对象删除集合中的元素`常用`</span><br>        <span class="hljs-comment">// 3. `public synchronized boolean removeAll(Collection&lt;?&gt; c)`:从此 Vector 中删除包含在指定 Collection 中的所有元素</span><br>        <span class="hljs-comment">// 4. `public synchronized void removeAllElements()`:从此Vector中删除所有元素并将其大小设置为零。</span><br>        <span class="hljs-comment">// 5. `public synchronized boolean removeElement(Object obj)`:从此Vector中删除参数的第一个出现的元素。</span><br>        <span class="hljs-comment">// #### 5. List接口之Vector修改方法</span><br>        <span class="hljs-comment">// 1. `public synchronized E set(int index, E element)`:修改指定下标索引的元素`常用`</span><br>        vector.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;陈冠希&quot;</span>);<br>        System.out.println(vector);<br>        <span class="hljs-comment">// 2. `public synchronized void setElementAt(E obj, int index)`:修改指定下标索引的元素</span><br>        <span class="hljs-comment">// 3. `public synchronized void setSize(int newSize)`:设置集合中数组的大小</span><br>        <span class="hljs-comment">// #### 6. List接口之Vector查询方法</span><br>        <span class="hljs-comment">// 1. `public synchronized E get(int index)`:通过下标索引获取集合中的数据`常用`</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> vector.get(<span class="hljs-number">0</span>);<br>        System.out.println(element);<br>        <span class="hljs-comment">// 2. `public int indexOf(Object o)`:指定元素获取集合中是否存在如果存在则返回第一次找到的下标索引否则返回-1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">indexOf</span> <span class="hljs-operator">=</span> vector.indexOf(<span class="hljs-string">&quot;陈冠希&quot;</span>);<br>        System.out.println(indexOf);<br>        <span class="hljs-comment">// 3. `public synchronized int lastIndexOf(Object o)`:指定元素获取集合中是否存在如果存在则返回最后一次找到的下标索引否则返回-1</span><br>        <span class="hljs-comment">// #### 7. List接口之Vector其他方法</span><br>        <span class="hljs-comment">// 1. `public synchronized int size()`:获取集合中的元素数量--&gt;集合长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> vector.size();<br>        System.out.println(size);<br>        <span class="hljs-comment">// 2. `public synchronized boolean isEmpty()`:判断集合是否为空</span><br>        System.out.println(vector.isEmpty());<br>        <span class="hljs-comment">// 3. `public void clear()`:清空集合中的所有数据</span><br>        vector.clear();<br>        System.out.println(vector.isEmpty());<br>        System.out.println(vector.size());<br>        System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        <span class="hljs-comment">// 使用常用方式创建Vector对象--&gt;多态创建</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>        <span class="hljs-comment">// 增加</span><br>        list.add(<span class="hljs-string">&quot;舒克&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;贝塔&quot;</span>);<br>        list.addAll(vector);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 删除</span><br>        list.remove(<span class="hljs-string">&quot;陈冠希&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 修改</span><br>        list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;开飞机的舒克&quot;</span>);<br>        list.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;开坦克的贝塔&quot;</span>);<br>        <span class="hljs-comment">// 获取数据</span><br>        System.out.println(list.get(<span class="hljs-number">0</span>));<br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="List接口的三个实现类对比"><a href="#List接口的三个实现类对比" class="headerlink" title="List接口的三个实现类对比"></a>List接口的三个实现类对比</h3><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li><p>底层数组实现,查询速度快,增删速度慢,速度慢的原因是:每次如果插入数据则需要将插入位置之后的数据都向后移一位</p></li><li><p>线程不安全的</p></li></ul><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li><p>底层双链表实现,增删速度快,查询速度慢,速度慢的原因是:不管查询的是第几个都需要从头到尾查一遍</p></li><li><p>线程不安全的</p></li></ul><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h5><ul><li>底层数组实现,查询速度快,增删速度慢,速度慢的原因是:每次如果插入数据则需要将插入位置之后的数据都向后移一位</li><li>线程安全的</li></ul><blockquote><p>ArrayList和Vector实现都是相同,包括方法都是相同,唯一的区别就是ArrayList是线程不安全的,Vector是线程安全</p></blockquote><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><h4 id="1-Map接口概述"><a href="#1-Map接口概述" class="headerlink" title="1. Map接口概述"></a>1. Map接口概述</h4><blockquote><p>Map翻译是(地图),程序中不是地图意思,Map集合存储数据是以<code>键(Key)值(Value)对</code>方式,有些类似于身份证<br>比如:身份证是身份证号对应身份证姓名<br>    1. 对应结果:123456789:小明<br>        1. 身份证号:Key(键)–&gt;身份证号是不允许重复的<br>        2. 身份证姓名:Value(值)–&gt;身份证姓名是允许重复的<br>    2. 以上身份证查找时使用身份证号查找当前这个人(使用身份证号查询身份证姓名)<br>Map集合也是相同,Map集合使用通过<code>Key(键)</code>获取<code>Value(值)</code>,并且<code>Key(键)不允许重复</code>,<code>Value(值)允许重复</code><br>Map集合是<code>java.util</code>包中,所以也是工具类,其直接子类是HashMap&#x2F;LinkedHashMap&#x2F;TreeMap&#x2F;HashTable&#x2F;Properties等等<br>Map集合是无序的(Key的排序是无序的)–&gt;虽然说无序但是有自己的排序规则,这个规则是ASCII码表如果超出127则按照Unicode码表</p><ol><li>无序代表<code>存储顺序</code>与<code>取出顺序</code>不一致</li><li>不能同通过下标索引获取数据</li></ol></blockquote><h4 id="2-Map接口中的常用方法"><a href="#2-Map接口中的常用方法" class="headerlink" title="2. Map接口中的常用方法"></a>2. Map接口中的常用方法</h4><ul><li><code>V put(K key, V value)</code>:向Map集合中添加键值对元素,不存在则添加,如果Key(键)重复则修改原有内容(不是重新添加覆盖),并返回添加的Value(值)内容<ol><li>key:键</li><li>value:值</li></ol></li><li><code>V get(Object key)</code>:指定Key(键)获取Value(值)</li><li><code>V remove(Object key)</code>:指定Key(键)移除<code>Key(键)Value(值)</code>–&gt;移除键值对</li><li><code>boolean containsKey(Object key)</code>:查看Map集合中是否包含指定的指定Key(键)</li><li><code>boolean containsValue(Object value)</code>:查看Map集合中是否包含指定的Value(值)</li><li><code>Collection&lt;V&gt; values()</code>:返回Map集合中的所有Value(值)</li><li><code>boolean isEmpty()</code>:判断Map集合是否为空</li><li><code>void clear()</code>:清空Map集合元素</li><li><code>int size()</code>:返回Map集合的元素数量(Key-Value代表一个)</li><li><code>Set&lt;K&gt; keySet()</code>:返回Map集合中的所有Key(键)值</li><li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>:返回Map集合中的所有Key-Value–&gt;返回所有键值对</li></ul><h4 id="3-map接口代码案例"><a href="#3-map接口代码案例" class="headerlink" title="3. map接口代码案例"></a>3. map接口代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建Map集合,使用其子类HashMap创建--&gt;多态创建方式</span><br>        <span class="hljs-comment">// 常用Map泛型结构Map&lt;String, Object&gt;,Map&lt;String, String&gt;</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `V put(K key, V value)`:向Map集合中添加键值对元素,不存在则添加,如果Key(键)重复则修改原有内容(不是重新添加),并返回添加的Value(值)内容</span><br>        <span class="hljs-comment">// 1. key:键</span><br>        <span class="hljs-comment">// 2. value:值</span><br>        <span class="hljs-comment">// map.put(&quot;772004123055&quot;, &quot;彭于晏&quot;);</span><br>        <span class="hljs-comment">// map.put(&quot;771914123055&quot;, &quot;聂小倩&quot;);</span><br>        <span class="hljs-comment">// map.put(&quot;771999123055&quot;, &quot;聂小倩&quot;);</span><br>        <span class="hljs-comment">// // 771989123055是刘亦菲</span><br>        <span class="hljs-comment">// map.put(&quot;771989123055&quot;, &quot;刘亦菲&quot;);</span><br>        <span class="hljs-comment">// 重复添加相同的Key771989123055</span><br>        <span class="hljs-comment">// 如果Key重复则修改原有的Value值,而不是覆盖Key-Value</span><br>        map.put(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;苍老师&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;聂小倩&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;聂小倩&quot;</span>);<br>        <span class="hljs-comment">// 771989123055是刘亦菲</span><br>        map.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>        <span class="hljs-comment">// 重复添加相同的Key771989123055</span><br>        <span class="hljs-comment">// 如果Key重复则修改原有的Value值,而不是覆盖Key-Value</span><br>        map.put(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;苍老师&quot;</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 1. `V get(Object key)`:指定Key(键)获取Value(值)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(value);<br>        <span class="hljs-comment">// 获取没有的值时是报错还是返回null?</span><br>        value = map.get(<span class="hljs-string">&quot;aa&quot;</span>);<br>        System.out.println(value);<br>        <span class="hljs-comment">// 第二个getOrDefault,当获取的key不存在时返回defaultValue--&gt;返回设置默认值</span><br>        value = map.getOrDefault(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;不存在&quot;</span>);<br>        System.out.println(value);<br>        value = map.getOrDefault(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;不存在&quot;</span>);<br>        System.out.println(value);<br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        <span class="hljs-comment">// 2. `V remove(Object key)`:指定Key(键)移除`Key(键)Value(值)`--&gt;移除键值对</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> map.remove(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(remove);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 3. `boolean containsKey(Object key)`:查看Map集合中是否包含指定的指定Key(键)</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContainsKey</span> <span class="hljs-operator">=</span> map.containsKey(<span class="hljs-string">&quot;f&quot;</span>);<br>        System.out.println(isContainsKey);<br>        isContainsKey = map.containsKey(<span class="hljs-string">&quot;ff&quot;</span>);<br>        System.out.println(isContainsKey);<br>        <span class="hljs-comment">// 4. `boolean containsValue(Object value)`:查看Map集合中是否包含指定的Value(值)</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContainsValue</span> <span class="hljs-operator">=</span> map.containsValue(<span class="hljs-string">&quot;苍老师&quot;</span>);<br>        System.out.println(isContainsValue);<br>        isContainsValue = map.containsValue(<span class="hljs-string">&quot;小泽老师&quot;</span>);<br>        System.out.println(isContainsValue);<br>        <span class="hljs-comment">// 5. `Collection&lt;V&gt; values()`:返回Map集合中的所有Value(值)</span><br>        Collection&lt;String&gt; values = map.values();<br>        System.out.println(values);<br>        <span class="hljs-comment">// 6. `boolean isEmpty()`:判断Map集合是否为空</span><br>        System.out.println(map.isEmpty());<br>        <span class="hljs-comment">// 8. `int size()`:返回Map集合的元素数量(Key-Value代表一个)</span><br>        System.out.println(map.size());<br>        <span class="hljs-comment">// Map集合的遍历只能通过keySet和entrySet遍历</span><br>        <span class="hljs-comment">// 9. `Set&lt;K&gt; keySet()`:返回Map集合中的所有Key(键)值</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        Set&lt;String&gt; keySet = map.keySet();<br>        <span class="hljs-comment">// 使用增强for循环遍历keySet</span><br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<br>            <span class="hljs-comment">// 遍历key并使用key获取value</span><br>            System.out.println(<span class="hljs-string">&quot;key:&quot;</span> + key + <span class="hljs-string">&quot;,value:&quot;</span> + map.get(key));<br>        &#125;<br>        <span class="hljs-comment">// 10. `Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()`:返回Map集合中的所有Key-Value--&gt;返回所有键值对</span><br>        <span class="hljs-comment">// Map.Entry--&gt;Entry是Map接口中的内部接口,作用就是返回Map集合中的Key-Value--&gt;返回键值对</span><br>        <span class="hljs-comment">// Entry接口中有两个方法,一个getKey(获取key)一个是getValue(获取value)</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();<br>        <span class="hljs-comment">// 遍历Set集合</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrySet) &#123;<br>            <span class="hljs-comment">// 打印结果</span><br>            System.out.println(<span class="hljs-string">&quot;key:&quot;</span> + entry.getKey() + <span class="hljs-string">&quot;,value:&quot;</span> + entry.getValue());<br>        &#125;<br>        <span class="hljs-comment">// 7. `void clear()`:清空Map集合元素</span><br>        map.clear();<br>        System.out.println(map);<br>        System.out.println(map.size());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map接口之HashMap类"><a href="#Map接口之HashMap类" class="headerlink" title="Map接口之HashMap类"></a>Map接口之HashMap类</h3><h4 id="1-HashMap概述"><a href="#1-HashMap概述" class="headerlink" title="1. HashMap概述"></a>1. HashMap概述</h4><blockquote><p>HashMap采用哈希算法实现,是Map接口中最常用的实现类,底层实现是使用哈希表存储数据,所以Key不允许重复,如果重复则修改Value值,HashMap在查找,删除,修改方法中效率非常高(全能增删改查效率都快)<br>HashMap的哈希表这种数据结构非常重要,并且应用场景非常的丰富,所以概念得懂</p></blockquote><ol><li>哈希表是嘛玩意儿?<ol><li>哈希表是基于链表实现,是链表的升级版本</li></ol></li><li>哈希表,数组,链表的优劣势<ol><li>数组:<ol><li>优势:查询速度快,可以直接指定下标索引查询</li><li>劣势:增删速度慢,增加或删除时需要将当前位置之后的所有元素向后移动</li></ol></li><li>链表:<ol><li>优势:增删速度快,原因是元素都是使用指向方式指向地址,不存在连续空间,想删除哪个直接删掉,并将前后的元素在相互关联,不用移动元素的位置</li><li>劣势:查询速度慢,因为没有连续空间,每一个元素知道的只有他的前一个节点和后一个节点是谁,不知道其他节点是谁,只能通过从头遍历到尾的方式查询</li></ol></li><li>哈希表:是吸取<code>数组</code>与<code>链表</code>的有点和缺点产生<ol><li>取长补短进行改进,改进后有<code>数组</code>+<code>链表</code>方式产生了<code>哈希表的数据结构</code>,全能增删改查效率都快(但是跟数组比起来还是差点意思的)</li></ol></li><li>数据结构的存储方式分为两种<ol><li>顺序存储结构–&gt;数组</li><li>链式存储结构–&gt;链表</li></ol></li></ol></li></ol><h4 id="2-哈希表概述"><a href="#2-哈希表概述" class="headerlink" title="2. 哈希表概述"></a>2. 哈希表概述</h4><blockquote><p>哈希表是由<code>数组</code>+<code>链表</code>实现</p></blockquote><h5 id="1-二叉树"><a href="#1-二叉树" class="headerlink" title="1. 二叉树"></a>1. 二叉树</h5><pre><code class="hljs">1. 二叉树是树形结构,使用的非常多,一般般情况使用时是针对于结构进行升级以及使用算法计算如何分叉,由一个节点及两根互不相交的分叉来作为左子树和右子树,实现时分为5种形态2. 五种二叉树形态![](./img/18.png)    1. 第一种情况:空树    2. 第二种情况:仅有一个节点的二叉树    3. 第三种情况:仅有左子树的二叉树    4. 第四种情况:仅有右子树的二叉树    5. 第五种情况:有左右子树的非空二叉树(完整二叉树)2. 二叉树是如何排序的    1. 分为左右子树,左子树数字小于上一个节点,右子树数字大于上一个节点    2. 例如有这么一组数据--&gt;25,14,27,21,19,26    ![](./img/19.png)3. 二叉树实现了排序功能可以快速的检索,但是如果本身数据是有序的(例如:6,5,4,3,2,1)那么这种数据就会倾倒式的一边倒,要么向左要么向右--&gt;一旦发生这种情况那就是普通的链表结构了4. 二叉树的缺点是不能排序顺序数字的结构,一旦排序则变回普通的链表结构例如:数据为(1,2,3,4,5,6)    ![](./img/20.png)</code></pre><h5 id="2-平衡二叉树"><a href="#2-平衡二叉树" class="headerlink" title="2. 平衡二叉树"></a>2. 平衡二叉树</h5><blockquote><p>为了避免二叉树出现的一边倒的情况,科学家研究除了平衡二叉树,比如在原有的数据将数据进行平衡,会将一组数据的排序方式改变,当前已知的是不管怎么排序是不会出现一边倒超出两个及以上节点的情况,但是排序时次数是不确定,当前有可能排序次数早很多次的情况,如果出现不平排序次数不确定,有可能会重新将所有的数据进行排序,造成速度慢情况<br>缺点是如果出现了添加的元素过多时他的排序次数是不确定的,有可能会出现重新排列所有的情况,可能会造成效率低多做无用功的操作,有问题则需要解决–&gt;科学家又研究除了一个叫做红黑二叉树的结构</p></blockquote><h5 id="3-红黑二叉树"><a href="#3-红黑二叉树" class="headerlink" title="3. 红黑二叉树"></a>3. 红黑二叉树</h5><blockquote><p>红黑二叉树是为了解决平衡二叉树造成的不确定移动次数的情况,升级版本;红黑二叉树又被称之为<code>红黑树</code>,是有二叉树组成,同时有事一颗自平衡排序二叉树</p></blockquote><ol><li>红黑树在原有的平衡二叉树基础上升级了几个特点<ul><li>每个节点要么是<code>红色</code>,要么是<code>黑色</code></li><li>根节点始终保持<code>黑色</code></li><li>所有的叶子节点都是为空节点–&gt;null,并且全是<code>黑色</code></li><li>每个<code>红色</code>节点的两个子节点都是<code>黑色</code>,但是每个叶子到根的路径上<code>不会出现两个连续</code>的<code>红色</code>节点</li><li>从任意节点到子节点中的每个叶子节点的路径可以包含相同数量的黑色节点</li></ul></li></ol><blockquote><p>通过以上的升级得出最终的结论就是红黑树有两个颜色,黑色允许重复,红色不允许重复(上下节点)<br>红黑树的操作:插入删除,左旋,右旋,着色,每次插入或删除一个节点时都可能会导致不符合规范的情况(超出两个节点的范围了),红黑树就进行修复,使用左旋与右旋和着色操作进行修复,用于保持红黑树的结构始终平衡<br>红黑树动画演示页面:<code>https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</code></p></blockquote><h5 id="4-二叉树-x2F-平衡二叉树-x2F-红黑二叉树"><a href="#4-二叉树-x2F-平衡二叉树-x2F-红黑二叉树" class="headerlink" title="4. 二叉树&#x2F;平衡二叉树&#x2F;红黑二叉树"></a>4. 二叉树&#x2F;平衡二叉树&#x2F;红黑二叉树</h5><ol><li>二叉树基于链表,为了解决链表的查询问题而生,存在的问题,如果数据是递增的则会出现一边倒的情况,相当于最终还是链表结构,不是二叉树结构梁</li><li>平衡二叉树基于二叉树为了解决出现一边倒的情况而生,排序时会根据数据的结构进行自动平衡(不会超过2个多节点,一旦超过则重新排序),但是也有问题,如果数据过多在排序过程中容易出现整体排序(无法确定排序次数)可能造成影响性能的问题</li><li>红黑二叉树基于平衡二叉树,是升级版本,为了解决平衡二叉树排序过程中出现未知排序次数造成的性能问题而生,使用<code>红</code>&#x2F;<code>黑</code>两色用于进行标识,并且永远不会出现连续的<code>红色</code>,<code>黑色</code>是会出现连续情况,并且<code>黑色</code>始终都会比<code>红色</code>多</li></ol><h4 id="3-Hash-Map构造方法"><a href="#3-Hash-Map构造方法" class="headerlink" title="3. Hash Map构造方法"></a>3. Hash Map构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用空参构造方法创建Map集合,会有默认容量</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span><br>&#125;<br><span class="hljs-comment">// 指定初始化容量创建Map集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-HashMap常用方法–-gt-由于HashMap使用的都是他爹Map接口的方法-所以方法一致"><a href="#4-HashMap常用方法–-gt-由于HashMap使用的都是他爹Map接口的方法-所以方法一致" class="headerlink" title="4. HashMap常用方法–&gt;由于HashMap使用的都是他爹Map接口的方法,所以方法一致"></a>4. HashMap常用方法–&gt;由于HashMap使用的都是他爹Map接口的方法,所以方法一致</h4><ul><li><code>V put(K key, V value)</code>:向Map集合中添加键值对元素,不存在则添加,如果Key(键)重复则修改原有内容(不是重新添加覆盖),并返回添加的Value(值)内容<ol><li>key:键</li><li>value:值</li></ol></li><li><code>V get(Object key)</code>:指定Key(键)获取Value(值)</li><li><code>V remove(Object key)</code>:指定Key(键)移除<code>Key(键)Value(值)</code>–&gt;移除键值对</li><li><code>boolean containsKey(Object key)</code>:查看Map集合中是否包含指定的指定Key(键)</li><li><code>boolean containsValue(Object value)</code>:查看Map集合中是否包含指定的Value(值)</li><li><code>Collection&lt;V&gt; values()</code>:返回Map集合中的所有Value(值)</li><li><code>boolean isEmpty()</code>:判断Map集合是否为空</li><li><code>void clear()</code>:清空Map集合元素</li><li><code>int size()</code>:返回Map集合的元素数量(Key-Value代表一个)</li><li><code>Set&lt;K&gt; keySet()</code>:返回Map集合中的所有Key(键)值</li><li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>:返回Map集合中的所有Key-Value–&gt;返回所有键值对</li></ul><h4 id="5-HashMap集合代码案例"><a href="#5-HashMap集合代码案例" class="headerlink" title="5. HashMap集合代码案例"></a>5. HashMap集合代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建Map集合,使用其子类HashMap创建--&gt;多态创建方式</span><br>        <span class="hljs-comment">// 常用Map泛型结构Map&lt;String, Object&gt;,Map&lt;String, String&gt;</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `V put(K key, V value)`:向Map集合中添加键值对元素,不存在则添加,如果Key(键)重复则修改原有内容(不是重新添加),并返回添加的Value(值)内容</span><br>        <span class="hljs-comment">// 1. key:键</span><br>        <span class="hljs-comment">// 2. value:值</span><br>        <span class="hljs-comment">// map.put(&quot;772004123055&quot;, &quot;彭于晏&quot;);</span><br>        <span class="hljs-comment">// map.put(&quot;771914123055&quot;, &quot;聂小倩&quot;);</span><br>        <span class="hljs-comment">// map.put(&quot;771999123055&quot;, &quot;聂小倩&quot;);</span><br>        <span class="hljs-comment">// // 771989123055是刘亦菲</span><br>        <span class="hljs-comment">// map.put(&quot;771989123055&quot;, &quot;刘亦菲&quot;);</span><br>        <span class="hljs-comment">// 重复添加相同的Key771989123055</span><br>        <span class="hljs-comment">// 如果Key重复则修改原有的Value值,而不是覆盖Key-Value</span><br>        map.put(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;苍老师&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;聂小倩&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;聂小倩&quot;</span>);<br>        <span class="hljs-comment">// 771989123055是刘亦菲</span><br>        map.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>        <span class="hljs-comment">// 重复添加相同的Key771989123055</span><br>        <span class="hljs-comment">// 如果Key重复则修改原有的Value值,而不是覆盖Key-Value</span><br>        map.put(<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;苍老师&quot;</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 1. `V get(Object key)`:指定Key(键)获取Value(值)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(value);<br>        <span class="hljs-comment">// 获取没有的值时是报错还是返回null?</span><br>        value = map.get(<span class="hljs-string">&quot;aa&quot;</span>);<br>        System.out.println(value);<br>        <span class="hljs-comment">// 第二个getOrDefault,当获取的key不存在时返回defaultValue--&gt;返回设置默认值</span><br>        value = map.getOrDefault(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;不存在&quot;</span>);<br>        System.out.println(value);<br>        value = map.getOrDefault(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;不存在&quot;</span>);<br>        System.out.println(value);<br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        <span class="hljs-comment">// 2. `V remove(Object key)`:指定Key(键)移除`Key(键)Value(值)`--&gt;移除键值对</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> map.remove(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(remove);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 3. `boolean containsKey(Object key)`:查看Map集合中是否包含指定的指定Key(键)</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContainsKey</span> <span class="hljs-operator">=</span> map.containsKey(<span class="hljs-string">&quot;f&quot;</span>);<br>        System.out.println(isContainsKey);<br>        isContainsKey = map.containsKey(<span class="hljs-string">&quot;ff&quot;</span>);<br>        System.out.println(isContainsKey);<br>        <span class="hljs-comment">// 4. `boolean containsValue(Object value)`:查看Map集合中是否包含指定的Value(值)</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isContainsValue</span> <span class="hljs-operator">=</span> map.containsValue(<span class="hljs-string">&quot;苍老师&quot;</span>);<br>        System.out.println(isContainsValue);<br>        isContainsValue = map.containsValue(<span class="hljs-string">&quot;小泽老师&quot;</span>);<br>        System.out.println(isContainsValue);<br>        <span class="hljs-comment">// 5. `Collection&lt;V&gt; values()`:返回Map集合中的所有Value(值)</span><br>        Collection&lt;String&gt; values = map.values();<br>        System.out.println(values);<br>        <span class="hljs-comment">// 6. `boolean isEmpty()`:判断Map集合是否为空</span><br>        System.out.println(map.isEmpty());<br>        <span class="hljs-comment">// 8. `int size()`:返回Map集合的元素数量(Key-Value代表一个)</span><br>        System.out.println(map.size());<br>        <span class="hljs-comment">// Map集合的遍历只能通过keySet和entrySet遍历</span><br>        <span class="hljs-comment">// 9. `Set&lt;K&gt; keySet()`:返回Map集合中的所有Key(键)值</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        Set&lt;String&gt; keySet = map.keySet();<br>        <span class="hljs-comment">// 使用增强for循环遍历keySet</span><br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<br>            <span class="hljs-comment">// 遍历key并使用key获取value</span><br>            System.out.println(<span class="hljs-string">&quot;key:&quot;</span> + key + <span class="hljs-string">&quot;,value:&quot;</span> + map.get(key));<br>        &#125;<br>        <span class="hljs-comment">// 10. `Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()`:返回Map集合中的所有Key-Value--&gt;返回所有键值对</span><br>        <span class="hljs-comment">// Map.Entry--&gt;Entry是Map接口中的内部接口,作用就是返回Map集合中的Key-Value--&gt;返回键值对</span><br>        <span class="hljs-comment">// Entry接口中有两个方法,一个getKey(获取key)一个是getValue(获取value)</span><br>        System.out.println(<span class="hljs-string">&quot;======================================================&quot;</span>);<br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();<br>        <span class="hljs-comment">// 遍历Set集合</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrySet) &#123;<br>            <span class="hljs-comment">// 打印结果</span><br>            System.out.println(<span class="hljs-string">&quot;key:&quot;</span> + entry.getKey() + <span class="hljs-string">&quot;,value:&quot;</span> + entry.getValue());<br>        &#125;<br>        <span class="hljs-comment">// 7. `void clear()`:清空Map集合元素</span><br>        map.clear();<br>        System.out.println(map);<br>        System.out.println(map.size());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-HashMap的实现是什么"><a href="#6-HashMap的实现是什么" class="headerlink" title="6. HashMap的实现是什么?"></a>6. HashMap的实现是什么?</h4><h5 id="1-HashMapJDK1-7跟JDK1-8的切换红黑树原码分析"><a href="#1-HashMapJDK1-7跟JDK1-8的切换红黑树原码分析" class="headerlink" title="1. HashMapJDK1.7跟JDK1.8的切换红黑树原码分析"></a>1. HashMapJDK1.7跟JDK1.8的切换<code>红黑树</code>原码分析</h5><ol><li>HashMap的实现JDK1.7跟JDK1.8不同,JDK1.7中HashMap是使用<code>数组</code>加<code>链表</code>的结合体实现,JDK1.8是<code>数组</code>加<code>链表</code>加<code>红黑树</code>实现,JDK1.7之前只能使用数组加链表的实现,JDK1.8后在数据量少的时候使用的是<code>数组</code>加<code>链表</code>实现,而当数组存储到8个长度时则更改为<code>数组</code>加<code>红黑树</code>实现</li><li>查看HashMap具体实现–&gt;put方法,什么时候用数组加链表,什么时候用数组加红黑树,以及为什么Key不能重复是如何实现的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 是否使用红黑树的阈值--&gt;如果长度是在8以内,使用的是JDK1.8的数组加链表,如果是8以上则使用数组加红黑树</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-comment">// HashMap的普通方法</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-comment">// 调用putVal方法</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent, <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 循环验证当前数组中的数据是有多少</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-comment">// 将p.next指向的地址赋值给e变量,并判断是否为null</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 如果为null则进入</span><br>                    <span class="hljs-comment">// 调用newNode方法创建新节点,并赋值给p.next代表上一个节点的指向位置,最后一个节点</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">// 用循环判断当前二叉树统计的次数是否大于等于7</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>)<br>                        <span class="hljs-comment">// 如果binCount大于等于7则代表当前存的数据已经是8条,调用treeifyBin方法使用红黑树</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// 上方判断如果大于等于7则使用红黑树的代码</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> hash)</span> &#123;<br>    <span class="hljs-type">int</span> n, index; Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 创建的就是红黑树</span><br>        TreeNode&lt;K,V&gt; hd = <span class="hljs-literal">null</span>, tl = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">// 真实创建红黑树并赋值</span><br>            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (tl == <span class="hljs-literal">null</span>)<br>                hd = p;<br>            <span class="hljs-keyword">else</span> &#123;<br>                p.prev = tl;<br>                tl.next = p;<br>            &#125;<br>            tl = p;<br>        &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-literal">null</span>)<br>            hd.treeify(tab);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 红黑树内部类</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;<br>    <span class="hljs-comment">// parent是红黑树的父级连接</span><br>    TreeNode&lt;K,V&gt; parent;  <span class="hljs-comment">// red-black tree links</span><br>    <span class="hljs-comment">// left是红黑树的左子树</span><br>    TreeNode&lt;K,V&gt; left;<br>    <span class="hljs-comment">// right是红黑树的右子树</span><br>    TreeNode&lt;K,V&gt; right;<br>    <span class="hljs-comment">// prev用于连接节点,有利于删除</span><br>    TreeNode&lt;K,V&gt; prev;    <span class="hljs-comment">// needed to unlink next upon deletion</span><br>    <span class="hljs-comment">// red用于记录当前节点是红树还是黑树</span><br>    <span class="hljs-type">boolean</span> red;<br>    TreeNode(<span class="hljs-type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-built_in">super</span>(hash, key, val, next);<br>    &#125;<br>    <span class="hljs-comment">// ...省略n行实现代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-HashMap的put方法为何不能添加重复的key源码分析"><a href="#2-HashMap的put方法为何不能添加重复的key源码分析" class="headerlink" title="2. HashMap的put方法为何不能添加重复的key源码分析"></a>2. HashMap的put方法为何不能添加重复的key源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent, <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    <span class="hljs-comment">// 声明Node节点数组</span><br>    HashMap.Node&lt;K, V&gt;[] tab;<br>    <span class="hljs-comment">// 声明Node节点对象</span><br>    HashMap.Node&lt;K, V&gt; p;<br>    <span class="hljs-comment">// 声明两个int变量</span><br>    <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-comment">// 将table数据赋值给tab然后判断是否等于null</span><br>    <span class="hljs-comment">// 如果tab不等于null则讲tab.length赋值n变量，然后判断是否为0</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 重新设置长度--》然后创建对象并返回</span><br>        <span class="hljs-comment">// 返回对象后又获取数组的长度--&gt;赋值给n</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">// hash是调用方法计算而来</span><br>    <span class="hljs-comment">// 讲n数组长度-1，并使用按位与hash计算，将最终的值赋值给i（赋值后如果数字相同则直接向后继续添加）</span><br>    <span class="hljs-comment">// tab[i = (n - 1) &amp; hash]--&gt;例如key是name,最终计算出的值为8，讲数组下标为8的数据取出</span><br>    <span class="hljs-comment">// p--&gt;Node节点对象，判断是否等于null</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">// 如果等于null创建Node节点对象赋值进去</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 声明了一个Node节点对象e</span><br>        HashMap.Node&lt;K, V&gt; e;<br>        <span class="hljs-comment">// Key的泛型名称</span><br>        K k;<br>        <span class="hljs-comment">// p.hash == hash下一行是解释</span><br>        <span class="hljs-comment">// p.hash是当前tab[i]Node数组下标中的值，hash是传入的Key值如果相同则代表当前他们可能是相同数据</span><br>        <span class="hljs-comment">// (k = p.key) == key--》基本数据类型</span><br>        <span class="hljs-comment">// 将tab[i]Node数组下标中的值--》p.key=原本可能存在的key，与传入的key对比(基本数据类型)</span><br>        <span class="hljs-comment">// key != null &amp;&amp; key.equals(k)</span><br>        <span class="hljs-comment">// 先验证传入的key是否为null如果不是则使用key.equals()对比内容是否相同</span><br>        <span class="hljs-comment">// 这里是验证传入Key是否已存在的根本位置</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-comment">// 用p节点赋值给e节点</span><br>            e = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> HashMap.TreeNode)<br>            e = ((HashMap.TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果hash相同而equals不同则进入这里执行</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-comment">// p.next--&gt;指向的下一个节点赋值给e</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 将创建的新节点地址赋值给p.next的指向</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 与上面的验证相同</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 验证e节点是否不为null</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 将value赋值给oldValue（老值）</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-comment">// 判断oldValue是否为null</span><br>            <span class="hljs-comment">// 是put方法调用的传入的值，传入默认就是false</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                <span class="hljs-comment">// 将调用put时传入的值直接赋值给e.value</span><br>                e.value = value;<br>            <span class="hljs-comment">// 这个方法就是将e节点对象重新赋值到节点数组中</span><br>            afterNodeAccess(e);<br>            <span class="hljs-comment">// 返回修改前的值</span><br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map接口之LinkedHashMap类"><a href="#Map接口之LinkedHashMap类" class="headerlink" title="Map接口之LinkedHashMap类"></a>Map接口之LinkedHashMap类</h3><h4 id="1-LinkedHashMap类概述"><a href="#1-LinkedHashMap类概述" class="headerlink" title="1. LinkedHashMap类概述"></a>1. LinkedHashMap类概述</h4><blockquote><p>LinkedHashMap类与HashMap相同,唯一不同点在于他底层是采用的<code>链表</code>+<code>哈希表</code>结构,由于是链表实现所以他的元素顺序能够保证(有序的:存入数据与取出顺序相同),其他的实现与HashMap基本完全一致,同样key也是不允许重复,<code>LinkedHashMap类是继承自HashMap类的</code></p></blockquote><h4 id="2-LinkedHashMap类的构造方法"><a href="#2-LinkedHashMap类的构造方法" class="headerlink" title="2. LinkedHashMap类的构造方法"></a>2. LinkedHashMap类的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建LinkedHashMap集合对象,使用默认长度</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedHashMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用他爹HashMap的构造方法</span><br>    <span class="hljs-built_in">super</span>();<br>    accessOrder = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">// 创建LinkedHashMap集合对象并指定初始容量</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-comment">// 调用他爹HashMap构造方法</span><br>    <span class="hljs-built_in">super</span>(initialCapacity);<br>    accessOrder = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-LinkedHashMap类的常用方法-由于是直接继承自HashMap类的所以很多方法都是用的他爹的"><a href="#3-LinkedHashMap类的常用方法-由于是直接继承自HashMap类的所以很多方法都是用的他爹的" class="headerlink" title="3. LinkedHashMap类的常用方法(由于是直接继承自HashMap类的所以很多方法都是用的他爹的)"></a>3. LinkedHashMap类的常用方法(由于是直接继承自HashMap类的所以很多方法都是用的他爹的)</h4><ul><li><code>V put(K key, V value)</code>:向Map集合中添加键值对元素,不存在则添加,如果Key(键)重复则修改原有内容(不是重新添加覆盖),并返回添加的Value(值)内容<ol><li>key:键</li><li>value:值</li></ol></li><li><code>V get(Object key)</code>:指定Key(键)获取Value(值)</li><li><code>V remove(Object key)</code>:指定Key(键)移除<code>Key(键)Value(值)</code>–&gt;移除键值对</li><li><code>boolean containsKey(Object key)</code>:查看Map集合中是否包含指定的指定Key(键)</li><li><code>boolean containsValue(Object value)</code>:查看Map集合中是否包含指定的Value(值)</li><li><code>Collection&lt;V&gt; values()</code>:返回Map集合中的所有Value(值)</li><li><code>boolean isEmpty()</code>:判断Map集合是否为空</li><li><code>void clear()</code>:清空Map集合元素</li><li><code>int size()</code>:返回Map集合的元素数量(Key-Value代表一个)</li><li><code>Set&lt;K&gt; keySet()</code>:返回Map集合中的所有Key(键)值</li><li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>:返回Map集合中的所有Key-Value–&gt;返回所有键值对</li></ul><h4 id="4-LinkedHashMap类代码案例"><a href="#4-LinkedHashMap类代码案例" class="headerlink" title="4. LinkedHashMap类代码案例"></a>4. LinkedHashMap类代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashMapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建 LinkedHashMap类 对象--&gt;多态方式创建</span><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `V put(K key, V value)`:向Map集合中添加键值对元素,不存在则添加,如果Key(键)重复则修改原有内容(不是重新添加覆盖),并返回添加的Value(值)内容`常用掌握`</span><br>        <span class="hljs-comment">// 1. key:键</span><br>        <span class="hljs-comment">// 2. value:值</span><br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<br>        map.put(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;男神&quot;</span>);<br>        <span class="hljs-comment">// 赋值一个相同的</span><br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 1. `V get(Object key)`:指定Key(键)获取Value(值)`常用掌握`</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br>        <span class="hljs-comment">// 2. `V remove(Object key)`:指定Key(键)移除`Key(键)Value(值)`--&gt;移除键值对</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">abc</span> <span class="hljs-operator">=</span> map.remove(<span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(abc);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 3. `boolean containsKey(Object key)`:查看Map集合中是否包含指定的指定Key(键)</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;name&quot;</span>));<br>        <span class="hljs-comment">// 4. `boolean containsValue(Object value)`:查看Map集合中是否包含指定的Value(值)</span><br>        System.out.println(map.containsValue(<span class="hljs-string">&quot;吴彦祖&quot;</span>));<br>        <span class="hljs-comment">// 5. `Collection&lt;V&gt; values()`:返回Map集合中的所有Value(值)</span><br>        Collection&lt;Object&gt; values = map.values();<br>        System.out.println(values);<br>        <span class="hljs-comment">// 6. `boolean isEmpty()`:判断Map集合是否为空</span><br>        System.out.println(map.isEmpty());<br>        <span class="hljs-comment">// 8. `int size()`:返回Map集合的元素数量(Key-Value代表一个)`常用掌握`</span><br>        System.out.println(map.size());<br>        <span class="hljs-comment">// 9. `Set&lt;K&gt; keySet()`:返回Map集合中的所有Key(键)值</span><br>        Set&lt;String&gt; strings = map.keySet();<br>        System.out.println(strings);<br>        <span class="hljs-comment">// 10. `Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()`:返回Map集合中的所有Key-Value--&gt;返回所有键值对</span><br>        Set&lt;Map.Entry&lt;String, Object&gt;&gt; entries = map.entrySet();<br>        System.out.println(entries);<br>        <span class="hljs-comment">// 7. `void clear()`:清空Map集合元素</span><br>        map.clear();<br>        <span class="hljs-comment">// 打印数组长度以及是否为空</span><br>        System.out.println(map.size());<br>        System.out.println(map.isEmpty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map接口之Hashtable类"><a href="#Map接口之Hashtable类" class="headerlink" title="Map接口之Hashtable类"></a>Map接口之Hashtable类</h3><h4 id="1-Hashtable类概述"><a href="#1-Hashtable类概述" class="headerlink" title="1. Hashtable类概述"></a>1. Hashtable类概述</h4><blockquote><p>Hashtable类与HashMap类方法及构造方法基本都是相同的,底层依旧是采用<code>数组</code>+<code>链表</code>或<code>数组</code>+<code>红黑树</code>,增删改查速度也很快,唯一的区别在于Hashtable是线程安全的(使用了synchronized关键字修饰),HashMap是线程不安全的</p></blockquote><h4 id="2-Hashtable类的构造方法"><a href="#2-Hashtable类的构造方法" class="headerlink" title="2. Hashtable类的构造方法"></a>2. Hashtable类的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Hashtable集合对象,默认容量是11</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hashtable</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-number">11</span>, <span class="hljs-number">0.75f</span>);<br>&#125;<br><span class="hljs-comment">// 创建HashTable集合对象,并指定初始化容量</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hashtable</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-built_in">this</span>(initialCapacity, <span class="hljs-number">0.75f</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Hashtable类的常用方法"><a href="#3-Hashtable类的常用方法" class="headerlink" title="3. Hashtable类的常用方法"></a>3. Hashtable类的常用方法</h4><ul><li><code>public synchronized V put(K key, V value)</code>:向集合中添加元素<ul><li>key:键值</li><li>value:值</li></ul></li><li><code>public synchronized V get(Object key)</code>:通过key获取集合中指定value值</li><li><code>public synchronized V remove(Object key)</code>:通过key移除集合中的元素</li><li><code>public Set&lt;K&gt; keySet()</code>:获取集合中的所有key值</li><li><code>public Collection&lt;V&gt; values()</code>:获取集合中所有值</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>:获取集合中所有键值对(key-value)</li><li><code>public synchronized int size()</code>:获取集合中所有元素数量</li><li><code>public synchronized boolean isEmpty()</code>:判断集合是否为空</li><li><code>public synchronized void clear()</code>:清空集合元素</li></ul><h4 id="4-Hashtable类代码案例"><a href="#4-Hashtable类代码案例" class="headerlink" title="4. Hashtable类代码案例"></a>4. Hashtable类代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建HashTable对象</span><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `public synchronized V put(K key, V value)`:向集合中添加元素</span><br>        <span class="hljs-comment">// 1. key:键值</span><br>        <span class="hljs-comment">// 2. value:值</span><br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;小泽老师&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">40</span>);<br>        map.put(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;nation&quot;</span>, <span class="hljs-string">&quot;小日子过的不错的国家&quot;</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 2. `public synchronized V get(Object key)`:通过key获取集合中指定value值</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;name&quot;</span>));<br>        <span class="hljs-comment">// 3. `public synchronized V remove(Object key)`:通过key移除集合中的元素</span><br>        System.out.println(map);<br>        System.out.println(map.remove(<span class="hljs-string">&quot;nation&quot;</span>));<br>        System.out.println(map);<br>        <span class="hljs-comment">// 4. `public Set&lt;K&gt; keySet()`:获取集合中的所有key值</span><br>        Set&lt;String&gt; strings = map.keySet();<br>        System.out.println(strings);<br>        <span class="hljs-comment">// 5. `public Collection&lt;V&gt; values()`:获取集合中所有值</span><br>        Collection&lt;Object&gt; values = map.values();<br>        System.out.println(values);<br>        <span class="hljs-comment">// 6. `public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()`:获取集合中所有键值对(key-value)</span><br>        Set&lt;Map.Entry&lt;String, Object&gt;&gt; entries = map.entrySet();<br>        System.out.println(entries);<br>        <span class="hljs-comment">// 7. `public synchronized int size()`:获取集合中所有元素数量</span><br>        System.out.println(map.size());<br>        <span class="hljs-comment">// 8. `public synchronized boolean isEmpty()`:判断集合是否为空</span><br>        System.out.println(map.isEmpty());<br>        <span class="hljs-comment">// 9. `public synchronized void clear()`:清空集合元素</span><br>        map.clear();<br>        System.out.println(map.size());<br>        System.out.println(map.isEmpty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map接口之TreeMap类"><a href="#Map接口之TreeMap类" class="headerlink" title="Map接口之TreeMap类"></a>Map接口之TreeMap类</h3><h4 id="1-TreeMap类概述"><a href="#1-TreeMap类概述" class="headerlink" title="1. TreeMap类概述"></a>1. TreeMap类概述</h4><blockquote><p>TreeMap底层使用红黑树实现,与HashMap的却别是不在验证长度更改红黑树,其他与HashMap相同</p></blockquote><h4 id="2-TreeMap类的构造方法"><a href="#2-TreeMap类的构造方法" class="headerlink" title="2. TreeMap类的构造方法"></a>2. TreeMap类的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建TreeMap集合对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// comparator是比较器,比较器的作用是 用于排序</span><br>    comparator = <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// 创建TreeMap集合对象,并指定Map集合将数据添加至TreeMap集合中</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;<br>    comparator = <span class="hljs-literal">null</span>;<br>    putAll(m);<br>&#125;<br><span class="hljs-comment">// 创建TreeMapper集合对象并指定比较器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator)</span> &#123;<br>    <span class="hljs-built_in">this</span>.comparator = comparator;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-TreeMap类的常用方法"><a href="#3-TreeMap类的常用方法" class="headerlink" title="3. TreeMap类的常用方法"></a>3. TreeMap类的常用方法</h4><ul><li><code>public V put(K key, V value)</code>:向集合中添加数据<ol><li>key:键值</li><li>value:值</li></ol></li><li><code>public void putAll(Map&lt;? extends K, ? extends V&gt; map)</code>:添加整个Map集合的数据</li><li><code>public V get(Object key)</code>:指定key获取集合中的value值</li><li><code>public K firstKey()</code>:获取集合中第一个元素的key</li><li><code>public K lastKey()</code>:获取集合中最后一个元素的key</li><li><code>public boolean containsKey(Object key)</code>:判断集合中是否包含指定key</li><li><code>public boolean containsValue(Object value)</code>:判断集合中是否包含指定value</li><li><code>public Set&lt;K&gt; keySet()</code>:取出集合中所有的key值</li><li><code>public Collection&lt;V&gt; values()</code>:取出集合中所有的value值</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>:取出集合中所有的key-value(取出键值对)</li><li><code>public V remove(Object key)</code>:指定key移除集合中的元素</li><li><code>public int size()</code>:获取集合中添加的元素数量</li><li><code>boolean isEmpty()</code>:获取集合是否为空</li><li><code>public void clear()</code>:清空集合中所有的元素</li></ul><h4 id="4-TreeMap集合代码案例"><a href="#4-TreeMap集合代码案例" class="headerlink" title="4. TreeMap集合代码案例"></a>4. TreeMap集合代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeMapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用多态方式创建TreeMap集合对象</span><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `public V put(K key, V value)`:向集合中添加数据</span><br>        <span class="hljs-comment">// 1. key:键值</span><br>        <span class="hljs-comment">// 2. value:值</span><br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<br>        map.put(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;男神&quot;</span>);<br>        <span class="hljs-comment">// 赋值一个相同的</span><br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">// 2. `public void putAll(Map&lt;? extends K, ? extends V&gt; map)`:添加整个Map集合的数据</span><br>        map.putAll(map);<br>        <span class="hljs-comment">// 3. `public V get(Object key)`:指定key获取集合中的value值</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;name&quot;</span>));<br>        <span class="hljs-comment">// 一下两个方法是TreeMap私有方法所以需要向下转型</span><br>        TreeMap&lt;String, Object&gt; treeMap = (TreeMap&lt;String, Object&gt;) map;<br>        <span class="hljs-comment">// 4. `public K firstKey()`:获取集合中第一个元素的key</span><br>        System.out.println(treeMap.firstKey());<br>        <span class="hljs-comment">// 5. `public K lastKey()`:获取集合中最后一个元素的key</span><br>        System.out.println(treeMap.lastKey());<br>        <span class="hljs-comment">// 6. `public boolean containsKey(Object key)`:判断集合中是否包含指定key</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;name&quot;</span>));<br>        <span class="hljs-comment">// 7. `public boolean containsValue(Object value)`:判断集合中是否包含指定value</span><br>        System.out.println(map.containsValue(<span class="hljs-string">&quot;吴彦祖&quot;</span>));<br>        <span class="hljs-comment">// 8. `public Set&lt;K&gt; keySet()`:取出集合中所有的key值</span><br>        Set&lt;String&gt; strings = map.keySet();<br>        System.out.println(strings);<br>        <span class="hljs-comment">// 9. `public Collection&lt;V&gt; values()`:取出集合中所有的value值</span><br>        Collection&lt;Object&gt; values = map.values();<br>        System.out.println(values);<br>        <span class="hljs-comment">// 10. `public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()`:取出集合中所有的key-value(取出键值对)</span><br>        Set&lt;Map.Entry&lt;String, Object&gt;&gt; entries = map.entrySet();<br>        System.out.println(entries);<br>        <span class="hljs-comment">// 11. `public V remove(Object key)`:指定key移除集合中的元素</span><br>        System.out.println(map.remove(<span class="hljs-string">&quot;sex&quot;</span>));<br>        <span class="hljs-comment">// 12. `public int size()`:获取集合中添加的元素数量</span><br>        System.out.println(map.size());<br>        <span class="hljs-comment">// 13. `boolean isEmpty()`:获取集合是否为空</span><br>        System.out.println(map.isEmpty());<br>        <span class="hljs-comment">// 14. `public void clear()`:清空集合中所有的元素</span><br>        map.clear();<br>        System.out.println(map.size());<br>        System.out.println(map.isEmpty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><h4 id="1-Set接口概述"><a href="#1-Set接口概述" class="headerlink" title="1. Set接口概述"></a>1. Set接口概述</h4><blockquote><p>Set接口与List接口相同都是Collection接口的子孙接口,Set接口中没有新增方法(所有的方法都是他爹的Collection接口的),之前所用的List接口的方法在Set接口中也是通用的<br>Set接口特点:数据不重复,顺序是无序的(添加顺序与取出顺序不同,以及没有下标指向)无索引,遍历只能通过循环遍历(数据不能重复的原因是使用的HashMap类的put方法)</p></blockquote><h4 id="2-Set接口方法–-gt-与他父类Collection接口一致"><a href="#2-Set接口方法–-gt-与他父类Collection接口一致" class="headerlink" title="2. Set接口方法–&gt;与他父类Collection接口一致"></a>2. Set接口方法–&gt;与他父类Collection接口一致</h4><ul><li><code>boolean add(E e)</code>:向集合中添加元素</li><li><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>:向集合中添加一个集合元素</li><li><code>boolean contains(Object o)</code>:检测集合中是否包含某个元素</li><li><code>boolean containsAll(Collection&lt;?&gt; c)</code>:检测集合中是否包含另一个集合中的元素</li><li><code>boolean remove(Object o)</code>:从集合中移除指定数据(对象)</li><li><code>boolean removeAll(Collection&lt;?&gt; c)</code>:移除此集合的所有也包含在指定集合中的元素</li><li><code>boolean retainAll(Collection&lt;?&gt; c)</code>:移除刺激和的所有不包含在指定集合中的元素(移除非相同的元素,非交集元素)</li><li><code>int size()</code>:返回集合中的元素数量</li><li><code>boolean isEmpty()</code>:判断集合是否为空</li><li><code>Object[] toArray()</code>:将集合转为数组</li><li><code>void clear()</code>:清空集合内元素</li><li><code>Iterator&lt;E&gt; iterator()</code>:返回集合迭代器元素,用于遍历集合中的所有元素</li></ul><h3 id="Set接口之HashSet类"><a href="#Set接口之HashSet类" class="headerlink" title="Set接口之HashSet类"></a>Set接口之HashSet类</h3><h4 id="1-HashSet类概述"><a href="#1-HashSet类概述" class="headerlink" title="1. HashSet类概述"></a>1. HashSet类概述</h4><blockquote><p>HashSet底层使用哈希表算法实现,底层实际是使用<code>HashMap的put方法</code>实现,所以本质HashMap是HashSet类的母亲,HashSet有些类似于野孩子,谁的方法都有</p></blockquote><h4 id="2-HashSet类使用HashMap类的实现"><a href="#2-HashSet类使用HashMap类的实现" class="headerlink" title="2. HashSet类使用HashMap类的实现"></a>2. HashSet类使用HashMap类的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSet</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSet</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable &#123;<br>    <span class="hljs-comment">// 声明HashMap类对象,在创建HashSet对象时创建</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> HashMap&lt;E,Object&gt; map;<br>    <span class="hljs-comment">// Dummy value to associate with an Object in the backing Map</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">PRESENT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-comment">// 创建HashSet对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 顺带着创建了HashMap集合对象</span><br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-HashSet类的构造方法"><a href="#3-HashSet类的构造方法" class="headerlink" title="3. HashSet类的构造方法"></a>3. HashSet类的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用空参构造方法创建HashSet集合对象,并在内部创建HashMap集合对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建HashMap集合对象</span><br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br><span class="hljs-comment">// 使用带参构造方法创建HashSet集合对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-comment">// 创建HashMap集合对象并初始化容量</span><br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(initialCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-HashSet类的常用方法"><a href="#4-HashSet类的常用方法" class="headerlink" title="4. HashSet类的常用方法"></a>4. HashSet类的常用方法</h4><ul><li><code>public boolean add(E e)</code>:向集合中添加元素方法</li><li><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>:向集合中添加指定集合的所有数据</li><li><code>public boolean contains(Object o)</code>:判断集合中是否包含某一个指定的元素</li><li><code>public boolean remove(Object o)</code>:从集合中移除指定元素,如果成功则返回true,否则返回false</li><li><code>public int size()</code>:返回集合中元素数量</li><li><code>public boolean isEmpty()</code>:判断集合是否为空</li><li><code>public Iterator&lt;E&gt; iterator()</code>:返回此集合的迭代器对象</li><li><code>public void clear()</code>:移除集合中所有的元素</li></ul><h4 id="5-HashSet类的代码案例"><a href="#5-HashSet类的代码案例" class="headerlink" title="5. HashSet类的代码案例"></a>5. HashSet类的代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建HashSet集合对象</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `public boolean add(E e)`:向集合中添加元素方法</span><br>        set.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;梅超风&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;灭绝师太&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;川建国&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;基尼太美&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;古校长&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(set);<br>        <span class="hljs-comment">// 2. `boolean addAll(Collection&lt;? extends E&gt; c)`:向集合中添加指定集合的所有数据</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;古校长&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;古天乐&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;渣渣辉&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;小泽老师&quot;</span>);<br>        set.addAll(list);<br>        System.out.println(set);<br>        <span class="hljs-comment">// 3. `public boolean contains(Object o)`:判断集合中是否包含某一个指定的元素</span><br>        System.out.println(set.contains(<span class="hljs-string">&quot;灭绝师太&quot;</span>));<br>        <span class="hljs-comment">// 4. `public boolean remove(Object o)`:从集合中移除指定元素,如果成功则返回true,否则返回false</span><br>        System.out.println(set.remove(<span class="hljs-string">&quot;基尼太美&quot;</span>));<br>        System.out.println(set.remove(<span class="hljs-string">&quot;基尼太美&quot;</span>));<br>        System.out.println(set);<br>        <span class="hljs-comment">// 5. `public int size()`:返回集合中元素数量</span><br>        System.out.println(set.size());<br>        <span class="hljs-comment">// 6. `public boolean isEmpty()`:判断集合是否为空</span><br>        System.out.println(set.isEmpty());<br>        System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br>        <span class="hljs-comment">// 7. `public Iterator&lt;E&gt; iterator()`:返回此集合的迭代器对象</span><br>        Iterator&lt;String&gt; iterator = set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>        <span class="hljs-comment">// 8. `public void clear()`:移除集合中所有的元素</span><br>        System.out.println(<span class="hljs-string">&quot;调用clear方法&quot;</span>);<br>        set.clear();<br>        System.out.println(set);<br>        System.out.println(set.isEmpty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-HashSet中都是如何实现的方法"><a href="#6-HashSet中都是如何实现的方法" class="headerlink" title="6. HashSet中都是如何实现的方法"></a>6. HashSet中都是如何实现的方法</h4><blockquote><p>HashSet的方法没有一个是自己写的,要么是继承自AbstractSet抽象类,要么就是直接调用HashMap的方法</p></blockquote><h5 id="1-所以HashSet为什么不允许重复值就是因为调用的HashMap的put方法-而put放中有验证-hashCode和equals"><a href="#1-所以HashSet为什么不允许重复值就是因为调用的HashMap的put方法-而put放中有验证-hashCode和equals" class="headerlink" title="1. 所以HashSet为什么不允许重复值就是因为调用的HashMap的put方法,而put放中有验证(hashCode和equals)"></a>1. 所以HashSet为什么不允许重复值就是因为调用的HashMap的put方法,而put放中有验证(hashCode和equals)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 仅仅只是一个方法举例子,其他的相同!</span><br><span class="hljs-comment">// HashSet类中的add方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-comment">// HashSet什么事儿都没做直接调用map.put()设置值</span><br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-Set接口之TreeSet"><a href="#21-Set接口之TreeSet" class="headerlink" title="21. Set接口之TreeSet"></a>21. Set接口之TreeSet</h3><h4 id="1-TreeSet类的概述"><a href="#1-TreeSet类的概述" class="headerlink" title="1. TreeSet类的概述"></a>1. TreeSet类的概述</h4><blockquote><p>TreeSet底层实现是基于TreeMap类的,TreeMap与HashSet相同,没有自己独立的方法,所以本质也是数组TreeMap类</p></blockquote><h4 id="2-TreeSet类的构造方法"><a href="#2-TreeSet类的构造方法" class="headerlink" title="2. TreeSet类的构造方法"></a>2. TreeSet类的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用空参构造方法创建TreeSet对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用带参构造方法创建一个TreeMap对象</span><br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;E,Object&gt;());<br>&#125;<br><span class="hljs-comment">// 使用指定collection集合创建TreeSet对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-comment">// 调用空参构造方法</span><br>    <span class="hljs-built_in">this</span>();<br>    <span class="hljs-comment">// 调用addAll方法添加集合</span><br>    addAll(c);<br>&#125;<br><span class="hljs-comment">// 创建带有比较器的TreeSet对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(comparator));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-TreeSet类的常用方法"><a href="#3-TreeSet类的常用方法" class="headerlink" title="3. TreeSet类的常用方法"></a>3. TreeSet类的常用方法</h4><ul><li><code>public boolean add(E e)</code>:向集合中添加元素方法</li><li><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>:向集合中添加指定集合的所有数据</li><li><code>public boolean contains(Object o)</code>:判断集合中是否包含某一个指定的元素</li><li><code>public boolean remove(Object o)</code>:从集合中移除指定元素,如果成功则返回true,否则返回false</li><li><code>public int size()</code>:返回集合中元素数量</li><li><code>public boolean isEmpty()</code>:判断集合是否为空</li><li><code>public Iterator&lt;E&gt; iterator()</code>:返回此集合的迭代器对象</li><li><code>public void clear()</code>:移除集合中所有的元素</li></ul><h4 id="4-TreeSet类的代码案例"><a href="#4-TreeSet类的代码案例" class="headerlink" title="4. TreeSet类的代码案例"></a>4. TreeSet类的代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeSetDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用多态方式创建TreeSet集合</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `public boolean add(E e)`:向集合中添加元素方法</span><br>        set.add(<span class="hljs-string">&quot;蜘蛛侠&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;黑寡妇&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;绿巨人&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;美国翘臀&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;死侍&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;死侍&quot;</span>);<br>        System.out.println(set);<br>        <span class="hljs-comment">// 2. `boolean addAll(Collection&lt;? extends E&gt; c)`:向集合中添加指定集合的所有数据</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;超人&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;蝙蝠侠&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;钢骨&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;神奇女侠&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;海王&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;海王&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;火星猎人&quot;</span>);<br>        System.out.println(list);<br>        set.addAll(list);<br>        System.out.println(set);<br>        <span class="hljs-comment">// 3. `public boolean contains(Object o)`:判断集合中是否包含某一个指定的元素</span><br>        System.out.println(set.contains(<span class="hljs-string">&quot;黑寡妇&quot;</span>));<br>        <span class="hljs-comment">// 4. `public boolean remove(Object o)`:从集合中移除指定元素,如果成功则返回true,否则返回false</span><br>        System.out.println(set.remove(<span class="hljs-string">&quot;火星猎人&quot;</span>));<br>        System.out.println(set.remove(<span class="hljs-string">&quot;火星猎人&quot;</span>));<br>        System.out.println(set);<br>        <span class="hljs-comment">// 5. `public int size()`:返回集合中元素数量</span><br>        System.out.println(set.size());<br>        <span class="hljs-comment">// 6. `public boolean isEmpty()`:判断集合是否为空</span><br>        System.out.println(set.isEmpty());<br>        <span class="hljs-comment">// 7. `public Iterator&lt;E&gt; iterator()`:返回此集合的迭代器对象</span><br>        System.out.println(<span class="hljs-string">&quot;==========================================&quot;</span>);<br>        Iterator&lt;String&gt; iterator = set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>        <span class="hljs-comment">// 8. `public void clear()`:移除集合中所有的元素</span><br>        System.out.println(<span class="hljs-string">&quot;调用clear方法&quot;</span>);<br>        set.clear();<br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-TreeSet类的具体实现"><a href="#5-TreeSet类的具体实现" class="headerlink" title="5. TreeSet类的具体实现"></a>5. TreeSet类的具体实现</h4><blockquote><p>TreeSet与HashSet相同没有自己的实现,TreeSet所有的方法都是调用TreeMap的方法</p></blockquote><h5 id="1-TreeSet类的add方法实现"><a href="#1-TreeSet类的add方法实现" class="headerlink" title="1. TreeSet类的add方法实现"></a>1. TreeSet类的add方法实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// map集合</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> NavigableMap&lt;E,Object&gt; m;<br><span class="hljs-comment">// 通过构造方法创建TreeMap集合对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;E,Object&gt;());<br>&#125;<br><span class="hljs-comment">// TreeSet集合的add方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-comment">// 调用TreeMap集合的put方法</span><br>    <span class="hljs-keyword">return</span> m.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Set接口之LinkedHashSet类"><a href="#Set接口之LinkedHashSet类" class="headerlink" title="Set接口之LinkedHashSet类"></a>Set接口之LinkedHashSet类</h3><h4 id="1-LinkedHashSet类概述"><a href="#1-LinkedHashSet类概述" class="headerlink" title="1. LinkedHashSet类概述"></a>1. LinkedHashSet类概述</h4><blockquote><p>LinkedHashSet类没有自己的方法所用的是继承HashSet的方法,所有使用的方法也都是基于HashSet类而HashSet类中创建对象有两个,一个是HashMap一个LinkedHashMap,而其中LinkedHashMap是供LinkedHashSet使用,LinkedHashSet集合是有序的(存储顺序与调用顺序一致)</p></blockquote><h4 id="2-LinkedHashSet类的构造方法"><a href="#2-LinkedHashSet类的构造方法" class="headerlink" title="2. LinkedHashSet类的构造方法"></a>2. LinkedHashSet类的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用空参构造方法创建LinkedHashSet对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedHashSet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用其父HashSet构造方法创建LinkedHashMap对象,使用LinkedHashMap方法</span><br>    <span class="hljs-built_in">super</span>(<span class="hljs-number">16</span>, <span class="hljs-number">.75f</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-comment">// 使用指定初始化容量的构造方法创建LinkedHashSet对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedHashSet</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-comment">// 调用其父HashSet构造方法创建LinkedHashMap对象,使用LinkedHashMap方法</span><br>    <span class="hljs-built_in">super</span>(initialCapacity, <span class="hljs-number">.75f</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-LinkedHashSet类的构造方法"><a href="#3-LinkedHashSet类的构造方法" class="headerlink" title="3. LinkedHashSet类的构造方法"></a>3. LinkedHashSet类的构造方法</h4><ul><li><code>public boolean add(E e)</code>:向集合中添加元素方法</li><li><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>:向集合中添加指定集合的所有数据</li><li><code>public boolean contains(Object o)</code>:判断集合中是否包含某一个指定的元素</li><li><code>public boolean remove(Object o)</code>:从集合中移除指定元素,如果成功则返回true,否则返回false</li><li><code>public int size()</code>:返回集合中元素数量</li><li><code>public boolean isEmpty()</code>:判断集合是否为空</li><li><code>public Iterator&lt;E&gt; iterator()</code>:返回此集合的迭代器对象</li><li><code>public void clear()</code>:移除集合中所有的元素</li></ul><h4 id="4-LinkedHashSet类的代码案例"><a href="#4-LinkedHashSet类的代码案例" class="headerlink" title="4. LinkedHashSet类的代码案例"></a>4. LinkedHashSet类的代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashSetDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建LinkedHashSet集合对象</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1. `public boolean add(E e)`:向集合中添加元素方法</span><br>        set.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;吴彦祖&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;梅超风&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;灭绝师太&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;川建国&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;基尼太美&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;古校长&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        System.out.println(set);<br>        <span class="hljs-comment">// 2. `boolean addAll(Collection&lt;? extends E&gt; c)`:向集合中添加指定集合的所有数据</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;彭于晏&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;古校长&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;古天乐&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;渣渣辉&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;小泽老师&quot;</span>);<br>        set.addAll(list);<br>        System.out.println(set);<br>        <span class="hljs-comment">// 3. `public boolean contains(Object o)`:判断集合中是否包含某一个指定的元素</span><br>        System.out.println(set.contains(<span class="hljs-string">&quot;灭绝师太&quot;</span>));<br>        <span class="hljs-comment">// 4. `public boolean remove(Object o)`:从集合中移除指定元素,如果成功则返回true,否则返回false</span><br>        System.out.println(set.remove(<span class="hljs-string">&quot;基尼太美&quot;</span>));<br>        System.out.println(set.remove(<span class="hljs-string">&quot;基尼太美&quot;</span>));<br>        System.out.println(set);<br>        <span class="hljs-comment">// 5. `public int size()`:返回集合中元素数量</span><br>        System.out.println(set.size());<br>        <span class="hljs-comment">// 6. `public boolean isEmpty()`:判断集合是否为空</span><br>        System.out.println(set.isEmpty());<br>        System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br>        <span class="hljs-comment">// 7. `public Iterator&lt;E&gt; iterator()`:返回此集合的迭代器对象</span><br>        Iterator&lt;String&gt; iterator = set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>        <span class="hljs-comment">// 8. `public void clear()`:移除集合中所有的元素</span><br>        System.out.println(<span class="hljs-string">&quot;调用clear方法&quot;</span>);<br>        set.clear();<br>        System.out.println(set);<br>        System.out.println(set.isEmpty());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="集合中的Comparator比较器"><a href="#集合中的Comparator比较器" class="headerlink" title="集合中的Comparator比较器"></a>集合中的Comparator比较器</h3><h4 id="1-Comparator比较器概述"><a href="#1-Comparator比较器概述" class="headerlink" title="1. Comparator比较器概述"></a>1. Comparator比较器概述</h4><blockquote><p> Comparator比较器作用是用于集合的自定义排序,排序规则分为两种,1. 升序;2. 降序;<br> <code>注意:集合的构造方法中带有Comparator比较器参数就代表,给其添加元素时元素必须要有实现Comparator比较器,或者使用外部比较器实现</code></p></blockquote><h4 id="2-使用Set集合的比较器案例"><a href="#2-使用Set集合的比较器案例" class="headerlink" title="2. 使用Set集合的比较器案例"></a>2. 使用Set集合的比较器案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComparatorDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 调用Set集合的比较实现</span><br>        func01();<br>    &#125;<br>    <span class="hljs-comment">// Set集合的比较</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 使用TreeSet的比较器构造方法创建对象,其中Comparator比较器使用外部比较器</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 比较方法</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> o1 字符串1</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> o2 字符串2</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@return</span> 返回字符串1与字符串2的对比</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 1. `public boolean add(E e)`:向集合中添加元素方法</span><br>        set.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;3&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;4&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;5&quot;</span>);<br>        <span class="hljs-comment">// [死侍, 绿巨人, 美国翘臀, 蜘蛛侠, 黑寡妇]</span><br>        <span class="hljs-comment">// [黑寡妇, 蜘蛛侠, 美国翘臀, 绿巨人, 死侍]</span><br>        System.out.println(set);<br>        <span class="hljs-comment">// 使用自定义对象创建外部比较器的TreeSet集合对象</span><br>        Set&lt;Person&gt; persons1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Person&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Person o1, Person o2)</span> &#123;<br>                <span class="hljs-comment">// 使用年龄排序</span><br>                <span class="hljs-comment">// return o2.getAge() - o1.getAge();</span><br>                <span class="hljs-comment">// 按照名称排序</span><br>                <span class="hljs-comment">// return o1.getName().compareTo(o2.getName());</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">o1Name</span> <span class="hljs-operator">=</span> o1.getName();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o1Sex</span> <span class="hljs-operator">=</span> o1.getSex();<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">o1Age</span> <span class="hljs-operator">=</span> o1.getAge();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o2Name</span> <span class="hljs-operator">=</span> o2.getName();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o2Sex</span> <span class="hljs-operator">=</span> o2.getSex();<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">o2Age</span> <span class="hljs-operator">=</span> o2.getAge();<br>                <span class="hljs-comment">// 将所有的值相加然后使用String类的compareTo方法</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">personString1</span> <span class="hljs-operator">=</span> o1Name + o1Sex + o1Age;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">personString2</span> <span class="hljs-operator">=</span> o2Name + o2Sex + o2Age;<br>                <span class="hljs-keyword">return</span> personString1.compareTo(personString2);<br>            &#125;<br>        &#125;);<br>        persons1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">1000</span>));<br>        persons1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">900</span>));<br>        persons1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;沙悟净&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">800</span>));<br>        persons1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白龙马&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-number">200</span>));<br>        persons1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;唐玄奘&quot;</span>, <span class="hljs-string">&quot;人&quot;</span>, <span class="hljs-number">500</span>));<br>        persons1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">300</span>));<br>        System.out.println(persons1);<br>        <span class="hljs-comment">// 使用Person自定义对象创建内部比较器,进行比较,所有的带有比较器的集合添加的数据都必须实现比较器接口</span><br>        <span class="hljs-comment">// 如果Person没有实现比较器并且没有使用外部比较器则无法直接添加到TreeSet集合中</span><br>        Set&lt;Person&gt; persons2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>        persons2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">1000</span>));<br>        persons2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">900</span>));<br>        persons2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;沙悟净&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">800</span>));<br>        persons2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白龙马&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-number">200</span>));<br>        persons2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;唐玄奘&quot;</span>, <span class="hljs-string">&quot;人&quot;</span>, <span class="hljs-number">500</span>));<br>        persons2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">300</span>));<br>        System.out.println(persons2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-使用List集合的比较器案例"><a href="#3-使用List集合的比较器案例" class="headerlink" title="3. 使用List集合的比较器案例"></a>3. 使用List集合的比较器案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComparatorDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 调用List集合的比较实现</span><br>        func02();<br>    &#125;<br>    <span class="hljs-comment">// List集合的比较</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 实现List结合的比较方法sort</span><br>        List&lt;Person&gt; persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">1000</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">900</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;沙悟净&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">800</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白龙马&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-number">200</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;唐玄奘&quot;</span>, <span class="hljs-string">&quot;人&quot;</span>, <span class="hljs-number">500</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">300</span>));<br>        System.out.println(persons);<br>        <span class="hljs-comment">// 调用sort排序方法</span><br>        persons.sort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Person&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Person o1, Person o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge();<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 输出结果</span><br>        System.out.println(persons);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashMap与HashSet集合中添加自定义对象重复原因"><a href="#HashMap与HashSet集合中添加自定义对象重复原因" class="headerlink" title="HashMap与HashSet集合中添加自定义对象重复原因"></a>HashMap与HashSet集合中添加自定义对象重复原因</h3><h4 id="1-数据重复的原因"><a href="#1-数据重复的原因" class="headerlink" title="1. 数据重复的原因"></a>1. 数据重复的原因</h4><blockquote><p>已知HashMap的Key和HashSet集合中不能添加重复数据,而我们自定义对象却可以重复,其根本原因是Map中的put方法验证Key是否重复使用的是hashCode和equals方法验证,而自定义类在不重写的情况下使用的是父类Object类的方法,所以计算的结果都不同,也就导致了添加时会重复的原因,一旦重写hashCode和equals方法后则不会出现此问题</p></blockquote><h4 id="2-解决数据重复"><a href="#2-解决数据重复" class="headerlink" title="2. 解决数据重复"></a>2. 解决数据重复</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Person&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String sex, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现Comparable接口重写compareTo方法实现排序</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o 传入的Person对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回计算的结果(整数类型)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Person o)</span> &#123;<br>        <span class="hljs-comment">// 使用年龄排序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写equals</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) o;<br>        <span class="hljs-keyword">return</span> Objects.equals(name, person.name) &amp;&amp; Objects.equals(sex, person.sex) &amp;&amp; Objects.equals(age, person.age);<br>    &#125;<br><br>    <span class="hljs-comment">// 重写hashCode</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, sex, age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomizeObjectDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用自定义对象,向Set集合中添加数据</span><br>        <span class="hljs-comment">// 会出现数据重复的问题,其原因是因为map中的put方法比较时是使用hashCode和equals方法去判断的</span><br>        Set&lt;Person&gt; persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置数据</span><br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">1000</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">900</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;沙悟净&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">800</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白龙马&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-number">200</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;唐玄奘&quot;</span>, <span class="hljs-string">&quot;人&quot;</span>, <span class="hljs-number">500</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">300</span>));<br>        <span class="hljs-comment">// 添加重复数据</span><br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">1000</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">900</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;沙悟净&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">800</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白龙马&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-number">200</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;唐玄奘&quot;</span>, <span class="hljs-string">&quot;人&quot;</span>, <span class="hljs-number">500</span>));<br>        persons.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-string">&quot;妖&quot;</span>, <span class="hljs-number">300</span>));<br>        <span class="hljs-comment">// 使用迭代器打印数据</span><br>        Iterator&lt;Person&gt; iterator = persons.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="集合工具类Collections"><a href="#集合工具类Collections" class="headerlink" title="集合工具类Collections"></a>集合工具类Collections</h3><h4 id="1-Collections是Java提供的操作集合的工具类-也是一个鸡肋产品-提供了部分的集合方法-例如排序等等"><a href="#1-Collections是Java提供的操作集合的工具类-也是一个鸡肋产品-提供了部分的集合方法-例如排序等等" class="headerlink" title="1. Collections是Java提供的操作集合的工具类,也是一个鸡肋产品,提供了部分的集合方法,例如排序等等"></a>1. Collections是Java提供的操作集合的工具类,也是一个鸡肋产品,提供了部分的集合方法,例如排序等等</h4><h4 id="2-Collections中的方法"><a href="#2-Collections中的方法" class="headerlink" title="2. Collections中的方法"></a>2. Collections中的方法</h4><ul><li><code>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</code>:排序方法,默认升序并且无法更改降序</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>:升序加降序都可以的</li><li><code>public static void shuffle(List&lt;?&gt; list)</code>:混乱排序</li><li><code>public static void reverse(List&lt;?&gt; list)</code>:将集合倒转</li></ul><h4 id="3-Collections代码案例"><a href="#3-Collections代码案例" class="headerlink" title="3. Collections代码案例"></a>3. Collections代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionsDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;超人&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;蝙蝠侠&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;钢骨&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;神奇女侠&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;海王&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;海王&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;火星猎人&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 1. `public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)`:排序方法,默认升序并且无法更改降序</span><br>        Collections.sort(list);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 2. `public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)`:升序加降序都可以的</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o2.compareTo(o1);<br>            &#125;<br>        &#125;);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 3. `public static void shuffle(List&lt;?&gt; list)`:混乱排序</span><br>        Collections.shuffle(list);<br>        System.out.println(list);<br>        <span class="hljs-comment">// 4. `public static void reverse(List&lt;?&gt; list)`:将集合倒转</span><br>        Collections.sort(list);<br>        System.out.println(list);<br>        Collections.reverse(list);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div>    <script src="//cdn.jsdelivr.net/npm/@waline/client"></script><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid 使用相关指南</title>
    <link href="/2022/09/21/Hexo%20Fluid%20%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E6%8C%87%E5%8D%97/"/>
    <url>/2022/09/21/Hexo%20Fluid%20%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="❤️使用指南"><a href="#❤️使用指南" class="headerlink" title="❤️使用指南"></a>❤️使用指南</h3><p>➡️New Markdown 可以执行命令来创建一篇新文章或者新的页面;当然也可以通过新建完成创建</p><h3 id="❤️MD属性相关"><a href="#❤️MD属性相关" class="headerlink" title="❤️MD属性相关"></a>❤️MD属性相关</h3><blockquote><p>title: 这是标题<br>date: 2022-09-21 17:04:34<br>tags: other<br>excerpt: 这是摘要<br>index_img: &#x2F;img&#x2F;example.jpg<br>banner_img: &#x2F;img&#x2F;post_banner.jpg<br>sticky: 100</p><p>contegories：目录</p></blockquote><p>字段<code>tags</code>设置文章归属标签；自定义摘要可以使用字段<code>excerpt</code>进行设置，手动优先级高于自动设置；<code>sticky</code>属性影响文章的排序，数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序；<code>index_img</code> 属性决定了文章在首页显示的封面图，置空时选择默认；<code>banner_img</code> 属性文章页配置顶部大图</p><h3 id="❤️-脚注"><a href="#❤️-脚注" class="headerlink" title="❤️ 脚注"></a>❤️ 脚注</h3><p>示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一句话[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span><br><br>正文<br><br><span class="hljs-section">## 参考</span><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure><h3 id="❤️Tag-插件"><a href="#❤️Tag-插件" class="headerlink" title="❤️Tag 插件"></a>❤️Tag 插件</h3><h4 id="便签MD语法"><a href="#便签MD语法" class="headerlink" title="便签MD语法"></a>便签MD语法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><h4 id="便签-HTML形式"><a href="#便签-HTML形式" class="headerlink" title="便签 HTML形式"></a>便签 HTML形式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>属性选项：primary secondary success danger warning info light</p><blockquote><p><strong>注意：</strong></p><p>使用时 <code>&#123;% note primary %&#125;` 和 `&#123;% endnote %&#125;</code> 需单独一行，否则会出现问题</p></blockquote><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h4><p>在 markdown 中加入如下的代码来使用 Label：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选 Label：</p><p>primary default info success warning danger</p><blockquote><p>注意：</p><p>若使用 <code>&#123;% label primary @text %&#125;</code>，text 不能以 @ 开头</p></blockquote><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><script src="//cdn.jsdelivr.net/npm/@waline/client"></script>  <div id="waline"></div>  <script>    Waline({      el: '#waline',      serverURL: 'https://vercel-project-4d7haxk1c-i-xiaoxin.vercel.app',    });  </script>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
